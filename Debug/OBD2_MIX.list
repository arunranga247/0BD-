
OBD2_MIX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a73c  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  0800a7f8  0800a7f8  0001a7f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adfc  0800adfc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800adfc  0800adfc  0001adfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae04  0800ae04  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae04  0800ae04  0001ae04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae08  0800ae08  0001ae08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800ae0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  200001e0  0800afec  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  0800afec  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010054  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021cd  00000000  00000000  0003025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00032430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  00033098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc5b  00000000  00000000  00033c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e7cd  00000000  00000000  00050883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b728d  00000000  00000000  0005f050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001162dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d44  00000000  00000000  00116330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800a7e0 	.word	0x0800a7e0

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	0800a7e0 	.word	0x0800a7e0

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f000 fff9 	bl	8001430 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff49 	bl	80012e0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffeb 	bl	8001430 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffe1 	bl	8001430 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff71 	bl	8001364 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff67 	bl	8001364 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 febe 	bl	8002284 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 feb9 	bl	8002284 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	000d      	movs	r5, r1
 8000686:	0004      	movs	r4, r0
 8000688:	b5c0      	push	{r6, r7, lr}
 800068a:	001f      	movs	r7, r3
 800068c:	0011      	movs	r1, r2
 800068e:	0328      	lsls	r0, r5, #12
 8000690:	0f62      	lsrs	r2, r4, #29
 8000692:	0a40      	lsrs	r0, r0, #9
 8000694:	4310      	orrs	r0, r2
 8000696:	007a      	lsls	r2, r7, #1
 8000698:	0d52      	lsrs	r2, r2, #21
 800069a:	00e3      	lsls	r3, r4, #3
 800069c:	033c      	lsls	r4, r7, #12
 800069e:	4691      	mov	r9, r2
 80006a0:	0a64      	lsrs	r4, r4, #9
 80006a2:	0ffa      	lsrs	r2, r7, #31
 80006a4:	0f4f      	lsrs	r7, r1, #29
 80006a6:	006e      	lsls	r6, r5, #1
 80006a8:	4327      	orrs	r7, r4
 80006aa:	4692      	mov	sl, r2
 80006ac:	46b8      	mov	r8, r7
 80006ae:	0d76      	lsrs	r6, r6, #21
 80006b0:	0fed      	lsrs	r5, r5, #31
 80006b2:	00c9      	lsls	r1, r1, #3
 80006b4:	4295      	cmp	r5, r2
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3e>
 80006b8:	e099      	b.n	80007ee <__aeabi_dadd+0x172>
 80006ba:	464c      	mov	r4, r9
 80006bc:	1b34      	subs	r4, r6, r4
 80006be:	46a4      	mov	ip, r4
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	dc00      	bgt.n	80006c6 <__aeabi_dadd+0x4a>
 80006c4:	e07c      	b.n	80007c0 <__aeabi_dadd+0x144>
 80006c6:	464a      	mov	r2, r9
 80006c8:	2a00      	cmp	r2, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x52>
 80006cc:	e0b8      	b.n	8000840 <__aeabi_dadd+0x1c4>
 80006ce:	4ac5      	ldr	r2, [pc, #788]	; (80009e4 <__aeabi_dadd+0x368>)
 80006d0:	4296      	cmp	r6, r2
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x5a>
 80006d4:	e11c      	b.n	8000910 <__aeabi_dadd+0x294>
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	003c      	movs	r4, r7
 80006da:	0412      	lsls	r2, r2, #16
 80006dc:	4314      	orrs	r4, r2
 80006de:	46a0      	mov	r8, r4
 80006e0:	4662      	mov	r2, ip
 80006e2:	2a38      	cmp	r2, #56	; 0x38
 80006e4:	dd00      	ble.n	80006e8 <__aeabi_dadd+0x6c>
 80006e6:	e161      	b.n	80009ac <__aeabi_dadd+0x330>
 80006e8:	2a1f      	cmp	r2, #31
 80006ea:	dd00      	ble.n	80006ee <__aeabi_dadd+0x72>
 80006ec:	e1cc      	b.n	8000a88 <__aeabi_dadd+0x40c>
 80006ee:	4664      	mov	r4, ip
 80006f0:	2220      	movs	r2, #32
 80006f2:	1b12      	subs	r2, r2, r4
 80006f4:	4644      	mov	r4, r8
 80006f6:	4094      	lsls	r4, r2
 80006f8:	000f      	movs	r7, r1
 80006fa:	46a1      	mov	r9, r4
 80006fc:	4664      	mov	r4, ip
 80006fe:	4091      	lsls	r1, r2
 8000700:	40e7      	lsrs	r7, r4
 8000702:	464c      	mov	r4, r9
 8000704:	1e4a      	subs	r2, r1, #1
 8000706:	4191      	sbcs	r1, r2
 8000708:	433c      	orrs	r4, r7
 800070a:	4642      	mov	r2, r8
 800070c:	4321      	orrs	r1, r4
 800070e:	4664      	mov	r4, ip
 8000710:	40e2      	lsrs	r2, r4
 8000712:	1a80      	subs	r0, r0, r2
 8000714:	1a5c      	subs	r4, r3, r1
 8000716:	42a3      	cmp	r3, r4
 8000718:	419b      	sbcs	r3, r3
 800071a:	425f      	negs	r7, r3
 800071c:	1bc7      	subs	r7, r0, r7
 800071e:	023b      	lsls	r3, r7, #8
 8000720:	d400      	bmi.n	8000724 <__aeabi_dadd+0xa8>
 8000722:	e0d0      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000724:	027f      	lsls	r7, r7, #9
 8000726:	0a7f      	lsrs	r7, r7, #9
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0xb2>
 800072c:	e0ff      	b.n	800092e <__aeabi_dadd+0x2b2>
 800072e:	0038      	movs	r0, r7
 8000730:	f001 fd8a 	bl	8002248 <__clzsi2>
 8000734:	0001      	movs	r1, r0
 8000736:	3908      	subs	r1, #8
 8000738:	2320      	movs	r3, #32
 800073a:	0022      	movs	r2, r4
 800073c:	1a5b      	subs	r3, r3, r1
 800073e:	408f      	lsls	r7, r1
 8000740:	40da      	lsrs	r2, r3
 8000742:	408c      	lsls	r4, r1
 8000744:	4317      	orrs	r7, r2
 8000746:	42b1      	cmp	r1, r6
 8000748:	da00      	bge.n	800074c <__aeabi_dadd+0xd0>
 800074a:	e0ff      	b.n	800094c <__aeabi_dadd+0x2d0>
 800074c:	1b89      	subs	r1, r1, r6
 800074e:	1c4b      	adds	r3, r1, #1
 8000750:	2b1f      	cmp	r3, #31
 8000752:	dd00      	ble.n	8000756 <__aeabi_dadd+0xda>
 8000754:	e0a8      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000756:	2220      	movs	r2, #32
 8000758:	0039      	movs	r1, r7
 800075a:	1ad2      	subs	r2, r2, r3
 800075c:	0020      	movs	r0, r4
 800075e:	4094      	lsls	r4, r2
 8000760:	4091      	lsls	r1, r2
 8000762:	40d8      	lsrs	r0, r3
 8000764:	1e62      	subs	r2, r4, #1
 8000766:	4194      	sbcs	r4, r2
 8000768:	40df      	lsrs	r7, r3
 800076a:	2600      	movs	r6, #0
 800076c:	4301      	orrs	r1, r0
 800076e:	430c      	orrs	r4, r1
 8000770:	0763      	lsls	r3, r4, #29
 8000772:	d009      	beq.n	8000788 <__aeabi_dadd+0x10c>
 8000774:	230f      	movs	r3, #15
 8000776:	4023      	ands	r3, r4
 8000778:	2b04      	cmp	r3, #4
 800077a:	d005      	beq.n	8000788 <__aeabi_dadd+0x10c>
 800077c:	1d23      	adds	r3, r4, #4
 800077e:	42a3      	cmp	r3, r4
 8000780:	41a4      	sbcs	r4, r4
 8000782:	4264      	negs	r4, r4
 8000784:	193f      	adds	r7, r7, r4
 8000786:	001c      	movs	r4, r3
 8000788:	023b      	lsls	r3, r7, #8
 800078a:	d400      	bmi.n	800078e <__aeabi_dadd+0x112>
 800078c:	e09e      	b.n	80008cc <__aeabi_dadd+0x250>
 800078e:	4b95      	ldr	r3, [pc, #596]	; (80009e4 <__aeabi_dadd+0x368>)
 8000790:	3601      	adds	r6, #1
 8000792:	429e      	cmp	r6, r3
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x11c>
 8000796:	e0b7      	b.n	8000908 <__aeabi_dadd+0x28c>
 8000798:	4a93      	ldr	r2, [pc, #588]	; (80009e8 <__aeabi_dadd+0x36c>)
 800079a:	08e4      	lsrs	r4, r4, #3
 800079c:	4017      	ands	r7, r2
 800079e:	077b      	lsls	r3, r7, #29
 80007a0:	0571      	lsls	r1, r6, #21
 80007a2:	027f      	lsls	r7, r7, #9
 80007a4:	4323      	orrs	r3, r4
 80007a6:	0b3f      	lsrs	r7, r7, #12
 80007a8:	0d4a      	lsrs	r2, r1, #21
 80007aa:	0512      	lsls	r2, r2, #20
 80007ac:	433a      	orrs	r2, r7
 80007ae:	07ed      	lsls	r5, r5, #31
 80007b0:	432a      	orrs	r2, r5
 80007b2:	0018      	movs	r0, r3
 80007b4:	0011      	movs	r1, r2
 80007b6:	bce0      	pop	{r5, r6, r7}
 80007b8:	46ba      	mov	sl, r7
 80007ba:	46b1      	mov	r9, r6
 80007bc:	46a8      	mov	r8, r5
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d04b      	beq.n	800085c <__aeabi_dadd+0x1e0>
 80007c4:	464c      	mov	r4, r9
 80007c6:	1ba4      	subs	r4, r4, r6
 80007c8:	46a4      	mov	ip, r4
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_dadd+0x154>
 80007ce:	e123      	b.n	8000a18 <__aeabi_dadd+0x39c>
 80007d0:	0004      	movs	r4, r0
 80007d2:	431c      	orrs	r4, r3
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dadd+0x15c>
 80007d6:	e1af      	b.n	8000b38 <__aeabi_dadd+0x4bc>
 80007d8:	4662      	mov	r2, ip
 80007da:	1e54      	subs	r4, r2, #1
 80007dc:	2a01      	cmp	r2, #1
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x166>
 80007e0:	e215      	b.n	8000c0e <__aeabi_dadd+0x592>
 80007e2:	4d80      	ldr	r5, [pc, #512]	; (80009e4 <__aeabi_dadd+0x368>)
 80007e4:	45ac      	cmp	ip, r5
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x16e>
 80007e8:	e1c8      	b.n	8000b7c <__aeabi_dadd+0x500>
 80007ea:	46a4      	mov	ip, r4
 80007ec:	e11b      	b.n	8000a26 <__aeabi_dadd+0x3aa>
 80007ee:	464a      	mov	r2, r9
 80007f0:	1ab2      	subs	r2, r6, r2
 80007f2:	4694      	mov	ip, r2
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	dc00      	bgt.n	80007fa <__aeabi_dadd+0x17e>
 80007f8:	e0ac      	b.n	8000954 <__aeabi_dadd+0x2d8>
 80007fa:	464a      	mov	r2, r9
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d043      	beq.n	8000888 <__aeabi_dadd+0x20c>
 8000800:	4a78      	ldr	r2, [pc, #480]	; (80009e4 <__aeabi_dadd+0x368>)
 8000802:	4296      	cmp	r6, r2
 8000804:	d100      	bne.n	8000808 <__aeabi_dadd+0x18c>
 8000806:	e1af      	b.n	8000b68 <__aeabi_dadd+0x4ec>
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	003c      	movs	r4, r7
 800080c:	0412      	lsls	r2, r2, #16
 800080e:	4314      	orrs	r4, r2
 8000810:	46a0      	mov	r8, r4
 8000812:	4662      	mov	r2, ip
 8000814:	2a38      	cmp	r2, #56	; 0x38
 8000816:	dc67      	bgt.n	80008e8 <__aeabi_dadd+0x26c>
 8000818:	2a1f      	cmp	r2, #31
 800081a:	dc00      	bgt.n	800081e <__aeabi_dadd+0x1a2>
 800081c:	e15f      	b.n	8000ade <__aeabi_dadd+0x462>
 800081e:	4647      	mov	r7, r8
 8000820:	3a20      	subs	r2, #32
 8000822:	40d7      	lsrs	r7, r2
 8000824:	4662      	mov	r2, ip
 8000826:	2a20      	cmp	r2, #32
 8000828:	d005      	beq.n	8000836 <__aeabi_dadd+0x1ba>
 800082a:	4664      	mov	r4, ip
 800082c:	2240      	movs	r2, #64	; 0x40
 800082e:	1b12      	subs	r2, r2, r4
 8000830:	4644      	mov	r4, r8
 8000832:	4094      	lsls	r4, r2
 8000834:	4321      	orrs	r1, r4
 8000836:	1e4a      	subs	r2, r1, #1
 8000838:	4191      	sbcs	r1, r2
 800083a:	000c      	movs	r4, r1
 800083c:	433c      	orrs	r4, r7
 800083e:	e057      	b.n	80008f0 <__aeabi_dadd+0x274>
 8000840:	003a      	movs	r2, r7
 8000842:	430a      	orrs	r2, r1
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x1cc>
 8000846:	e105      	b.n	8000a54 <__aeabi_dadd+0x3d8>
 8000848:	0022      	movs	r2, r4
 800084a:	3a01      	subs	r2, #1
 800084c:	2c01      	cmp	r4, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x1d6>
 8000850:	e182      	b.n	8000b58 <__aeabi_dadd+0x4dc>
 8000852:	4c64      	ldr	r4, [pc, #400]	; (80009e4 <__aeabi_dadd+0x368>)
 8000854:	45a4      	cmp	ip, r4
 8000856:	d05b      	beq.n	8000910 <__aeabi_dadd+0x294>
 8000858:	4694      	mov	ip, r2
 800085a:	e741      	b.n	80006e0 <__aeabi_dadd+0x64>
 800085c:	4c63      	ldr	r4, [pc, #396]	; (80009ec <__aeabi_dadd+0x370>)
 800085e:	1c77      	adds	r7, r6, #1
 8000860:	4227      	tst	r7, r4
 8000862:	d000      	beq.n	8000866 <__aeabi_dadd+0x1ea>
 8000864:	e0c4      	b.n	80009f0 <__aeabi_dadd+0x374>
 8000866:	0004      	movs	r4, r0
 8000868:	431c      	orrs	r4, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d000      	beq.n	8000870 <__aeabi_dadd+0x1f4>
 800086e:	e169      	b.n	8000b44 <__aeabi_dadd+0x4c8>
 8000870:	2c00      	cmp	r4, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x1fa>
 8000874:	e1bf      	b.n	8000bf6 <__aeabi_dadd+0x57a>
 8000876:	4644      	mov	r4, r8
 8000878:	430c      	orrs	r4, r1
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x202>
 800087c:	e1d0      	b.n	8000c20 <__aeabi_dadd+0x5a4>
 800087e:	0742      	lsls	r2, r0, #29
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	4313      	orrs	r3, r2
 8000884:	08c0      	lsrs	r0, r0, #3
 8000886:	e029      	b.n	80008dc <__aeabi_dadd+0x260>
 8000888:	003a      	movs	r2, r7
 800088a:	430a      	orrs	r2, r1
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x214>
 800088e:	e170      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 8000890:	4662      	mov	r2, ip
 8000892:	4664      	mov	r4, ip
 8000894:	3a01      	subs	r2, #1
 8000896:	2c01      	cmp	r4, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x220>
 800089a:	e0e0      	b.n	8000a5e <__aeabi_dadd+0x3e2>
 800089c:	4c51      	ldr	r4, [pc, #324]	; (80009e4 <__aeabi_dadd+0x368>)
 800089e:	45a4      	cmp	ip, r4
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e161      	b.n	8000b68 <__aeabi_dadd+0x4ec>
 80008a4:	4694      	mov	ip, r2
 80008a6:	e7b4      	b.n	8000812 <__aeabi_dadd+0x196>
 80008a8:	003a      	movs	r2, r7
 80008aa:	391f      	subs	r1, #31
 80008ac:	40ca      	lsrs	r2, r1
 80008ae:	0011      	movs	r1, r2
 80008b0:	2b20      	cmp	r3, #32
 80008b2:	d003      	beq.n	80008bc <__aeabi_dadd+0x240>
 80008b4:	2240      	movs	r2, #64	; 0x40
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	409f      	lsls	r7, r3
 80008ba:	433c      	orrs	r4, r7
 80008bc:	1e63      	subs	r3, r4, #1
 80008be:	419c      	sbcs	r4, r3
 80008c0:	2700      	movs	r7, #0
 80008c2:	2600      	movs	r6, #0
 80008c4:	430c      	orrs	r4, r1
 80008c6:	0763      	lsls	r3, r4, #29
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x250>
 80008ca:	e753      	b.n	8000774 <__aeabi_dadd+0xf8>
 80008cc:	46b4      	mov	ip, r6
 80008ce:	08e4      	lsrs	r4, r4, #3
 80008d0:	077b      	lsls	r3, r7, #29
 80008d2:	4323      	orrs	r3, r4
 80008d4:	08f8      	lsrs	r0, r7, #3
 80008d6:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <__aeabi_dadd+0x368>)
 80008d8:	4594      	cmp	ip, r2
 80008da:	d01d      	beq.n	8000918 <__aeabi_dadd+0x29c>
 80008dc:	4662      	mov	r2, ip
 80008de:	0307      	lsls	r7, r0, #12
 80008e0:	0552      	lsls	r2, r2, #21
 80008e2:	0b3f      	lsrs	r7, r7, #12
 80008e4:	0d52      	lsrs	r2, r2, #21
 80008e6:	e760      	b.n	80007aa <__aeabi_dadd+0x12e>
 80008e8:	4644      	mov	r4, r8
 80008ea:	430c      	orrs	r4, r1
 80008ec:	1e62      	subs	r2, r4, #1
 80008ee:	4194      	sbcs	r4, r2
 80008f0:	18e4      	adds	r4, r4, r3
 80008f2:	429c      	cmp	r4, r3
 80008f4:	419b      	sbcs	r3, r3
 80008f6:	425f      	negs	r7, r3
 80008f8:	183f      	adds	r7, r7, r0
 80008fa:	023b      	lsls	r3, r7, #8
 80008fc:	d5e3      	bpl.n	80008c6 <__aeabi_dadd+0x24a>
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <__aeabi_dadd+0x368>)
 8000900:	3601      	adds	r6, #1
 8000902:	429e      	cmp	r6, r3
 8000904:	d000      	beq.n	8000908 <__aeabi_dadd+0x28c>
 8000906:	e0b5      	b.n	8000a74 <__aeabi_dadd+0x3f8>
 8000908:	0032      	movs	r2, r6
 800090a:	2700      	movs	r7, #0
 800090c:	2300      	movs	r3, #0
 800090e:	e74c      	b.n	80007aa <__aeabi_dadd+0x12e>
 8000910:	0742      	lsls	r2, r0, #29
 8000912:	08db      	lsrs	r3, r3, #3
 8000914:	4313      	orrs	r3, r2
 8000916:	08c0      	lsrs	r0, r0, #3
 8000918:	001a      	movs	r2, r3
 800091a:	4302      	orrs	r2, r0
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x2a4>
 800091e:	e1e1      	b.n	8000ce4 <__aeabi_dadd+0x668>
 8000920:	2780      	movs	r7, #128	; 0x80
 8000922:	033f      	lsls	r7, r7, #12
 8000924:	4307      	orrs	r7, r0
 8000926:	033f      	lsls	r7, r7, #12
 8000928:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <__aeabi_dadd+0x368>)
 800092a:	0b3f      	lsrs	r7, r7, #12
 800092c:	e73d      	b.n	80007aa <__aeabi_dadd+0x12e>
 800092e:	0020      	movs	r0, r4
 8000930:	f001 fc8a 	bl	8002248 <__clzsi2>
 8000934:	0001      	movs	r1, r0
 8000936:	3118      	adds	r1, #24
 8000938:	291f      	cmp	r1, #31
 800093a:	dc00      	bgt.n	800093e <__aeabi_dadd+0x2c2>
 800093c:	e6fc      	b.n	8000738 <__aeabi_dadd+0xbc>
 800093e:	3808      	subs	r0, #8
 8000940:	4084      	lsls	r4, r0
 8000942:	0027      	movs	r7, r4
 8000944:	2400      	movs	r4, #0
 8000946:	42b1      	cmp	r1, r6
 8000948:	db00      	blt.n	800094c <__aeabi_dadd+0x2d0>
 800094a:	e6ff      	b.n	800074c <__aeabi_dadd+0xd0>
 800094c:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <__aeabi_dadd+0x36c>)
 800094e:	1a76      	subs	r6, r6, r1
 8000950:	4017      	ands	r7, r2
 8000952:	e70d      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d02f      	beq.n	80009b8 <__aeabi_dadd+0x33c>
 8000958:	464a      	mov	r2, r9
 800095a:	1b92      	subs	r2, r2, r6
 800095c:	4694      	mov	ip, r2
 800095e:	2e00      	cmp	r6, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_dadd+0x2e8>
 8000962:	e0ad      	b.n	8000ac0 <__aeabi_dadd+0x444>
 8000964:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <__aeabi_dadd+0x368>)
 8000966:	4591      	cmp	r9, r2
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x2f0>
 800096a:	e10f      	b.n	8000b8c <__aeabi_dadd+0x510>
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0412      	lsls	r2, r2, #16
 8000970:	4310      	orrs	r0, r2
 8000972:	4662      	mov	r2, ip
 8000974:	2a38      	cmp	r2, #56	; 0x38
 8000976:	dd00      	ble.n	800097a <__aeabi_dadd+0x2fe>
 8000978:	e10f      	b.n	8000b9a <__aeabi_dadd+0x51e>
 800097a:	2a1f      	cmp	r2, #31
 800097c:	dd00      	ble.n	8000980 <__aeabi_dadd+0x304>
 800097e:	e180      	b.n	8000c82 <__aeabi_dadd+0x606>
 8000980:	4664      	mov	r4, ip
 8000982:	2220      	movs	r2, #32
 8000984:	001e      	movs	r6, r3
 8000986:	1b12      	subs	r2, r2, r4
 8000988:	4667      	mov	r7, ip
 800098a:	0004      	movs	r4, r0
 800098c:	4093      	lsls	r3, r2
 800098e:	4094      	lsls	r4, r2
 8000990:	40fe      	lsrs	r6, r7
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	4193      	sbcs	r3, r2
 8000996:	40f8      	lsrs	r0, r7
 8000998:	4334      	orrs	r4, r6
 800099a:	431c      	orrs	r4, r3
 800099c:	4480      	add	r8, r0
 800099e:	1864      	adds	r4, r4, r1
 80009a0:	428c      	cmp	r4, r1
 80009a2:	41bf      	sbcs	r7, r7
 80009a4:	427f      	negs	r7, r7
 80009a6:	464e      	mov	r6, r9
 80009a8:	4447      	add	r7, r8
 80009aa:	e7a6      	b.n	80008fa <__aeabi_dadd+0x27e>
 80009ac:	4642      	mov	r2, r8
 80009ae:	430a      	orrs	r2, r1
 80009b0:	0011      	movs	r1, r2
 80009b2:	1e4a      	subs	r2, r1, #1
 80009b4:	4191      	sbcs	r1, r2
 80009b6:	e6ad      	b.n	8000714 <__aeabi_dadd+0x98>
 80009b8:	4c0c      	ldr	r4, [pc, #48]	; (80009ec <__aeabi_dadd+0x370>)
 80009ba:	1c72      	adds	r2, r6, #1
 80009bc:	4222      	tst	r2, r4
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x346>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_dadd+0x48a>
 80009c2:	0002      	movs	r2, r0
 80009c4:	431a      	orrs	r2, r3
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_dadd+0x350>
 80009ca:	e0fa      	b.n	8000bc2 <__aeabi_dadd+0x546>
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dadd+0x356>
 80009d0:	e145      	b.n	8000c5e <__aeabi_dadd+0x5e2>
 80009d2:	003a      	movs	r2, r7
 80009d4:	430a      	orrs	r2, r1
 80009d6:	d000      	beq.n	80009da <__aeabi_dadd+0x35e>
 80009d8:	e146      	b.n	8000c68 <__aeabi_dadd+0x5ec>
 80009da:	0742      	lsls	r2, r0, #29
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	4313      	orrs	r3, r2
 80009e0:	08c0      	lsrs	r0, r0, #3
 80009e2:	e77b      	b.n	80008dc <__aeabi_dadd+0x260>
 80009e4:	000007ff 	.word	0x000007ff
 80009e8:	ff7fffff 	.word	0xff7fffff
 80009ec:	000007fe 	.word	0x000007fe
 80009f0:	4647      	mov	r7, r8
 80009f2:	1a5c      	subs	r4, r3, r1
 80009f4:	1bc2      	subs	r2, r0, r7
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	41bf      	sbcs	r7, r7
 80009fa:	427f      	negs	r7, r7
 80009fc:	46b9      	mov	r9, r7
 80009fe:	0017      	movs	r7, r2
 8000a00:	464a      	mov	r2, r9
 8000a02:	1abf      	subs	r7, r7, r2
 8000a04:	023a      	lsls	r2, r7, #8
 8000a06:	d500      	bpl.n	8000a0a <__aeabi_dadd+0x38e>
 8000a08:	e08d      	b.n	8000b26 <__aeabi_dadd+0x4aa>
 8000a0a:	0023      	movs	r3, r4
 8000a0c:	433b      	orrs	r3, r7
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_dadd+0x396>
 8000a10:	e68a      	b.n	8000728 <__aeabi_dadd+0xac>
 8000a12:	2000      	movs	r0, #0
 8000a14:	2500      	movs	r5, #0
 8000a16:	e761      	b.n	80008dc <__aeabi_dadd+0x260>
 8000a18:	4cb4      	ldr	r4, [pc, #720]	; (8000cec <__aeabi_dadd+0x670>)
 8000a1a:	45a1      	cmp	r9, r4
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dadd+0x3a4>
 8000a1e:	e0ad      	b.n	8000b7c <__aeabi_dadd+0x500>
 8000a20:	2480      	movs	r4, #128	; 0x80
 8000a22:	0424      	lsls	r4, r4, #16
 8000a24:	4320      	orrs	r0, r4
 8000a26:	4664      	mov	r4, ip
 8000a28:	2c38      	cmp	r4, #56	; 0x38
 8000a2a:	dc3d      	bgt.n	8000aa8 <__aeabi_dadd+0x42c>
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	2c1f      	cmp	r4, #31
 8000a30:	dd00      	ble.n	8000a34 <__aeabi_dadd+0x3b8>
 8000a32:	e0b7      	b.n	8000ba4 <__aeabi_dadd+0x528>
 8000a34:	2520      	movs	r5, #32
 8000a36:	001e      	movs	r6, r3
 8000a38:	1b2d      	subs	r5, r5, r4
 8000a3a:	0004      	movs	r4, r0
 8000a3c:	40ab      	lsls	r3, r5
 8000a3e:	40ac      	lsls	r4, r5
 8000a40:	40d6      	lsrs	r6, r2
 8000a42:	40d0      	lsrs	r0, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	1e5d      	subs	r5, r3, #1
 8000a48:	41ab      	sbcs	r3, r5
 8000a4a:	4334      	orrs	r4, r6
 8000a4c:	1a12      	subs	r2, r2, r0
 8000a4e:	4690      	mov	r8, r2
 8000a50:	4323      	orrs	r3, r4
 8000a52:	e02c      	b.n	8000aae <__aeabi_dadd+0x432>
 8000a54:	0742      	lsls	r2, r0, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c0      	lsrs	r0, r0, #3
 8000a5c:	e73b      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000a5e:	185c      	adds	r4, r3, r1
 8000a60:	429c      	cmp	r4, r3
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4440      	add	r0, r8
 8000a66:	425b      	negs	r3, r3
 8000a68:	18c7      	adds	r7, r0, r3
 8000a6a:	2601      	movs	r6, #1
 8000a6c:	023b      	lsls	r3, r7, #8
 8000a6e:	d400      	bmi.n	8000a72 <__aeabi_dadd+0x3f6>
 8000a70:	e729      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000a72:	2602      	movs	r6, #2
 8000a74:	4a9e      	ldr	r2, [pc, #632]	; (8000cf0 <__aeabi_dadd+0x674>)
 8000a76:	0863      	lsrs	r3, r4, #1
 8000a78:	4017      	ands	r7, r2
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4014      	ands	r4, r2
 8000a7e:	431c      	orrs	r4, r3
 8000a80:	07fb      	lsls	r3, r7, #31
 8000a82:	431c      	orrs	r4, r3
 8000a84:	087f      	lsrs	r7, r7, #1
 8000a86:	e673      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000a88:	4644      	mov	r4, r8
 8000a8a:	3a20      	subs	r2, #32
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	4662      	mov	r2, ip
 8000a90:	2a20      	cmp	r2, #32
 8000a92:	d005      	beq.n	8000aa0 <__aeabi_dadd+0x424>
 8000a94:	4667      	mov	r7, ip
 8000a96:	2240      	movs	r2, #64	; 0x40
 8000a98:	1bd2      	subs	r2, r2, r7
 8000a9a:	4647      	mov	r7, r8
 8000a9c:	4097      	lsls	r7, r2
 8000a9e:	4339      	orrs	r1, r7
 8000aa0:	1e4a      	subs	r2, r1, #1
 8000aa2:	4191      	sbcs	r1, r2
 8000aa4:	4321      	orrs	r1, r4
 8000aa6:	e635      	b.n	8000714 <__aeabi_dadd+0x98>
 8000aa8:	4303      	orrs	r3, r0
 8000aaa:	1e58      	subs	r0, r3, #1
 8000aac:	4183      	sbcs	r3, r0
 8000aae:	1acc      	subs	r4, r1, r3
 8000ab0:	42a1      	cmp	r1, r4
 8000ab2:	41bf      	sbcs	r7, r7
 8000ab4:	4643      	mov	r3, r8
 8000ab6:	427f      	negs	r7, r7
 8000ab8:	4655      	mov	r5, sl
 8000aba:	464e      	mov	r6, r9
 8000abc:	1bdf      	subs	r7, r3, r7
 8000abe:	e62e      	b.n	800071e <__aeabi_dadd+0xa2>
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dadd+0x44c>
 8000ac6:	e0bd      	b.n	8000c44 <__aeabi_dadd+0x5c8>
 8000ac8:	4662      	mov	r2, ip
 8000aca:	4664      	mov	r4, ip
 8000acc:	3a01      	subs	r2, #1
 8000ace:	2c01      	cmp	r4, #1
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x458>
 8000ad2:	e0e5      	b.n	8000ca0 <__aeabi_dadd+0x624>
 8000ad4:	4c85      	ldr	r4, [pc, #532]	; (8000cec <__aeabi_dadd+0x670>)
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d058      	beq.n	8000b8c <__aeabi_dadd+0x510>
 8000ada:	4694      	mov	ip, r2
 8000adc:	e749      	b.n	8000972 <__aeabi_dadd+0x2f6>
 8000ade:	4664      	mov	r4, ip
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	1b12      	subs	r2, r2, r4
 8000ae4:	4644      	mov	r4, r8
 8000ae6:	4094      	lsls	r4, r2
 8000ae8:	000f      	movs	r7, r1
 8000aea:	46a1      	mov	r9, r4
 8000aec:	4664      	mov	r4, ip
 8000aee:	4091      	lsls	r1, r2
 8000af0:	40e7      	lsrs	r7, r4
 8000af2:	464c      	mov	r4, r9
 8000af4:	1e4a      	subs	r2, r1, #1
 8000af6:	4191      	sbcs	r1, r2
 8000af8:	433c      	orrs	r4, r7
 8000afa:	4642      	mov	r2, r8
 8000afc:	430c      	orrs	r4, r1
 8000afe:	4661      	mov	r1, ip
 8000b00:	40ca      	lsrs	r2, r1
 8000b02:	1880      	adds	r0, r0, r2
 8000b04:	e6f4      	b.n	80008f0 <__aeabi_dadd+0x274>
 8000b06:	4c79      	ldr	r4, [pc, #484]	; (8000cec <__aeabi_dadd+0x670>)
 8000b08:	42a2      	cmp	r2, r4
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x492>
 8000b0c:	e6fd      	b.n	800090a <__aeabi_dadd+0x28e>
 8000b0e:	1859      	adds	r1, r3, r1
 8000b10:	4299      	cmp	r1, r3
 8000b12:	419b      	sbcs	r3, r3
 8000b14:	4440      	add	r0, r8
 8000b16:	425f      	negs	r7, r3
 8000b18:	19c7      	adds	r7, r0, r7
 8000b1a:	07fc      	lsls	r4, r7, #31
 8000b1c:	0849      	lsrs	r1, r1, #1
 8000b1e:	0016      	movs	r6, r2
 8000b20:	430c      	orrs	r4, r1
 8000b22:	087f      	lsrs	r7, r7, #1
 8000b24:	e6cf      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b26:	1acc      	subs	r4, r1, r3
 8000b28:	42a1      	cmp	r1, r4
 8000b2a:	41bf      	sbcs	r7, r7
 8000b2c:	4643      	mov	r3, r8
 8000b2e:	427f      	negs	r7, r7
 8000b30:	1a18      	subs	r0, r3, r0
 8000b32:	4655      	mov	r5, sl
 8000b34:	1bc7      	subs	r7, r0, r7
 8000b36:	e5f7      	b.n	8000728 <__aeabi_dadd+0xac>
 8000b38:	08c9      	lsrs	r1, r1, #3
 8000b3a:	077b      	lsls	r3, r7, #29
 8000b3c:	4655      	mov	r5, sl
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	08f8      	lsrs	r0, r7, #3
 8000b42:	e6c8      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000b44:	2c00      	cmp	r4, #0
 8000b46:	d000      	beq.n	8000b4a <__aeabi_dadd+0x4ce>
 8000b48:	e081      	b.n	8000c4e <__aeabi_dadd+0x5d2>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	d115      	bne.n	8000b7c <__aeabi_dadd+0x500>
 8000b50:	2080      	movs	r0, #128	; 0x80
 8000b52:	2500      	movs	r5, #0
 8000b54:	0300      	lsls	r0, r0, #12
 8000b56:	e6e3      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000b58:	1a5c      	subs	r4, r3, r1
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	419b      	sbcs	r3, r3
 8000b5e:	1bc7      	subs	r7, r0, r7
 8000b60:	425b      	negs	r3, r3
 8000b62:	2601      	movs	r6, #1
 8000b64:	1aff      	subs	r7, r7, r3
 8000b66:	e5da      	b.n	800071e <__aeabi_dadd+0xa2>
 8000b68:	0742      	lsls	r2, r0, #29
 8000b6a:	08db      	lsrs	r3, r3, #3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	08c0      	lsrs	r0, r0, #3
 8000b70:	e6d2      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b72:	0742      	lsls	r2, r0, #29
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	08c0      	lsrs	r0, r0, #3
 8000b7a:	e6ac      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000b7c:	4643      	mov	r3, r8
 8000b7e:	4642      	mov	r2, r8
 8000b80:	08c9      	lsrs	r1, r1, #3
 8000b82:	075b      	lsls	r3, r3, #29
 8000b84:	4655      	mov	r5, sl
 8000b86:	430b      	orrs	r3, r1
 8000b88:	08d0      	lsrs	r0, r2, #3
 8000b8a:	e6c5      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	4642      	mov	r2, r8
 8000b90:	075b      	lsls	r3, r3, #29
 8000b92:	08c9      	lsrs	r1, r1, #3
 8000b94:	430b      	orrs	r3, r1
 8000b96:	08d0      	lsrs	r0, r2, #3
 8000b98:	e6be      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b9a:	4303      	orrs	r3, r0
 8000b9c:	001c      	movs	r4, r3
 8000b9e:	1e63      	subs	r3, r4, #1
 8000ba0:	419c      	sbcs	r4, r3
 8000ba2:	e6fc      	b.n	800099e <__aeabi_dadd+0x322>
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	3c20      	subs	r4, #32
 8000ba8:	40e2      	lsrs	r2, r4
 8000baa:	0014      	movs	r4, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	2a20      	cmp	r2, #32
 8000bb0:	d003      	beq.n	8000bba <__aeabi_dadd+0x53e>
 8000bb2:	2540      	movs	r5, #64	; 0x40
 8000bb4:	1aad      	subs	r5, r5, r2
 8000bb6:	40a8      	lsls	r0, r5
 8000bb8:	4303      	orrs	r3, r0
 8000bba:	1e58      	subs	r0, r3, #1
 8000bbc:	4183      	sbcs	r3, r0
 8000bbe:	4323      	orrs	r3, r4
 8000bc0:	e775      	b.n	8000aae <__aeabi_dadd+0x432>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d0e2      	beq.n	8000b8c <__aeabi_dadd+0x510>
 8000bc6:	003a      	movs	r2, r7
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	d0cd      	beq.n	8000b68 <__aeabi_dadd+0x4ec>
 8000bcc:	0742      	lsls	r2, r0, #29
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	08c0      	lsrs	r0, r0, #3
 8000bd6:	0312      	lsls	r2, r2, #12
 8000bd8:	4210      	tst	r0, r2
 8000bda:	d006      	beq.n	8000bea <__aeabi_dadd+0x56e>
 8000bdc:	08fc      	lsrs	r4, r7, #3
 8000bde:	4214      	tst	r4, r2
 8000be0:	d103      	bne.n	8000bea <__aeabi_dadd+0x56e>
 8000be2:	0020      	movs	r0, r4
 8000be4:	08cb      	lsrs	r3, r1, #3
 8000be6:	077a      	lsls	r2, r7, #29
 8000be8:	4313      	orrs	r3, r2
 8000bea:	0f5a      	lsrs	r2, r3, #29
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	0752      	lsls	r2, r2, #29
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	e690      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x582>
 8000bfc:	e709      	b.n	8000a12 <__aeabi_dadd+0x396>
 8000bfe:	4643      	mov	r3, r8
 8000c00:	4642      	mov	r2, r8
 8000c02:	08c9      	lsrs	r1, r1, #3
 8000c04:	075b      	lsls	r3, r3, #29
 8000c06:	4655      	mov	r5, sl
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	08d0      	lsrs	r0, r2, #3
 8000c0c:	e666      	b.n	80008dc <__aeabi_dadd+0x260>
 8000c0e:	1acc      	subs	r4, r1, r3
 8000c10:	42a1      	cmp	r1, r4
 8000c12:	4189      	sbcs	r1, r1
 8000c14:	1a3f      	subs	r7, r7, r0
 8000c16:	4249      	negs	r1, r1
 8000c18:	4655      	mov	r5, sl
 8000c1a:	2601      	movs	r6, #1
 8000c1c:	1a7f      	subs	r7, r7, r1
 8000c1e:	e57e      	b.n	800071e <__aeabi_dadd+0xa2>
 8000c20:	4642      	mov	r2, r8
 8000c22:	1a5c      	subs	r4, r3, r1
 8000c24:	1a87      	subs	r7, r0, r2
 8000c26:	42a3      	cmp	r3, r4
 8000c28:	4192      	sbcs	r2, r2
 8000c2a:	4252      	negs	r2, r2
 8000c2c:	1abf      	subs	r7, r7, r2
 8000c2e:	023a      	lsls	r2, r7, #8
 8000c30:	d53d      	bpl.n	8000cae <__aeabi_dadd+0x632>
 8000c32:	1acc      	subs	r4, r1, r3
 8000c34:	42a1      	cmp	r1, r4
 8000c36:	4189      	sbcs	r1, r1
 8000c38:	4643      	mov	r3, r8
 8000c3a:	4249      	negs	r1, r1
 8000c3c:	1a1f      	subs	r7, r3, r0
 8000c3e:	4655      	mov	r5, sl
 8000c40:	1a7f      	subs	r7, r7, r1
 8000c42:	e595      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000c44:	077b      	lsls	r3, r7, #29
 8000c46:	08c9      	lsrs	r1, r1, #3
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	08f8      	lsrs	r0, r7, #3
 8000c4c:	e643      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000c4e:	4644      	mov	r4, r8
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	430c      	orrs	r4, r1
 8000c54:	d130      	bne.n	8000cb8 <__aeabi_dadd+0x63c>
 8000c56:	0742      	lsls	r2, r0, #29
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	08c0      	lsrs	r0, r0, #3
 8000c5c:	e65c      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000c5e:	077b      	lsls	r3, r7, #29
 8000c60:	08c9      	lsrs	r1, r1, #3
 8000c62:	430b      	orrs	r3, r1
 8000c64:	08f8      	lsrs	r0, r7, #3
 8000c66:	e639      	b.n	80008dc <__aeabi_dadd+0x260>
 8000c68:	185c      	adds	r4, r3, r1
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	419b      	sbcs	r3, r3
 8000c6e:	4440      	add	r0, r8
 8000c70:	425b      	negs	r3, r3
 8000c72:	18c7      	adds	r7, r0, r3
 8000c74:	023b      	lsls	r3, r7, #8
 8000c76:	d400      	bmi.n	8000c7a <__aeabi_dadd+0x5fe>
 8000c78:	e625      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <__aeabi_dadd+0x674>)
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	401f      	ands	r7, r3
 8000c80:	e621      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000c82:	0004      	movs	r4, r0
 8000c84:	3a20      	subs	r2, #32
 8000c86:	40d4      	lsrs	r4, r2
 8000c88:	4662      	mov	r2, ip
 8000c8a:	2a20      	cmp	r2, #32
 8000c8c:	d004      	beq.n	8000c98 <__aeabi_dadd+0x61c>
 8000c8e:	2240      	movs	r2, #64	; 0x40
 8000c90:	4666      	mov	r6, ip
 8000c92:	1b92      	subs	r2, r2, r6
 8000c94:	4090      	lsls	r0, r2
 8000c96:	4303      	orrs	r3, r0
 8000c98:	1e5a      	subs	r2, r3, #1
 8000c9a:	4193      	sbcs	r3, r2
 8000c9c:	431c      	orrs	r4, r3
 8000c9e:	e67e      	b.n	800099e <__aeabi_dadd+0x322>
 8000ca0:	185c      	adds	r4, r3, r1
 8000ca2:	428c      	cmp	r4, r1
 8000ca4:	4189      	sbcs	r1, r1
 8000ca6:	4440      	add	r0, r8
 8000ca8:	4249      	negs	r1, r1
 8000caa:	1847      	adds	r7, r0, r1
 8000cac:	e6dd      	b.n	8000a6a <__aeabi_dadd+0x3ee>
 8000cae:	0023      	movs	r3, r4
 8000cb0:	433b      	orrs	r3, r7
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x63a>
 8000cb4:	e6ad      	b.n	8000a12 <__aeabi_dadd+0x396>
 8000cb6:	e606      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cb8:	0744      	lsls	r4, r0, #29
 8000cba:	4323      	orrs	r3, r4
 8000cbc:	2480      	movs	r4, #128	; 0x80
 8000cbe:	08c0      	lsrs	r0, r0, #3
 8000cc0:	0324      	lsls	r4, r4, #12
 8000cc2:	4220      	tst	r0, r4
 8000cc4:	d008      	beq.n	8000cd8 <__aeabi_dadd+0x65c>
 8000cc6:	4642      	mov	r2, r8
 8000cc8:	08d6      	lsrs	r6, r2, #3
 8000cca:	4226      	tst	r6, r4
 8000ccc:	d104      	bne.n	8000cd8 <__aeabi_dadd+0x65c>
 8000cce:	4655      	mov	r5, sl
 8000cd0:	0030      	movs	r0, r6
 8000cd2:	08cb      	lsrs	r3, r1, #3
 8000cd4:	0751      	lsls	r1, r2, #29
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	0f5a      	lsrs	r2, r3, #29
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	0752      	lsls	r2, r2, #29
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	e619      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4a01      	ldr	r2, [pc, #4]	; (8000cec <__aeabi_dadd+0x670>)
 8000ce8:	001f      	movs	r7, r3
 8000cea:	e55e      	b.n	80007aa <__aeabi_dadd+0x12e>
 8000cec:	000007ff 	.word	0x000007ff
 8000cf0:	ff7fffff 	.word	0xff7fffff

08000cf4 <__aeabi_ddiv>:
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	4657      	mov	r7, sl
 8000cf8:	464e      	mov	r6, r9
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	46de      	mov	lr, fp
 8000cfe:	b5e0      	push	{r5, r6, r7, lr}
 8000d00:	4681      	mov	r9, r0
 8000d02:	0005      	movs	r5, r0
 8000d04:	030c      	lsls	r4, r1, #12
 8000d06:	0048      	lsls	r0, r1, #1
 8000d08:	4692      	mov	sl, r2
 8000d0a:	001f      	movs	r7, r3
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	0b24      	lsrs	r4, r4, #12
 8000d10:	0d40      	lsrs	r0, r0, #21
 8000d12:	0fce      	lsrs	r6, r1, #31
 8000d14:	2800      	cmp	r0, #0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_ddiv+0x26>
 8000d18:	e156      	b.n	8000fc8 <__aeabi_ddiv+0x2d4>
 8000d1a:	4bd4      	ldr	r3, [pc, #848]	; (800106c <__aeabi_ddiv+0x378>)
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_ddiv+0x2e>
 8000d20:	e172      	b.n	8001008 <__aeabi_ddiv+0x314>
 8000d22:	0f6b      	lsrs	r3, r5, #29
 8000d24:	00e4      	lsls	r4, r4, #3
 8000d26:	431c      	orrs	r4, r3
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	4323      	orrs	r3, r4
 8000d2e:	4698      	mov	r8, r3
 8000d30:	4bcf      	ldr	r3, [pc, #828]	; (8001070 <__aeabi_ddiv+0x37c>)
 8000d32:	00ed      	lsls	r5, r5, #3
 8000d34:	469b      	mov	fp, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	4699      	mov	r9, r3
 8000d3a:	4483      	add	fp, r0
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	033c      	lsls	r4, r7, #12
 8000d40:	007b      	lsls	r3, r7, #1
 8000d42:	4650      	mov	r0, sl
 8000d44:	0b24      	lsrs	r4, r4, #12
 8000d46:	0d5b      	lsrs	r3, r3, #21
 8000d48:	0fff      	lsrs	r7, r7, #31
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_ddiv+0x5c>
 8000d4e:	e11f      	b.n	8000f90 <__aeabi_ddiv+0x29c>
 8000d50:	4ac6      	ldr	r2, [pc, #792]	; (800106c <__aeabi_ddiv+0x378>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d100      	bne.n	8000d58 <__aeabi_ddiv+0x64>
 8000d56:	e162      	b.n	800101e <__aeabi_ddiv+0x32a>
 8000d58:	49c5      	ldr	r1, [pc, #788]	; (8001070 <__aeabi_ddiv+0x37c>)
 8000d5a:	0f42      	lsrs	r2, r0, #29
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	00e4      	lsls	r4, r4, #3
 8000d60:	4659      	mov	r1, fp
 8000d62:	4314      	orrs	r4, r2
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	4463      	add	r3, ip
 8000d68:	0412      	lsls	r2, r2, #16
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	4314      	orrs	r4, r2
 8000d6e:	469b      	mov	fp, r3
 8000d70:	00c2      	lsls	r2, r0, #3
 8000d72:	2000      	movs	r0, #0
 8000d74:	0033      	movs	r3, r6
 8000d76:	407b      	eors	r3, r7
 8000d78:	469a      	mov	sl, r3
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d827      	bhi.n	8000dd0 <__aeabi_ddiv+0xdc>
 8000d80:	49bc      	ldr	r1, [pc, #752]	; (8001074 <__aeabi_ddiv+0x380>)
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	58cb      	ldr	r3, [r1, r3]
 8000d86:	469f      	mov	pc, r3
 8000d88:	46b2      	mov	sl, r6
 8000d8a:	9b00      	ldr	r3, [sp, #0]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d016      	beq.n	8000dbe <__aeabi_ddiv+0xca>
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d100      	bne.n	8000d96 <__aeabi_ddiv+0xa2>
 8000d94:	e28e      	b.n	80012b4 <__aeabi_ddiv+0x5c0>
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d000      	beq.n	8000d9c <__aeabi_ddiv+0xa8>
 8000d9a:	e0d9      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	2400      	movs	r4, #0
 8000da0:	2500      	movs	r5, #0
 8000da2:	4652      	mov	r2, sl
 8000da4:	051b      	lsls	r3, r3, #20
 8000da6:	4323      	orrs	r3, r4
 8000da8:	07d2      	lsls	r2, r2, #31
 8000daa:	4313      	orrs	r3, r2
 8000dac:	0028      	movs	r0, r5
 8000dae:	0019      	movs	r1, r3
 8000db0:	b005      	add	sp, #20
 8000db2:	bcf0      	pop	{r4, r5, r6, r7}
 8000db4:	46bb      	mov	fp, r7
 8000db6:	46b2      	mov	sl, r6
 8000db8:	46a9      	mov	r9, r5
 8000dba:	46a0      	mov	r8, r4
 8000dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	2500      	movs	r5, #0
 8000dc2:	4baa      	ldr	r3, [pc, #680]	; (800106c <__aeabi_ddiv+0x378>)
 8000dc4:	e7ed      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8000dc6:	46ba      	mov	sl, r7
 8000dc8:	46a0      	mov	r8, r4
 8000dca:	0015      	movs	r5, r2
 8000dcc:	9000      	str	r0, [sp, #0]
 8000dce:	e7dc      	b.n	8000d8a <__aeabi_ddiv+0x96>
 8000dd0:	4544      	cmp	r4, r8
 8000dd2:	d200      	bcs.n	8000dd6 <__aeabi_ddiv+0xe2>
 8000dd4:	e1c7      	b.n	8001166 <__aeabi_ddiv+0x472>
 8000dd6:	d100      	bne.n	8000dda <__aeabi_ddiv+0xe6>
 8000dd8:	e1c2      	b.n	8001160 <__aeabi_ddiv+0x46c>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	425b      	negs	r3, r3
 8000dde:	469c      	mov	ip, r3
 8000de0:	002e      	movs	r6, r5
 8000de2:	4640      	mov	r0, r8
 8000de4:	2500      	movs	r5, #0
 8000de6:	44e3      	add	fp, ip
 8000de8:	0223      	lsls	r3, r4, #8
 8000dea:	0e14      	lsrs	r4, r2, #24
 8000dec:	431c      	orrs	r4, r3
 8000dee:	0c1b      	lsrs	r3, r3, #16
 8000df0:	4699      	mov	r9, r3
 8000df2:	0423      	lsls	r3, r4, #16
 8000df4:	0c1f      	lsrs	r7, r3, #16
 8000df6:	0212      	lsls	r2, r2, #8
 8000df8:	4649      	mov	r1, r9
 8000dfa:	9200      	str	r2, [sp, #0]
 8000dfc:	9701      	str	r7, [sp, #4]
 8000dfe:	f7ff fa23 	bl	8000248 <__aeabi_uidivmod>
 8000e02:	0002      	movs	r2, r0
 8000e04:	437a      	muls	r2, r7
 8000e06:	040b      	lsls	r3, r1, #16
 8000e08:	0c31      	lsrs	r1, r6, #16
 8000e0a:	4680      	mov	r8, r0
 8000e0c:	4319      	orrs	r1, r3
 8000e0e:	428a      	cmp	r2, r1
 8000e10:	d907      	bls.n	8000e22 <__aeabi_ddiv+0x12e>
 8000e12:	2301      	movs	r3, #1
 8000e14:	425b      	negs	r3, r3
 8000e16:	469c      	mov	ip, r3
 8000e18:	1909      	adds	r1, r1, r4
 8000e1a:	44e0      	add	r8, ip
 8000e1c:	428c      	cmp	r4, r1
 8000e1e:	d800      	bhi.n	8000e22 <__aeabi_ddiv+0x12e>
 8000e20:	e207      	b.n	8001232 <__aeabi_ddiv+0x53e>
 8000e22:	1a88      	subs	r0, r1, r2
 8000e24:	4649      	mov	r1, r9
 8000e26:	f7ff fa0f 	bl	8000248 <__aeabi_uidivmod>
 8000e2a:	0409      	lsls	r1, r1, #16
 8000e2c:	468c      	mov	ip, r1
 8000e2e:	0431      	lsls	r1, r6, #16
 8000e30:	4666      	mov	r6, ip
 8000e32:	9a01      	ldr	r2, [sp, #4]
 8000e34:	0c09      	lsrs	r1, r1, #16
 8000e36:	4342      	muls	r2, r0
 8000e38:	0003      	movs	r3, r0
 8000e3a:	4331      	orrs	r1, r6
 8000e3c:	428a      	cmp	r2, r1
 8000e3e:	d904      	bls.n	8000e4a <__aeabi_ddiv+0x156>
 8000e40:	1909      	adds	r1, r1, r4
 8000e42:	3b01      	subs	r3, #1
 8000e44:	428c      	cmp	r4, r1
 8000e46:	d800      	bhi.n	8000e4a <__aeabi_ddiv+0x156>
 8000e48:	e1ed      	b.n	8001226 <__aeabi_ddiv+0x532>
 8000e4a:	1a88      	subs	r0, r1, r2
 8000e4c:	4642      	mov	r2, r8
 8000e4e:	0412      	lsls	r2, r2, #16
 8000e50:	431a      	orrs	r2, r3
 8000e52:	4690      	mov	r8, r2
 8000e54:	4641      	mov	r1, r8
 8000e56:	9b00      	ldr	r3, [sp, #0]
 8000e58:	040e      	lsls	r6, r1, #16
 8000e5a:	0c1b      	lsrs	r3, r3, #16
 8000e5c:	001f      	movs	r7, r3
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	9b00      	ldr	r3, [sp, #0]
 8000e62:	0c36      	lsrs	r6, r6, #16
 8000e64:	041b      	lsls	r3, r3, #16
 8000e66:	0c19      	lsrs	r1, r3, #16
 8000e68:	000b      	movs	r3, r1
 8000e6a:	4373      	muls	r3, r6
 8000e6c:	0c12      	lsrs	r2, r2, #16
 8000e6e:	437e      	muls	r6, r7
 8000e70:	9103      	str	r1, [sp, #12]
 8000e72:	4351      	muls	r1, r2
 8000e74:	437a      	muls	r2, r7
 8000e76:	0c1f      	lsrs	r7, r3, #16
 8000e78:	46bc      	mov	ip, r7
 8000e7a:	1876      	adds	r6, r6, r1
 8000e7c:	4466      	add	r6, ip
 8000e7e:	42b1      	cmp	r1, r6
 8000e80:	d903      	bls.n	8000e8a <__aeabi_ddiv+0x196>
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0249      	lsls	r1, r1, #9
 8000e86:	468c      	mov	ip, r1
 8000e88:	4462      	add	r2, ip
 8000e8a:	0c31      	lsrs	r1, r6, #16
 8000e8c:	188a      	adds	r2, r1, r2
 8000e8e:	0431      	lsls	r1, r6, #16
 8000e90:	041e      	lsls	r6, r3, #16
 8000e92:	0c36      	lsrs	r6, r6, #16
 8000e94:	198e      	adds	r6, r1, r6
 8000e96:	4290      	cmp	r0, r2
 8000e98:	d302      	bcc.n	8000ea0 <__aeabi_ddiv+0x1ac>
 8000e9a:	d112      	bne.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8000e9c:	42b5      	cmp	r5, r6
 8000e9e:	d210      	bcs.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	1e59      	subs	r1, r3, #1
 8000ea4:	9b00      	ldr	r3, [sp, #0]
 8000ea6:	469c      	mov	ip, r3
 8000ea8:	4465      	add	r5, ip
 8000eaa:	001f      	movs	r7, r3
 8000eac:	429d      	cmp	r5, r3
 8000eae:	419b      	sbcs	r3, r3
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	191b      	adds	r3, r3, r4
 8000eb4:	18c0      	adds	r0, r0, r3
 8000eb6:	4284      	cmp	r4, r0
 8000eb8:	d200      	bcs.n	8000ebc <__aeabi_ddiv+0x1c8>
 8000eba:	e1a0      	b.n	80011fe <__aeabi_ddiv+0x50a>
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_ddiv+0x1cc>
 8000ebe:	e19b      	b.n	80011f8 <__aeabi_ddiv+0x504>
 8000ec0:	4688      	mov	r8, r1
 8000ec2:	1bae      	subs	r6, r5, r6
 8000ec4:	42b5      	cmp	r5, r6
 8000ec6:	41ad      	sbcs	r5, r5
 8000ec8:	1a80      	subs	r0, r0, r2
 8000eca:	426d      	negs	r5, r5
 8000ecc:	1b40      	subs	r0, r0, r5
 8000ece:	4284      	cmp	r4, r0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x1e0>
 8000ed2:	e1d5      	b.n	8001280 <__aeabi_ddiv+0x58c>
 8000ed4:	4649      	mov	r1, r9
 8000ed6:	f7ff f9b7 	bl	8000248 <__aeabi_uidivmod>
 8000eda:	9a01      	ldr	r2, [sp, #4]
 8000edc:	040b      	lsls	r3, r1, #16
 8000ede:	4342      	muls	r2, r0
 8000ee0:	0c31      	lsrs	r1, r6, #16
 8000ee2:	0005      	movs	r5, r0
 8000ee4:	4319      	orrs	r1, r3
 8000ee6:	428a      	cmp	r2, r1
 8000ee8:	d900      	bls.n	8000eec <__aeabi_ddiv+0x1f8>
 8000eea:	e16c      	b.n	80011c6 <__aeabi_ddiv+0x4d2>
 8000eec:	1a88      	subs	r0, r1, r2
 8000eee:	4649      	mov	r1, r9
 8000ef0:	f7ff f9aa 	bl	8000248 <__aeabi_uidivmod>
 8000ef4:	9a01      	ldr	r2, [sp, #4]
 8000ef6:	0436      	lsls	r6, r6, #16
 8000ef8:	4342      	muls	r2, r0
 8000efa:	0409      	lsls	r1, r1, #16
 8000efc:	0c36      	lsrs	r6, r6, #16
 8000efe:	0003      	movs	r3, r0
 8000f00:	430e      	orrs	r6, r1
 8000f02:	42b2      	cmp	r2, r6
 8000f04:	d900      	bls.n	8000f08 <__aeabi_ddiv+0x214>
 8000f06:	e153      	b.n	80011b0 <__aeabi_ddiv+0x4bc>
 8000f08:	9803      	ldr	r0, [sp, #12]
 8000f0a:	1ab6      	subs	r6, r6, r2
 8000f0c:	0002      	movs	r2, r0
 8000f0e:	042d      	lsls	r5, r5, #16
 8000f10:	431d      	orrs	r5, r3
 8000f12:	9f02      	ldr	r7, [sp, #8]
 8000f14:	042b      	lsls	r3, r5, #16
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	435a      	muls	r2, r3
 8000f1a:	437b      	muls	r3, r7
 8000f1c:	469c      	mov	ip, r3
 8000f1e:	0c29      	lsrs	r1, r5, #16
 8000f20:	4348      	muls	r0, r1
 8000f22:	0c13      	lsrs	r3, r2, #16
 8000f24:	4484      	add	ip, r0
 8000f26:	4463      	add	r3, ip
 8000f28:	4379      	muls	r1, r7
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	d903      	bls.n	8000f36 <__aeabi_ddiv+0x242>
 8000f2e:	2080      	movs	r0, #128	; 0x80
 8000f30:	0240      	lsls	r0, r0, #9
 8000f32:	4684      	mov	ip, r0
 8000f34:	4461      	add	r1, ip
 8000f36:	0c18      	lsrs	r0, r3, #16
 8000f38:	0412      	lsls	r2, r2, #16
 8000f3a:	041b      	lsls	r3, r3, #16
 8000f3c:	0c12      	lsrs	r2, r2, #16
 8000f3e:	1841      	adds	r1, r0, r1
 8000f40:	189b      	adds	r3, r3, r2
 8000f42:	428e      	cmp	r6, r1
 8000f44:	d200      	bcs.n	8000f48 <__aeabi_ddiv+0x254>
 8000f46:	e0ff      	b.n	8001148 <__aeabi_ddiv+0x454>
 8000f48:	d100      	bne.n	8000f4c <__aeabi_ddiv+0x258>
 8000f4a:	e0fa      	b.n	8001142 <__aeabi_ddiv+0x44e>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	431d      	orrs	r5, r3
 8000f50:	4a49      	ldr	r2, [pc, #292]	; (8001078 <__aeabi_ddiv+0x384>)
 8000f52:	445a      	add	r2, fp
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	dc00      	bgt.n	8000f5a <__aeabi_ddiv+0x266>
 8000f58:	e0aa      	b.n	80010b0 <__aeabi_ddiv+0x3bc>
 8000f5a:	076b      	lsls	r3, r5, #29
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_ddiv+0x26c>
 8000f5e:	e13d      	b.n	80011dc <__aeabi_ddiv+0x4e8>
 8000f60:	08ed      	lsrs	r5, r5, #3
 8000f62:	4643      	mov	r3, r8
 8000f64:	01db      	lsls	r3, r3, #7
 8000f66:	d506      	bpl.n	8000f76 <__aeabi_ddiv+0x282>
 8000f68:	4642      	mov	r2, r8
 8000f6a:	4b44      	ldr	r3, [pc, #272]	; (800107c <__aeabi_ddiv+0x388>)
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	4690      	mov	r8, r2
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	00d2      	lsls	r2, r2, #3
 8000f74:	445a      	add	r2, fp
 8000f76:	4b42      	ldr	r3, [pc, #264]	; (8001080 <__aeabi_ddiv+0x38c>)
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dd00      	ble.n	8000f7e <__aeabi_ddiv+0x28a>
 8000f7c:	e71f      	b.n	8000dbe <__aeabi_ddiv+0xca>
 8000f7e:	4643      	mov	r3, r8
 8000f80:	075b      	lsls	r3, r3, #29
 8000f82:	431d      	orrs	r5, r3
 8000f84:	4643      	mov	r3, r8
 8000f86:	0552      	lsls	r2, r2, #21
 8000f88:	025c      	lsls	r4, r3, #9
 8000f8a:	0b24      	lsrs	r4, r4, #12
 8000f8c:	0d53      	lsrs	r3, r2, #21
 8000f8e:	e708      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8000f90:	4652      	mov	r2, sl
 8000f92:	4322      	orrs	r2, r4
 8000f94:	d100      	bne.n	8000f98 <__aeabi_ddiv+0x2a4>
 8000f96:	e07b      	b.n	8001090 <__aeabi_ddiv+0x39c>
 8000f98:	2c00      	cmp	r4, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_ddiv+0x2aa>
 8000f9c:	e0fa      	b.n	8001194 <__aeabi_ddiv+0x4a0>
 8000f9e:	0020      	movs	r0, r4
 8000fa0:	f001 f952 	bl	8002248 <__clzsi2>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	3a0b      	subs	r2, #11
 8000fa8:	231d      	movs	r3, #29
 8000faa:	0001      	movs	r1, r0
 8000fac:	1a9b      	subs	r3, r3, r2
 8000fae:	4652      	mov	r2, sl
 8000fb0:	3908      	subs	r1, #8
 8000fb2:	40da      	lsrs	r2, r3
 8000fb4:	408c      	lsls	r4, r1
 8000fb6:	4314      	orrs	r4, r2
 8000fb8:	4652      	mov	r2, sl
 8000fba:	408a      	lsls	r2, r1
 8000fbc:	4b31      	ldr	r3, [pc, #196]	; (8001084 <__aeabi_ddiv+0x390>)
 8000fbe:	4458      	add	r0, fp
 8000fc0:	469b      	mov	fp, r3
 8000fc2:	4483      	add	fp, r0
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	e6d5      	b.n	8000d74 <__aeabi_ddiv+0x80>
 8000fc8:	464b      	mov	r3, r9
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	4698      	mov	r8, r3
 8000fce:	d044      	beq.n	800105a <__aeabi_ddiv+0x366>
 8000fd0:	2c00      	cmp	r4, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x2e2>
 8000fd4:	e0ce      	b.n	8001174 <__aeabi_ddiv+0x480>
 8000fd6:	0020      	movs	r0, r4
 8000fd8:	f001 f936 	bl	8002248 <__clzsi2>
 8000fdc:	0001      	movs	r1, r0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	390b      	subs	r1, #11
 8000fe2:	231d      	movs	r3, #29
 8000fe4:	1a5b      	subs	r3, r3, r1
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	0010      	movs	r0, r2
 8000fea:	40d9      	lsrs	r1, r3
 8000fec:	3808      	subs	r0, #8
 8000fee:	4084      	lsls	r4, r0
 8000ff0:	000b      	movs	r3, r1
 8000ff2:	464d      	mov	r5, r9
 8000ff4:	4323      	orrs	r3, r4
 8000ff6:	4698      	mov	r8, r3
 8000ff8:	4085      	lsls	r5, r0
 8000ffa:	4823      	ldr	r0, [pc, #140]	; (8001088 <__aeabi_ddiv+0x394>)
 8000ffc:	1a83      	subs	r3, r0, r2
 8000ffe:	469b      	mov	fp, r3
 8001000:	2300      	movs	r3, #0
 8001002:	4699      	mov	r9, r3
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	e69a      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 8001008:	464b      	mov	r3, r9
 800100a:	4323      	orrs	r3, r4
 800100c:	4698      	mov	r8, r3
 800100e:	d11d      	bne.n	800104c <__aeabi_ddiv+0x358>
 8001010:	2308      	movs	r3, #8
 8001012:	4699      	mov	r9, r3
 8001014:	3b06      	subs	r3, #6
 8001016:	2500      	movs	r5, #0
 8001018:	4683      	mov	fp, r0
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	e68f      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800101e:	4652      	mov	r2, sl
 8001020:	4322      	orrs	r2, r4
 8001022:	d109      	bne.n	8001038 <__aeabi_ddiv+0x344>
 8001024:	2302      	movs	r3, #2
 8001026:	4649      	mov	r1, r9
 8001028:	4319      	orrs	r1, r3
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <__aeabi_ddiv+0x398>)
 800102c:	4689      	mov	r9, r1
 800102e:	469c      	mov	ip, r3
 8001030:	2400      	movs	r4, #0
 8001032:	2002      	movs	r0, #2
 8001034:	44e3      	add	fp, ip
 8001036:	e69d      	b.n	8000d74 <__aeabi_ddiv+0x80>
 8001038:	2303      	movs	r3, #3
 800103a:	464a      	mov	r2, r9
 800103c:	431a      	orrs	r2, r3
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <__aeabi_ddiv+0x398>)
 8001040:	4691      	mov	r9, r2
 8001042:	469c      	mov	ip, r3
 8001044:	4652      	mov	r2, sl
 8001046:	2003      	movs	r0, #3
 8001048:	44e3      	add	fp, ip
 800104a:	e693      	b.n	8000d74 <__aeabi_ddiv+0x80>
 800104c:	230c      	movs	r3, #12
 800104e:	4699      	mov	r9, r3
 8001050:	3b09      	subs	r3, #9
 8001052:	46a0      	mov	r8, r4
 8001054:	4683      	mov	fp, r0
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	e671      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800105a:	2304      	movs	r3, #4
 800105c:	4699      	mov	r9, r3
 800105e:	2300      	movs	r3, #0
 8001060:	469b      	mov	fp, r3
 8001062:	3301      	adds	r3, #1
 8001064:	2500      	movs	r5, #0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	e669      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	000007ff 	.word	0x000007ff
 8001070:	fffffc01 	.word	0xfffffc01
 8001074:	0800a90c 	.word	0x0800a90c
 8001078:	000003ff 	.word	0x000003ff
 800107c:	feffffff 	.word	0xfeffffff
 8001080:	000007fe 	.word	0x000007fe
 8001084:	000003f3 	.word	0x000003f3
 8001088:	fffffc0d 	.word	0xfffffc0d
 800108c:	fffff801 	.word	0xfffff801
 8001090:	4649      	mov	r1, r9
 8001092:	2301      	movs	r3, #1
 8001094:	4319      	orrs	r1, r3
 8001096:	4689      	mov	r9, r1
 8001098:	2400      	movs	r4, #0
 800109a:	2001      	movs	r0, #1
 800109c:	e66a      	b.n	8000d74 <__aeabi_ddiv+0x80>
 800109e:	2300      	movs	r3, #0
 80010a0:	2480      	movs	r4, #128	; 0x80
 80010a2:	469a      	mov	sl, r3
 80010a4:	2500      	movs	r5, #0
 80010a6:	4b8a      	ldr	r3, [pc, #552]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 80010a8:	0324      	lsls	r4, r4, #12
 80010aa:	e67a      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80010ac:	2501      	movs	r5, #1
 80010ae:	426d      	negs	r5, r5
 80010b0:	2301      	movs	r3, #1
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	2b38      	cmp	r3, #56	; 0x38
 80010b6:	dd00      	ble.n	80010ba <__aeabi_ddiv+0x3c6>
 80010b8:	e670      	b.n	8000d9c <__aeabi_ddiv+0xa8>
 80010ba:	2b1f      	cmp	r3, #31
 80010bc:	dc00      	bgt.n	80010c0 <__aeabi_ddiv+0x3cc>
 80010be:	e0bf      	b.n	8001240 <__aeabi_ddiv+0x54c>
 80010c0:	211f      	movs	r1, #31
 80010c2:	4249      	negs	r1, r1
 80010c4:	1a8a      	subs	r2, r1, r2
 80010c6:	4641      	mov	r1, r8
 80010c8:	40d1      	lsrs	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	d004      	beq.n	80010da <__aeabi_ddiv+0x3e6>
 80010d0:	4641      	mov	r1, r8
 80010d2:	4b80      	ldr	r3, [pc, #512]	; (80012d4 <__aeabi_ddiv+0x5e0>)
 80010d4:	445b      	add	r3, fp
 80010d6:	4099      	lsls	r1, r3
 80010d8:	430d      	orrs	r5, r1
 80010da:	1e6b      	subs	r3, r5, #1
 80010dc:	419d      	sbcs	r5, r3
 80010de:	2307      	movs	r3, #7
 80010e0:	432a      	orrs	r2, r5
 80010e2:	001d      	movs	r5, r3
 80010e4:	2400      	movs	r4, #0
 80010e6:	4015      	ands	r5, r2
 80010e8:	4213      	tst	r3, r2
 80010ea:	d100      	bne.n	80010ee <__aeabi_ddiv+0x3fa>
 80010ec:	e0d4      	b.n	8001298 <__aeabi_ddiv+0x5a4>
 80010ee:	210f      	movs	r1, #15
 80010f0:	2300      	movs	r3, #0
 80010f2:	4011      	ands	r1, r2
 80010f4:	2904      	cmp	r1, #4
 80010f6:	d100      	bne.n	80010fa <__aeabi_ddiv+0x406>
 80010f8:	e0cb      	b.n	8001292 <__aeabi_ddiv+0x59e>
 80010fa:	1d11      	adds	r1, r2, #4
 80010fc:	4291      	cmp	r1, r2
 80010fe:	4192      	sbcs	r2, r2
 8001100:	4252      	negs	r2, r2
 8001102:	189b      	adds	r3, r3, r2
 8001104:	000a      	movs	r2, r1
 8001106:	0219      	lsls	r1, r3, #8
 8001108:	d400      	bmi.n	800110c <__aeabi_ddiv+0x418>
 800110a:	e0c2      	b.n	8001292 <__aeabi_ddiv+0x59e>
 800110c:	2301      	movs	r3, #1
 800110e:	2400      	movs	r4, #0
 8001110:	2500      	movs	r5, #0
 8001112:	e646      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	4641      	mov	r1, r8
 8001118:	031b      	lsls	r3, r3, #12
 800111a:	4219      	tst	r1, r3
 800111c:	d008      	beq.n	8001130 <__aeabi_ddiv+0x43c>
 800111e:	421c      	tst	r4, r3
 8001120:	d106      	bne.n	8001130 <__aeabi_ddiv+0x43c>
 8001122:	431c      	orrs	r4, r3
 8001124:	0324      	lsls	r4, r4, #12
 8001126:	46ba      	mov	sl, r7
 8001128:	0015      	movs	r5, r2
 800112a:	4b69      	ldr	r3, [pc, #420]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 800112c:	0b24      	lsrs	r4, r4, #12
 800112e:	e638      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001130:	2480      	movs	r4, #128	; 0x80
 8001132:	4643      	mov	r3, r8
 8001134:	0324      	lsls	r4, r4, #12
 8001136:	431c      	orrs	r4, r3
 8001138:	0324      	lsls	r4, r4, #12
 800113a:	46b2      	mov	sl, r6
 800113c:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 800113e:	0b24      	lsrs	r4, r4, #12
 8001140:	e62f      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001142:	2b00      	cmp	r3, #0
 8001144:	d100      	bne.n	8001148 <__aeabi_ddiv+0x454>
 8001146:	e703      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8001148:	19a6      	adds	r6, r4, r6
 800114a:	1e68      	subs	r0, r5, #1
 800114c:	42a6      	cmp	r6, r4
 800114e:	d200      	bcs.n	8001152 <__aeabi_ddiv+0x45e>
 8001150:	e08d      	b.n	800126e <__aeabi_ddiv+0x57a>
 8001152:	428e      	cmp	r6, r1
 8001154:	d200      	bcs.n	8001158 <__aeabi_ddiv+0x464>
 8001156:	e0a3      	b.n	80012a0 <__aeabi_ddiv+0x5ac>
 8001158:	d100      	bne.n	800115c <__aeabi_ddiv+0x468>
 800115a:	e0b3      	b.n	80012c4 <__aeabi_ddiv+0x5d0>
 800115c:	0005      	movs	r5, r0
 800115e:	e6f5      	b.n	8000f4c <__aeabi_ddiv+0x258>
 8001160:	42aa      	cmp	r2, r5
 8001162:	d900      	bls.n	8001166 <__aeabi_ddiv+0x472>
 8001164:	e639      	b.n	8000dda <__aeabi_ddiv+0xe6>
 8001166:	4643      	mov	r3, r8
 8001168:	07de      	lsls	r6, r3, #31
 800116a:	0858      	lsrs	r0, r3, #1
 800116c:	086b      	lsrs	r3, r5, #1
 800116e:	431e      	orrs	r6, r3
 8001170:	07ed      	lsls	r5, r5, #31
 8001172:	e639      	b.n	8000de8 <__aeabi_ddiv+0xf4>
 8001174:	4648      	mov	r0, r9
 8001176:	f001 f867 	bl	8002248 <__clzsi2>
 800117a:	0001      	movs	r1, r0
 800117c:	0002      	movs	r2, r0
 800117e:	3115      	adds	r1, #21
 8001180:	3220      	adds	r2, #32
 8001182:	291c      	cmp	r1, #28
 8001184:	dc00      	bgt.n	8001188 <__aeabi_ddiv+0x494>
 8001186:	e72c      	b.n	8000fe2 <__aeabi_ddiv+0x2ee>
 8001188:	464b      	mov	r3, r9
 800118a:	3808      	subs	r0, #8
 800118c:	4083      	lsls	r3, r0
 800118e:	2500      	movs	r5, #0
 8001190:	4698      	mov	r8, r3
 8001192:	e732      	b.n	8000ffa <__aeabi_ddiv+0x306>
 8001194:	f001 f858 	bl	8002248 <__clzsi2>
 8001198:	0003      	movs	r3, r0
 800119a:	001a      	movs	r2, r3
 800119c:	3215      	adds	r2, #21
 800119e:	3020      	adds	r0, #32
 80011a0:	2a1c      	cmp	r2, #28
 80011a2:	dc00      	bgt.n	80011a6 <__aeabi_ddiv+0x4b2>
 80011a4:	e700      	b.n	8000fa8 <__aeabi_ddiv+0x2b4>
 80011a6:	4654      	mov	r4, sl
 80011a8:	3b08      	subs	r3, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	409c      	lsls	r4, r3
 80011ae:	e705      	b.n	8000fbc <__aeabi_ddiv+0x2c8>
 80011b0:	1936      	adds	r6, r6, r4
 80011b2:	3b01      	subs	r3, #1
 80011b4:	42b4      	cmp	r4, r6
 80011b6:	d900      	bls.n	80011ba <__aeabi_ddiv+0x4c6>
 80011b8:	e6a6      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011ba:	42b2      	cmp	r2, r6
 80011bc:	d800      	bhi.n	80011c0 <__aeabi_ddiv+0x4cc>
 80011be:	e6a3      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011c0:	1e83      	subs	r3, r0, #2
 80011c2:	1936      	adds	r6, r6, r4
 80011c4:	e6a0      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011c6:	1909      	adds	r1, r1, r4
 80011c8:	3d01      	subs	r5, #1
 80011ca:	428c      	cmp	r4, r1
 80011cc:	d900      	bls.n	80011d0 <__aeabi_ddiv+0x4dc>
 80011ce:	e68d      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011d0:	428a      	cmp	r2, r1
 80011d2:	d800      	bhi.n	80011d6 <__aeabi_ddiv+0x4e2>
 80011d4:	e68a      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011d6:	1e85      	subs	r5, r0, #2
 80011d8:	1909      	adds	r1, r1, r4
 80011da:	e687      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011dc:	230f      	movs	r3, #15
 80011de:	402b      	ands	r3, r5
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x4f2>
 80011e4:	e6bc      	b.n	8000f60 <__aeabi_ddiv+0x26c>
 80011e6:	2305      	movs	r3, #5
 80011e8:	425b      	negs	r3, r3
 80011ea:	42ab      	cmp	r3, r5
 80011ec:	419b      	sbcs	r3, r3
 80011ee:	3504      	adds	r5, #4
 80011f0:	425b      	negs	r3, r3
 80011f2:	08ed      	lsrs	r5, r5, #3
 80011f4:	4498      	add	r8, r3
 80011f6:	e6b4      	b.n	8000f62 <__aeabi_ddiv+0x26e>
 80011f8:	42af      	cmp	r7, r5
 80011fa:	d900      	bls.n	80011fe <__aeabi_ddiv+0x50a>
 80011fc:	e660      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 80011fe:	4282      	cmp	r2, r0
 8001200:	d804      	bhi.n	800120c <__aeabi_ddiv+0x518>
 8001202:	d000      	beq.n	8001206 <__aeabi_ddiv+0x512>
 8001204:	e65c      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 8001206:	42ae      	cmp	r6, r5
 8001208:	d800      	bhi.n	800120c <__aeabi_ddiv+0x518>
 800120a:	e659      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 800120c:	2302      	movs	r3, #2
 800120e:	425b      	negs	r3, r3
 8001210:	469c      	mov	ip, r3
 8001212:	9b00      	ldr	r3, [sp, #0]
 8001214:	44e0      	add	r8, ip
 8001216:	469c      	mov	ip, r3
 8001218:	4465      	add	r5, ip
 800121a:	429d      	cmp	r5, r3
 800121c:	419b      	sbcs	r3, r3
 800121e:	425b      	negs	r3, r3
 8001220:	191b      	adds	r3, r3, r4
 8001222:	18c0      	adds	r0, r0, r3
 8001224:	e64d      	b.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8001226:	428a      	cmp	r2, r1
 8001228:	d800      	bhi.n	800122c <__aeabi_ddiv+0x538>
 800122a:	e60e      	b.n	8000e4a <__aeabi_ddiv+0x156>
 800122c:	1e83      	subs	r3, r0, #2
 800122e:	1909      	adds	r1, r1, r4
 8001230:	e60b      	b.n	8000e4a <__aeabi_ddiv+0x156>
 8001232:	428a      	cmp	r2, r1
 8001234:	d800      	bhi.n	8001238 <__aeabi_ddiv+0x544>
 8001236:	e5f4      	b.n	8000e22 <__aeabi_ddiv+0x12e>
 8001238:	1e83      	subs	r3, r0, #2
 800123a:	4698      	mov	r8, r3
 800123c:	1909      	adds	r1, r1, r4
 800123e:	e5f0      	b.n	8000e22 <__aeabi_ddiv+0x12e>
 8001240:	4925      	ldr	r1, [pc, #148]	; (80012d8 <__aeabi_ddiv+0x5e4>)
 8001242:	0028      	movs	r0, r5
 8001244:	4459      	add	r1, fp
 8001246:	408d      	lsls	r5, r1
 8001248:	4642      	mov	r2, r8
 800124a:	408a      	lsls	r2, r1
 800124c:	1e69      	subs	r1, r5, #1
 800124e:	418d      	sbcs	r5, r1
 8001250:	4641      	mov	r1, r8
 8001252:	40d8      	lsrs	r0, r3
 8001254:	40d9      	lsrs	r1, r3
 8001256:	4302      	orrs	r2, r0
 8001258:	432a      	orrs	r2, r5
 800125a:	000b      	movs	r3, r1
 800125c:	0751      	lsls	r1, r2, #29
 800125e:	d100      	bne.n	8001262 <__aeabi_ddiv+0x56e>
 8001260:	e751      	b.n	8001106 <__aeabi_ddiv+0x412>
 8001262:	210f      	movs	r1, #15
 8001264:	4011      	ands	r1, r2
 8001266:	2904      	cmp	r1, #4
 8001268:	d000      	beq.n	800126c <__aeabi_ddiv+0x578>
 800126a:	e746      	b.n	80010fa <__aeabi_ddiv+0x406>
 800126c:	e74b      	b.n	8001106 <__aeabi_ddiv+0x412>
 800126e:	0005      	movs	r5, r0
 8001270:	428e      	cmp	r6, r1
 8001272:	d000      	beq.n	8001276 <__aeabi_ddiv+0x582>
 8001274:	e66a      	b.n	8000f4c <__aeabi_ddiv+0x258>
 8001276:	9a00      	ldr	r2, [sp, #0]
 8001278:	4293      	cmp	r3, r2
 800127a:	d000      	beq.n	800127e <__aeabi_ddiv+0x58a>
 800127c:	e666      	b.n	8000f4c <__aeabi_ddiv+0x258>
 800127e:	e667      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8001280:	4a16      	ldr	r2, [pc, #88]	; (80012dc <__aeabi_ddiv+0x5e8>)
 8001282:	445a      	add	r2, fp
 8001284:	2a00      	cmp	r2, #0
 8001286:	dc00      	bgt.n	800128a <__aeabi_ddiv+0x596>
 8001288:	e710      	b.n	80010ac <__aeabi_ddiv+0x3b8>
 800128a:	2301      	movs	r3, #1
 800128c:	2500      	movs	r5, #0
 800128e:	4498      	add	r8, r3
 8001290:	e667      	b.n	8000f62 <__aeabi_ddiv+0x26e>
 8001292:	075d      	lsls	r5, r3, #29
 8001294:	025b      	lsls	r3, r3, #9
 8001296:	0b1c      	lsrs	r4, r3, #12
 8001298:	08d2      	lsrs	r2, r2, #3
 800129a:	2300      	movs	r3, #0
 800129c:	4315      	orrs	r5, r2
 800129e:	e580      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80012a0:	9800      	ldr	r0, [sp, #0]
 80012a2:	3d02      	subs	r5, #2
 80012a4:	0042      	lsls	r2, r0, #1
 80012a6:	4282      	cmp	r2, r0
 80012a8:	41bf      	sbcs	r7, r7
 80012aa:	427f      	negs	r7, r7
 80012ac:	193c      	adds	r4, r7, r4
 80012ae:	1936      	adds	r6, r6, r4
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	e7dd      	b.n	8001270 <__aeabi_ddiv+0x57c>
 80012b4:	2480      	movs	r4, #128	; 0x80
 80012b6:	4643      	mov	r3, r8
 80012b8:	0324      	lsls	r4, r4, #12
 80012ba:	431c      	orrs	r4, r3
 80012bc:	0324      	lsls	r4, r4, #12
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 80012c0:	0b24      	lsrs	r4, r4, #12
 80012c2:	e56e      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80012c4:	9a00      	ldr	r2, [sp, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3ea      	bcc.n	80012a0 <__aeabi_ddiv+0x5ac>
 80012ca:	0005      	movs	r5, r0
 80012cc:	e7d3      	b.n	8001276 <__aeabi_ddiv+0x582>
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	000007ff 	.word	0x000007ff
 80012d4:	0000043e 	.word	0x0000043e
 80012d8:	0000041e 	.word	0x0000041e
 80012dc:	000003ff 	.word	0x000003ff

080012e0 <__eqdf2>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	464e      	mov	r6, r9
 80012e4:	4645      	mov	r5, r8
 80012e6:	46de      	mov	lr, fp
 80012e8:	4657      	mov	r7, sl
 80012ea:	4690      	mov	r8, r2
 80012ec:	b5e0      	push	{r5, r6, r7, lr}
 80012ee:	0017      	movs	r7, r2
 80012f0:	031a      	lsls	r2, r3, #12
 80012f2:	0b12      	lsrs	r2, r2, #12
 80012f4:	0005      	movs	r5, r0
 80012f6:	4684      	mov	ip, r0
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <__eqdf2+0x80>)
 80012fa:	030e      	lsls	r6, r1, #12
 80012fc:	004c      	lsls	r4, r1, #1
 80012fe:	4691      	mov	r9, r2
 8001300:	005a      	lsls	r2, r3, #1
 8001302:	0fdb      	lsrs	r3, r3, #31
 8001304:	469b      	mov	fp, r3
 8001306:	0b36      	lsrs	r6, r6, #12
 8001308:	0d64      	lsrs	r4, r4, #21
 800130a:	0fc9      	lsrs	r1, r1, #31
 800130c:	0d52      	lsrs	r2, r2, #21
 800130e:	4284      	cmp	r4, r0
 8001310:	d019      	beq.n	8001346 <__eqdf2+0x66>
 8001312:	4282      	cmp	r2, r0
 8001314:	d010      	beq.n	8001338 <__eqdf2+0x58>
 8001316:	2001      	movs	r0, #1
 8001318:	4294      	cmp	r4, r2
 800131a:	d10e      	bne.n	800133a <__eqdf2+0x5a>
 800131c:	454e      	cmp	r6, r9
 800131e:	d10c      	bne.n	800133a <__eqdf2+0x5a>
 8001320:	2001      	movs	r0, #1
 8001322:	45c4      	cmp	ip, r8
 8001324:	d109      	bne.n	800133a <__eqdf2+0x5a>
 8001326:	4559      	cmp	r1, fp
 8001328:	d017      	beq.n	800135a <__eqdf2+0x7a>
 800132a:	2c00      	cmp	r4, #0
 800132c:	d105      	bne.n	800133a <__eqdf2+0x5a>
 800132e:	0030      	movs	r0, r6
 8001330:	4328      	orrs	r0, r5
 8001332:	1e43      	subs	r3, r0, #1
 8001334:	4198      	sbcs	r0, r3
 8001336:	e000      	b.n	800133a <__eqdf2+0x5a>
 8001338:	2001      	movs	r0, #1
 800133a:	bcf0      	pop	{r4, r5, r6, r7}
 800133c:	46bb      	mov	fp, r7
 800133e:	46b2      	mov	sl, r6
 8001340:	46a9      	mov	r9, r5
 8001342:	46a0      	mov	r8, r4
 8001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001346:	0033      	movs	r3, r6
 8001348:	2001      	movs	r0, #1
 800134a:	432b      	orrs	r3, r5
 800134c:	d1f5      	bne.n	800133a <__eqdf2+0x5a>
 800134e:	42a2      	cmp	r2, r4
 8001350:	d1f3      	bne.n	800133a <__eqdf2+0x5a>
 8001352:	464b      	mov	r3, r9
 8001354:	433b      	orrs	r3, r7
 8001356:	d1f0      	bne.n	800133a <__eqdf2+0x5a>
 8001358:	e7e2      	b.n	8001320 <__eqdf2+0x40>
 800135a:	2000      	movs	r0, #0
 800135c:	e7ed      	b.n	800133a <__eqdf2+0x5a>
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	000007ff 	.word	0x000007ff

08001364 <__gedf2>:
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	4647      	mov	r7, r8
 8001368:	46ce      	mov	lr, r9
 800136a:	0004      	movs	r4, r0
 800136c:	0018      	movs	r0, r3
 800136e:	0016      	movs	r6, r2
 8001370:	031b      	lsls	r3, r3, #12
 8001372:	0b1b      	lsrs	r3, r3, #12
 8001374:	4d2d      	ldr	r5, [pc, #180]	; (800142c <__gedf2+0xc8>)
 8001376:	004a      	lsls	r2, r1, #1
 8001378:	4699      	mov	r9, r3
 800137a:	b580      	push	{r7, lr}
 800137c:	0043      	lsls	r3, r0, #1
 800137e:	030f      	lsls	r7, r1, #12
 8001380:	46a4      	mov	ip, r4
 8001382:	46b0      	mov	r8, r6
 8001384:	0b3f      	lsrs	r7, r7, #12
 8001386:	0d52      	lsrs	r2, r2, #21
 8001388:	0fc9      	lsrs	r1, r1, #31
 800138a:	0d5b      	lsrs	r3, r3, #21
 800138c:	0fc0      	lsrs	r0, r0, #31
 800138e:	42aa      	cmp	r2, r5
 8001390:	d021      	beq.n	80013d6 <__gedf2+0x72>
 8001392:	42ab      	cmp	r3, r5
 8001394:	d013      	beq.n	80013be <__gedf2+0x5a>
 8001396:	2a00      	cmp	r2, #0
 8001398:	d122      	bne.n	80013e0 <__gedf2+0x7c>
 800139a:	433c      	orrs	r4, r7
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <__gedf2+0x42>
 80013a0:	464d      	mov	r5, r9
 80013a2:	432e      	orrs	r6, r5
 80013a4:	d022      	beq.n	80013ec <__gedf2+0x88>
 80013a6:	2c00      	cmp	r4, #0
 80013a8:	d010      	beq.n	80013cc <__gedf2+0x68>
 80013aa:	4281      	cmp	r1, r0
 80013ac:	d022      	beq.n	80013f4 <__gedf2+0x90>
 80013ae:	2002      	movs	r0, #2
 80013b0:	3901      	subs	r1, #1
 80013b2:	4008      	ands	r0, r1
 80013b4:	3801      	subs	r0, #1
 80013b6:	bcc0      	pop	{r6, r7}
 80013b8:	46b9      	mov	r9, r7
 80013ba:	46b0      	mov	r8, r6
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	464d      	mov	r5, r9
 80013c0:	432e      	orrs	r6, r5
 80013c2:	d129      	bne.n	8001418 <__gedf2+0xb4>
 80013c4:	2a00      	cmp	r2, #0
 80013c6:	d1f0      	bne.n	80013aa <__gedf2+0x46>
 80013c8:	433c      	orrs	r4, r7
 80013ca:	d1ee      	bne.n	80013aa <__gedf2+0x46>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d1f2      	bne.n	80013b6 <__gedf2+0x52>
 80013d0:	2001      	movs	r0, #1
 80013d2:	4240      	negs	r0, r0
 80013d4:	e7ef      	b.n	80013b6 <__gedf2+0x52>
 80013d6:	003d      	movs	r5, r7
 80013d8:	4325      	orrs	r5, r4
 80013da:	d11d      	bne.n	8001418 <__gedf2+0xb4>
 80013dc:	4293      	cmp	r3, r2
 80013de:	d0ee      	beq.n	80013be <__gedf2+0x5a>
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e2      	bne.n	80013aa <__gedf2+0x46>
 80013e4:	464c      	mov	r4, r9
 80013e6:	4326      	orrs	r6, r4
 80013e8:	d1df      	bne.n	80013aa <__gedf2+0x46>
 80013ea:	e7e0      	b.n	80013ae <__gedf2+0x4a>
 80013ec:	2000      	movs	r0, #0
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	d0e1      	beq.n	80013b6 <__gedf2+0x52>
 80013f2:	e7dc      	b.n	80013ae <__gedf2+0x4a>
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dc0a      	bgt.n	800140e <__gedf2+0xaa>
 80013f8:	dbe8      	blt.n	80013cc <__gedf2+0x68>
 80013fa:	454f      	cmp	r7, r9
 80013fc:	d8d7      	bhi.n	80013ae <__gedf2+0x4a>
 80013fe:	d00e      	beq.n	800141e <__gedf2+0xba>
 8001400:	2000      	movs	r0, #0
 8001402:	454f      	cmp	r7, r9
 8001404:	d2d7      	bcs.n	80013b6 <__gedf2+0x52>
 8001406:	2900      	cmp	r1, #0
 8001408:	d0e2      	beq.n	80013d0 <__gedf2+0x6c>
 800140a:	0008      	movs	r0, r1
 800140c:	e7d3      	b.n	80013b6 <__gedf2+0x52>
 800140e:	4243      	negs	r3, r0
 8001410:	4158      	adcs	r0, r3
 8001412:	0040      	lsls	r0, r0, #1
 8001414:	3801      	subs	r0, #1
 8001416:	e7ce      	b.n	80013b6 <__gedf2+0x52>
 8001418:	2002      	movs	r0, #2
 800141a:	4240      	negs	r0, r0
 800141c:	e7cb      	b.n	80013b6 <__gedf2+0x52>
 800141e:	45c4      	cmp	ip, r8
 8001420:	d8c5      	bhi.n	80013ae <__gedf2+0x4a>
 8001422:	2000      	movs	r0, #0
 8001424:	45c4      	cmp	ip, r8
 8001426:	d2c6      	bcs.n	80013b6 <__gedf2+0x52>
 8001428:	e7ed      	b.n	8001406 <__gedf2+0xa2>
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	000007ff 	.word	0x000007ff

08001430 <__ledf2>:
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	4647      	mov	r7, r8
 8001434:	46ce      	mov	lr, r9
 8001436:	0004      	movs	r4, r0
 8001438:	0018      	movs	r0, r3
 800143a:	0016      	movs	r6, r2
 800143c:	031b      	lsls	r3, r3, #12
 800143e:	0b1b      	lsrs	r3, r3, #12
 8001440:	4d2c      	ldr	r5, [pc, #176]	; (80014f4 <__ledf2+0xc4>)
 8001442:	004a      	lsls	r2, r1, #1
 8001444:	4699      	mov	r9, r3
 8001446:	b580      	push	{r7, lr}
 8001448:	0043      	lsls	r3, r0, #1
 800144a:	030f      	lsls	r7, r1, #12
 800144c:	46a4      	mov	ip, r4
 800144e:	46b0      	mov	r8, r6
 8001450:	0b3f      	lsrs	r7, r7, #12
 8001452:	0d52      	lsrs	r2, r2, #21
 8001454:	0fc9      	lsrs	r1, r1, #31
 8001456:	0d5b      	lsrs	r3, r3, #21
 8001458:	0fc0      	lsrs	r0, r0, #31
 800145a:	42aa      	cmp	r2, r5
 800145c:	d00d      	beq.n	800147a <__ledf2+0x4a>
 800145e:	42ab      	cmp	r3, r5
 8001460:	d010      	beq.n	8001484 <__ledf2+0x54>
 8001462:	2a00      	cmp	r2, #0
 8001464:	d127      	bne.n	80014b6 <__ledf2+0x86>
 8001466:	433c      	orrs	r4, r7
 8001468:	2b00      	cmp	r3, #0
 800146a:	d111      	bne.n	8001490 <__ledf2+0x60>
 800146c:	464d      	mov	r5, r9
 800146e:	432e      	orrs	r6, r5
 8001470:	d10e      	bne.n	8001490 <__ledf2+0x60>
 8001472:	2000      	movs	r0, #0
 8001474:	2c00      	cmp	r4, #0
 8001476:	d015      	beq.n	80014a4 <__ledf2+0x74>
 8001478:	e00e      	b.n	8001498 <__ledf2+0x68>
 800147a:	003d      	movs	r5, r7
 800147c:	4325      	orrs	r5, r4
 800147e:	d110      	bne.n	80014a2 <__ledf2+0x72>
 8001480:	4293      	cmp	r3, r2
 8001482:	d118      	bne.n	80014b6 <__ledf2+0x86>
 8001484:	464d      	mov	r5, r9
 8001486:	432e      	orrs	r6, r5
 8001488:	d10b      	bne.n	80014a2 <__ledf2+0x72>
 800148a:	2a00      	cmp	r2, #0
 800148c:	d102      	bne.n	8001494 <__ledf2+0x64>
 800148e:	433c      	orrs	r4, r7
 8001490:	2c00      	cmp	r4, #0
 8001492:	d00b      	beq.n	80014ac <__ledf2+0x7c>
 8001494:	4281      	cmp	r1, r0
 8001496:	d014      	beq.n	80014c2 <__ledf2+0x92>
 8001498:	2002      	movs	r0, #2
 800149a:	3901      	subs	r1, #1
 800149c:	4008      	ands	r0, r1
 800149e:	3801      	subs	r0, #1
 80014a0:	e000      	b.n	80014a4 <__ledf2+0x74>
 80014a2:	2002      	movs	r0, #2
 80014a4:	bcc0      	pop	{r6, r7}
 80014a6:	46b9      	mov	r9, r7
 80014a8:	46b0      	mov	r8, r6
 80014aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d1f9      	bne.n	80014a4 <__ledf2+0x74>
 80014b0:	2001      	movs	r0, #1
 80014b2:	4240      	negs	r0, r0
 80014b4:	e7f6      	b.n	80014a4 <__ledf2+0x74>
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ec      	bne.n	8001494 <__ledf2+0x64>
 80014ba:	464c      	mov	r4, r9
 80014bc:	4326      	orrs	r6, r4
 80014be:	d1e9      	bne.n	8001494 <__ledf2+0x64>
 80014c0:	e7ea      	b.n	8001498 <__ledf2+0x68>
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dd04      	ble.n	80014d0 <__ledf2+0xa0>
 80014c6:	4243      	negs	r3, r0
 80014c8:	4158      	adcs	r0, r3
 80014ca:	0040      	lsls	r0, r0, #1
 80014cc:	3801      	subs	r0, #1
 80014ce:	e7e9      	b.n	80014a4 <__ledf2+0x74>
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbeb      	blt.n	80014ac <__ledf2+0x7c>
 80014d4:	454f      	cmp	r7, r9
 80014d6:	d8df      	bhi.n	8001498 <__ledf2+0x68>
 80014d8:	d006      	beq.n	80014e8 <__ledf2+0xb8>
 80014da:	2000      	movs	r0, #0
 80014dc:	454f      	cmp	r7, r9
 80014de:	d2e1      	bcs.n	80014a4 <__ledf2+0x74>
 80014e0:	2900      	cmp	r1, #0
 80014e2:	d0e5      	beq.n	80014b0 <__ledf2+0x80>
 80014e4:	0008      	movs	r0, r1
 80014e6:	e7dd      	b.n	80014a4 <__ledf2+0x74>
 80014e8:	45c4      	cmp	ip, r8
 80014ea:	d8d5      	bhi.n	8001498 <__ledf2+0x68>
 80014ec:	2000      	movs	r0, #0
 80014ee:	45c4      	cmp	ip, r8
 80014f0:	d2d8      	bcs.n	80014a4 <__ledf2+0x74>
 80014f2:	e7f5      	b.n	80014e0 <__ledf2+0xb0>
 80014f4:	000007ff 	.word	0x000007ff

080014f8 <__aeabi_dmul>:
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	4657      	mov	r7, sl
 80014fc:	464e      	mov	r6, r9
 80014fe:	4645      	mov	r5, r8
 8001500:	46de      	mov	lr, fp
 8001502:	b5e0      	push	{r5, r6, r7, lr}
 8001504:	4698      	mov	r8, r3
 8001506:	030c      	lsls	r4, r1, #12
 8001508:	004b      	lsls	r3, r1, #1
 800150a:	0006      	movs	r6, r0
 800150c:	4692      	mov	sl, r2
 800150e:	b087      	sub	sp, #28
 8001510:	0b24      	lsrs	r4, r4, #12
 8001512:	0d5b      	lsrs	r3, r3, #21
 8001514:	0fcf      	lsrs	r7, r1, #31
 8001516:	2b00      	cmp	r3, #0
 8001518:	d100      	bne.n	800151c <__aeabi_dmul+0x24>
 800151a:	e15c      	b.n	80017d6 <__aeabi_dmul+0x2de>
 800151c:	4ad9      	ldr	r2, [pc, #868]	; (8001884 <__aeabi_dmul+0x38c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d100      	bne.n	8001524 <__aeabi_dmul+0x2c>
 8001522:	e175      	b.n	8001810 <__aeabi_dmul+0x318>
 8001524:	0f42      	lsrs	r2, r0, #29
 8001526:	00e4      	lsls	r4, r4, #3
 8001528:	4314      	orrs	r4, r2
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	0412      	lsls	r2, r2, #16
 800152e:	4314      	orrs	r4, r2
 8001530:	4ad5      	ldr	r2, [pc, #852]	; (8001888 <__aeabi_dmul+0x390>)
 8001532:	00c5      	lsls	r5, r0, #3
 8001534:	4694      	mov	ip, r2
 8001536:	4463      	add	r3, ip
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2300      	movs	r3, #0
 800153c:	4699      	mov	r9, r3
 800153e:	469b      	mov	fp, r3
 8001540:	4643      	mov	r3, r8
 8001542:	4642      	mov	r2, r8
 8001544:	031e      	lsls	r6, r3, #12
 8001546:	0fd2      	lsrs	r2, r2, #31
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4650      	mov	r0, sl
 800154c:	4690      	mov	r8, r2
 800154e:	0b36      	lsrs	r6, r6, #12
 8001550:	0d5b      	lsrs	r3, r3, #21
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0x5e>
 8001554:	e120      	b.n	8001798 <__aeabi_dmul+0x2a0>
 8001556:	4acb      	ldr	r2, [pc, #812]	; (8001884 <__aeabi_dmul+0x38c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d100      	bne.n	800155e <__aeabi_dmul+0x66>
 800155c:	e162      	b.n	8001824 <__aeabi_dmul+0x32c>
 800155e:	49ca      	ldr	r1, [pc, #808]	; (8001888 <__aeabi_dmul+0x390>)
 8001560:	0f42      	lsrs	r2, r0, #29
 8001562:	468c      	mov	ip, r1
 8001564:	9900      	ldr	r1, [sp, #0]
 8001566:	4463      	add	r3, ip
 8001568:	00f6      	lsls	r6, r6, #3
 800156a:	468c      	mov	ip, r1
 800156c:	4316      	orrs	r6, r2
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	449c      	add	ip, r3
 8001572:	0412      	lsls	r2, r2, #16
 8001574:	4663      	mov	r3, ip
 8001576:	4316      	orrs	r6, r2
 8001578:	00c2      	lsls	r2, r0, #3
 800157a:	2000      	movs	r0, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	9900      	ldr	r1, [sp, #0]
 8001580:	4643      	mov	r3, r8
 8001582:	3101      	adds	r1, #1
 8001584:	468c      	mov	ip, r1
 8001586:	4649      	mov	r1, r9
 8001588:	407b      	eors	r3, r7
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	290f      	cmp	r1, #15
 800158e:	d826      	bhi.n	80015de <__aeabi_dmul+0xe6>
 8001590:	4bbe      	ldr	r3, [pc, #760]	; (800188c <__aeabi_dmul+0x394>)
 8001592:	0089      	lsls	r1, r1, #2
 8001594:	5859      	ldr	r1, [r3, r1]
 8001596:	468f      	mov	pc, r1
 8001598:	4643      	mov	r3, r8
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	0034      	movs	r4, r6
 800159e:	0015      	movs	r5, r2
 80015a0:	4683      	mov	fp, r0
 80015a2:	465b      	mov	r3, fp
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d016      	beq.n	80015d6 <__aeabi_dmul+0xde>
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0xb6>
 80015ac:	e203      	b.n	80019b6 <__aeabi_dmul+0x4be>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d000      	beq.n	80015b4 <__aeabi_dmul+0xbc>
 80015b2:	e0cd      	b.n	8001750 <__aeabi_dmul+0x258>
 80015b4:	2200      	movs	r2, #0
 80015b6:	2400      	movs	r4, #0
 80015b8:	2500      	movs	r5, #0
 80015ba:	9b01      	ldr	r3, [sp, #4]
 80015bc:	0512      	lsls	r2, r2, #20
 80015be:	4322      	orrs	r2, r4
 80015c0:	07db      	lsls	r3, r3, #31
 80015c2:	431a      	orrs	r2, r3
 80015c4:	0028      	movs	r0, r5
 80015c6:	0011      	movs	r1, r2
 80015c8:	b007      	add	sp, #28
 80015ca:	bcf0      	pop	{r4, r5, r6, r7}
 80015cc:	46bb      	mov	fp, r7
 80015ce:	46b2      	mov	sl, r6
 80015d0:	46a9      	mov	r9, r5
 80015d2:	46a0      	mov	r8, r4
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d6:	2400      	movs	r4, #0
 80015d8:	2500      	movs	r5, #0
 80015da:	4aaa      	ldr	r2, [pc, #680]	; (8001884 <__aeabi_dmul+0x38c>)
 80015dc:	e7ed      	b.n	80015ba <__aeabi_dmul+0xc2>
 80015de:	0c28      	lsrs	r0, r5, #16
 80015e0:	042d      	lsls	r5, r5, #16
 80015e2:	0c2d      	lsrs	r5, r5, #16
 80015e4:	002b      	movs	r3, r5
 80015e6:	0c11      	lsrs	r1, r2, #16
 80015e8:	0412      	lsls	r2, r2, #16
 80015ea:	0c12      	lsrs	r2, r2, #16
 80015ec:	4353      	muls	r3, r2
 80015ee:	4698      	mov	r8, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	002f      	movs	r7, r5
 80015f4:	4343      	muls	r3, r0
 80015f6:	4699      	mov	r9, r3
 80015f8:	434f      	muls	r7, r1
 80015fa:	444f      	add	r7, r9
 80015fc:	46bb      	mov	fp, r7
 80015fe:	4647      	mov	r7, r8
 8001600:	000b      	movs	r3, r1
 8001602:	0c3f      	lsrs	r7, r7, #16
 8001604:	46ba      	mov	sl, r7
 8001606:	4343      	muls	r3, r0
 8001608:	44da      	add	sl, fp
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	45d1      	cmp	r9, sl
 800160e:	d904      	bls.n	800161a <__aeabi_dmul+0x122>
 8001610:	2780      	movs	r7, #128	; 0x80
 8001612:	027f      	lsls	r7, r7, #9
 8001614:	46b9      	mov	r9, r7
 8001616:	444b      	add	r3, r9
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	4653      	mov	r3, sl
 800161c:	0c1b      	lsrs	r3, r3, #16
 800161e:	469b      	mov	fp, r3
 8001620:	4653      	mov	r3, sl
 8001622:	041f      	lsls	r7, r3, #16
 8001624:	4643      	mov	r3, r8
 8001626:	041b      	lsls	r3, r3, #16
 8001628:	0c1b      	lsrs	r3, r3, #16
 800162a:	4698      	mov	r8, r3
 800162c:	003b      	movs	r3, r7
 800162e:	4443      	add	r3, r8
 8001630:	9304      	str	r3, [sp, #16]
 8001632:	0c33      	lsrs	r3, r6, #16
 8001634:	0436      	lsls	r6, r6, #16
 8001636:	0c36      	lsrs	r6, r6, #16
 8001638:	4698      	mov	r8, r3
 800163a:	0033      	movs	r3, r6
 800163c:	4343      	muls	r3, r0
 800163e:	4699      	mov	r9, r3
 8001640:	4643      	mov	r3, r8
 8001642:	4343      	muls	r3, r0
 8001644:	002f      	movs	r7, r5
 8001646:	469a      	mov	sl, r3
 8001648:	4643      	mov	r3, r8
 800164a:	4377      	muls	r7, r6
 800164c:	435d      	muls	r5, r3
 800164e:	0c38      	lsrs	r0, r7, #16
 8001650:	444d      	add	r5, r9
 8001652:	1945      	adds	r5, r0, r5
 8001654:	45a9      	cmp	r9, r5
 8001656:	d903      	bls.n	8001660 <__aeabi_dmul+0x168>
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	4699      	mov	r9, r3
 800165e:	44ca      	add	sl, r9
 8001660:	043f      	lsls	r7, r7, #16
 8001662:	0c28      	lsrs	r0, r5, #16
 8001664:	0c3f      	lsrs	r7, r7, #16
 8001666:	042d      	lsls	r5, r5, #16
 8001668:	19ed      	adds	r5, r5, r7
 800166a:	0c27      	lsrs	r7, r4, #16
 800166c:	0424      	lsls	r4, r4, #16
 800166e:	0c24      	lsrs	r4, r4, #16
 8001670:	0003      	movs	r3, r0
 8001672:	0020      	movs	r0, r4
 8001674:	4350      	muls	r0, r2
 8001676:	437a      	muls	r2, r7
 8001678:	4691      	mov	r9, r2
 800167a:	003a      	movs	r2, r7
 800167c:	4453      	add	r3, sl
 800167e:	9305      	str	r3, [sp, #20]
 8001680:	0c03      	lsrs	r3, r0, #16
 8001682:	469a      	mov	sl, r3
 8001684:	434a      	muls	r2, r1
 8001686:	4361      	muls	r1, r4
 8001688:	4449      	add	r1, r9
 800168a:	4451      	add	r1, sl
 800168c:	44ab      	add	fp, r5
 800168e:	4589      	cmp	r9, r1
 8001690:	d903      	bls.n	800169a <__aeabi_dmul+0x1a2>
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	4699      	mov	r9, r3
 8001698:	444a      	add	r2, r9
 800169a:	0400      	lsls	r0, r0, #16
 800169c:	0c0b      	lsrs	r3, r1, #16
 800169e:	0c00      	lsrs	r0, r0, #16
 80016a0:	0409      	lsls	r1, r1, #16
 80016a2:	1809      	adds	r1, r1, r0
 80016a4:	0020      	movs	r0, r4
 80016a6:	4699      	mov	r9, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	4370      	muls	r0, r6
 80016ac:	435c      	muls	r4, r3
 80016ae:	437e      	muls	r6, r7
 80016b0:	435f      	muls	r7, r3
 80016b2:	0c03      	lsrs	r3, r0, #16
 80016b4:	4698      	mov	r8, r3
 80016b6:	19a4      	adds	r4, r4, r6
 80016b8:	4444      	add	r4, r8
 80016ba:	444a      	add	r2, r9
 80016bc:	9703      	str	r7, [sp, #12]
 80016be:	42a6      	cmp	r6, r4
 80016c0:	d904      	bls.n	80016cc <__aeabi_dmul+0x1d4>
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	025b      	lsls	r3, r3, #9
 80016c6:	4698      	mov	r8, r3
 80016c8:	4447      	add	r7, r8
 80016ca:	9703      	str	r7, [sp, #12]
 80016cc:	0423      	lsls	r3, r4, #16
 80016ce:	9e02      	ldr	r6, [sp, #8]
 80016d0:	469a      	mov	sl, r3
 80016d2:	9b05      	ldr	r3, [sp, #20]
 80016d4:	445e      	add	r6, fp
 80016d6:	4698      	mov	r8, r3
 80016d8:	42ae      	cmp	r6, r5
 80016da:	41ad      	sbcs	r5, r5
 80016dc:	1876      	adds	r6, r6, r1
 80016de:	428e      	cmp	r6, r1
 80016e0:	4189      	sbcs	r1, r1
 80016e2:	0400      	lsls	r0, r0, #16
 80016e4:	0c00      	lsrs	r0, r0, #16
 80016e6:	4450      	add	r0, sl
 80016e8:	4440      	add	r0, r8
 80016ea:	426d      	negs	r5, r5
 80016ec:	1947      	adds	r7, r0, r5
 80016ee:	46b8      	mov	r8, r7
 80016f0:	4693      	mov	fp, r2
 80016f2:	4249      	negs	r1, r1
 80016f4:	4689      	mov	r9, r1
 80016f6:	44c3      	add	fp, r8
 80016f8:	44d9      	add	r9, fp
 80016fa:	4298      	cmp	r0, r3
 80016fc:	4180      	sbcs	r0, r0
 80016fe:	45a8      	cmp	r8, r5
 8001700:	41ad      	sbcs	r5, r5
 8001702:	4593      	cmp	fp, r2
 8001704:	4192      	sbcs	r2, r2
 8001706:	4589      	cmp	r9, r1
 8001708:	4189      	sbcs	r1, r1
 800170a:	426d      	negs	r5, r5
 800170c:	4240      	negs	r0, r0
 800170e:	4328      	orrs	r0, r5
 8001710:	0c24      	lsrs	r4, r4, #16
 8001712:	4252      	negs	r2, r2
 8001714:	4249      	negs	r1, r1
 8001716:	430a      	orrs	r2, r1
 8001718:	9b03      	ldr	r3, [sp, #12]
 800171a:	1900      	adds	r0, r0, r4
 800171c:	1880      	adds	r0, r0, r2
 800171e:	18c7      	adds	r7, r0, r3
 8001720:	464b      	mov	r3, r9
 8001722:	0ddc      	lsrs	r4, r3, #23
 8001724:	9b04      	ldr	r3, [sp, #16]
 8001726:	0275      	lsls	r5, r6, #9
 8001728:	431d      	orrs	r5, r3
 800172a:	1e6a      	subs	r2, r5, #1
 800172c:	4195      	sbcs	r5, r2
 800172e:	464b      	mov	r3, r9
 8001730:	0df6      	lsrs	r6, r6, #23
 8001732:	027f      	lsls	r7, r7, #9
 8001734:	4335      	orrs	r5, r6
 8001736:	025a      	lsls	r2, r3, #9
 8001738:	433c      	orrs	r4, r7
 800173a:	4315      	orrs	r5, r2
 800173c:	01fb      	lsls	r3, r7, #7
 800173e:	d400      	bmi.n	8001742 <__aeabi_dmul+0x24a>
 8001740:	e11c      	b.n	800197c <__aeabi_dmul+0x484>
 8001742:	2101      	movs	r1, #1
 8001744:	086a      	lsrs	r2, r5, #1
 8001746:	400d      	ands	r5, r1
 8001748:	4315      	orrs	r5, r2
 800174a:	07e2      	lsls	r2, r4, #31
 800174c:	4315      	orrs	r5, r2
 800174e:	0864      	lsrs	r4, r4, #1
 8001750:	494f      	ldr	r1, [pc, #316]	; (8001890 <__aeabi_dmul+0x398>)
 8001752:	4461      	add	r1, ip
 8001754:	2900      	cmp	r1, #0
 8001756:	dc00      	bgt.n	800175a <__aeabi_dmul+0x262>
 8001758:	e0b0      	b.n	80018bc <__aeabi_dmul+0x3c4>
 800175a:	076b      	lsls	r3, r5, #29
 800175c:	d009      	beq.n	8001772 <__aeabi_dmul+0x27a>
 800175e:	220f      	movs	r2, #15
 8001760:	402a      	ands	r2, r5
 8001762:	2a04      	cmp	r2, #4
 8001764:	d005      	beq.n	8001772 <__aeabi_dmul+0x27a>
 8001766:	1d2a      	adds	r2, r5, #4
 8001768:	42aa      	cmp	r2, r5
 800176a:	41ad      	sbcs	r5, r5
 800176c:	426d      	negs	r5, r5
 800176e:	1964      	adds	r4, r4, r5
 8001770:	0015      	movs	r5, r2
 8001772:	01e3      	lsls	r3, r4, #7
 8001774:	d504      	bpl.n	8001780 <__aeabi_dmul+0x288>
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	4a46      	ldr	r2, [pc, #280]	; (8001894 <__aeabi_dmul+0x39c>)
 800177a:	00c9      	lsls	r1, r1, #3
 800177c:	4014      	ands	r4, r2
 800177e:	4461      	add	r1, ip
 8001780:	4a45      	ldr	r2, [pc, #276]	; (8001898 <__aeabi_dmul+0x3a0>)
 8001782:	4291      	cmp	r1, r2
 8001784:	dd00      	ble.n	8001788 <__aeabi_dmul+0x290>
 8001786:	e726      	b.n	80015d6 <__aeabi_dmul+0xde>
 8001788:	0762      	lsls	r2, r4, #29
 800178a:	08ed      	lsrs	r5, r5, #3
 800178c:	0264      	lsls	r4, r4, #9
 800178e:	0549      	lsls	r1, r1, #21
 8001790:	4315      	orrs	r5, r2
 8001792:	0b24      	lsrs	r4, r4, #12
 8001794:	0d4a      	lsrs	r2, r1, #21
 8001796:	e710      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001798:	4652      	mov	r2, sl
 800179a:	4332      	orrs	r2, r6
 800179c:	d100      	bne.n	80017a0 <__aeabi_dmul+0x2a8>
 800179e:	e07f      	b.n	80018a0 <__aeabi_dmul+0x3a8>
 80017a0:	2e00      	cmp	r6, #0
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dmul+0x2ae>
 80017a4:	e0dc      	b.n	8001960 <__aeabi_dmul+0x468>
 80017a6:	0030      	movs	r0, r6
 80017a8:	f000 fd4e 	bl	8002248 <__clzsi2>
 80017ac:	0002      	movs	r2, r0
 80017ae:	3a0b      	subs	r2, #11
 80017b0:	231d      	movs	r3, #29
 80017b2:	0001      	movs	r1, r0
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	4652      	mov	r2, sl
 80017b8:	3908      	subs	r1, #8
 80017ba:	40da      	lsrs	r2, r3
 80017bc:	408e      	lsls	r6, r1
 80017be:	4316      	orrs	r6, r2
 80017c0:	4652      	mov	r2, sl
 80017c2:	408a      	lsls	r2, r1
 80017c4:	9b00      	ldr	r3, [sp, #0]
 80017c6:	4935      	ldr	r1, [pc, #212]	; (800189c <__aeabi_dmul+0x3a4>)
 80017c8:	1a18      	subs	r0, r3, r0
 80017ca:	0003      	movs	r3, r0
 80017cc:	468c      	mov	ip, r1
 80017ce:	4463      	add	r3, ip
 80017d0:	2000      	movs	r0, #0
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	e6d3      	b.n	800157e <__aeabi_dmul+0x86>
 80017d6:	0025      	movs	r5, r4
 80017d8:	4305      	orrs	r5, r0
 80017da:	d04a      	beq.n	8001872 <__aeabi_dmul+0x37a>
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x2ea>
 80017e0:	e0b0      	b.n	8001944 <__aeabi_dmul+0x44c>
 80017e2:	0020      	movs	r0, r4
 80017e4:	f000 fd30 	bl	8002248 <__clzsi2>
 80017e8:	0001      	movs	r1, r0
 80017ea:	0002      	movs	r2, r0
 80017ec:	390b      	subs	r1, #11
 80017ee:	231d      	movs	r3, #29
 80017f0:	0010      	movs	r0, r2
 80017f2:	1a5b      	subs	r3, r3, r1
 80017f4:	0031      	movs	r1, r6
 80017f6:	0035      	movs	r5, r6
 80017f8:	3808      	subs	r0, #8
 80017fa:	4084      	lsls	r4, r0
 80017fc:	40d9      	lsrs	r1, r3
 80017fe:	4085      	lsls	r5, r0
 8001800:	430c      	orrs	r4, r1
 8001802:	4826      	ldr	r0, [pc, #152]	; (800189c <__aeabi_dmul+0x3a4>)
 8001804:	1a83      	subs	r3, r0, r2
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2300      	movs	r3, #0
 800180a:	4699      	mov	r9, r3
 800180c:	469b      	mov	fp, r3
 800180e:	e697      	b.n	8001540 <__aeabi_dmul+0x48>
 8001810:	0005      	movs	r5, r0
 8001812:	4325      	orrs	r5, r4
 8001814:	d126      	bne.n	8001864 <__aeabi_dmul+0x36c>
 8001816:	2208      	movs	r2, #8
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2302      	movs	r3, #2
 800181c:	2400      	movs	r4, #0
 800181e:	4691      	mov	r9, r2
 8001820:	469b      	mov	fp, r3
 8001822:	e68d      	b.n	8001540 <__aeabi_dmul+0x48>
 8001824:	4652      	mov	r2, sl
 8001826:	9b00      	ldr	r3, [sp, #0]
 8001828:	4332      	orrs	r2, r6
 800182a:	d110      	bne.n	800184e <__aeabi_dmul+0x356>
 800182c:	4915      	ldr	r1, [pc, #84]	; (8001884 <__aeabi_dmul+0x38c>)
 800182e:	2600      	movs	r6, #0
 8001830:	468c      	mov	ip, r1
 8001832:	4463      	add	r3, ip
 8001834:	4649      	mov	r1, r9
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2302      	movs	r3, #2
 800183a:	4319      	orrs	r1, r3
 800183c:	4689      	mov	r9, r1
 800183e:	2002      	movs	r0, #2
 8001840:	e69d      	b.n	800157e <__aeabi_dmul+0x86>
 8001842:	465b      	mov	r3, fp
 8001844:	9701      	str	r7, [sp, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d000      	beq.n	800184c <__aeabi_dmul+0x354>
 800184a:	e6ad      	b.n	80015a8 <__aeabi_dmul+0xb0>
 800184c:	e6c3      	b.n	80015d6 <__aeabi_dmul+0xde>
 800184e:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <__aeabi_dmul+0x38c>)
 8001850:	2003      	movs	r0, #3
 8001852:	4694      	mov	ip, r2
 8001854:	4463      	add	r3, ip
 8001856:	464a      	mov	r2, r9
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2303      	movs	r3, #3
 800185c:	431a      	orrs	r2, r3
 800185e:	4691      	mov	r9, r2
 8001860:	4652      	mov	r2, sl
 8001862:	e68c      	b.n	800157e <__aeabi_dmul+0x86>
 8001864:	220c      	movs	r2, #12
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2303      	movs	r3, #3
 800186a:	0005      	movs	r5, r0
 800186c:	4691      	mov	r9, r2
 800186e:	469b      	mov	fp, r3
 8001870:	e666      	b.n	8001540 <__aeabi_dmul+0x48>
 8001872:	2304      	movs	r3, #4
 8001874:	4699      	mov	r9, r3
 8001876:	2300      	movs	r3, #0
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	2400      	movs	r4, #0
 800187e:	469b      	mov	fp, r3
 8001880:	e65e      	b.n	8001540 <__aeabi_dmul+0x48>
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	000007ff 	.word	0x000007ff
 8001888:	fffffc01 	.word	0xfffffc01
 800188c:	0800a94c 	.word	0x0800a94c
 8001890:	000003ff 	.word	0x000003ff
 8001894:	feffffff 	.word	0xfeffffff
 8001898:	000007fe 	.word	0x000007fe
 800189c:	fffffc0d 	.word	0xfffffc0d
 80018a0:	4649      	mov	r1, r9
 80018a2:	2301      	movs	r3, #1
 80018a4:	4319      	orrs	r1, r3
 80018a6:	4689      	mov	r9, r1
 80018a8:	2600      	movs	r6, #0
 80018aa:	2001      	movs	r0, #1
 80018ac:	e667      	b.n	800157e <__aeabi_dmul+0x86>
 80018ae:	2300      	movs	r3, #0
 80018b0:	2480      	movs	r4, #128	; 0x80
 80018b2:	2500      	movs	r5, #0
 80018b4:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <__aeabi_dmul+0x4cc>)
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	e67e      	b.n	80015ba <__aeabi_dmul+0xc2>
 80018bc:	2001      	movs	r0, #1
 80018be:	1a40      	subs	r0, r0, r1
 80018c0:	2838      	cmp	r0, #56	; 0x38
 80018c2:	dd00      	ble.n	80018c6 <__aeabi_dmul+0x3ce>
 80018c4:	e676      	b.n	80015b4 <__aeabi_dmul+0xbc>
 80018c6:	281f      	cmp	r0, #31
 80018c8:	dd5b      	ble.n	8001982 <__aeabi_dmul+0x48a>
 80018ca:	221f      	movs	r2, #31
 80018cc:	0023      	movs	r3, r4
 80018ce:	4252      	negs	r2, r2
 80018d0:	1a51      	subs	r1, r2, r1
 80018d2:	40cb      	lsrs	r3, r1
 80018d4:	0019      	movs	r1, r3
 80018d6:	2820      	cmp	r0, #32
 80018d8:	d003      	beq.n	80018e2 <__aeabi_dmul+0x3ea>
 80018da:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <__aeabi_dmul+0x4d0>)
 80018dc:	4462      	add	r2, ip
 80018de:	4094      	lsls	r4, r2
 80018e0:	4325      	orrs	r5, r4
 80018e2:	1e6a      	subs	r2, r5, #1
 80018e4:	4195      	sbcs	r5, r2
 80018e6:	002a      	movs	r2, r5
 80018e8:	430a      	orrs	r2, r1
 80018ea:	2107      	movs	r1, #7
 80018ec:	000d      	movs	r5, r1
 80018ee:	2400      	movs	r4, #0
 80018f0:	4015      	ands	r5, r2
 80018f2:	4211      	tst	r1, r2
 80018f4:	d05b      	beq.n	80019ae <__aeabi_dmul+0x4b6>
 80018f6:	210f      	movs	r1, #15
 80018f8:	2400      	movs	r4, #0
 80018fa:	4011      	ands	r1, r2
 80018fc:	2904      	cmp	r1, #4
 80018fe:	d053      	beq.n	80019a8 <__aeabi_dmul+0x4b0>
 8001900:	1d11      	adds	r1, r2, #4
 8001902:	4291      	cmp	r1, r2
 8001904:	4192      	sbcs	r2, r2
 8001906:	4252      	negs	r2, r2
 8001908:	18a4      	adds	r4, r4, r2
 800190a:	000a      	movs	r2, r1
 800190c:	0223      	lsls	r3, r4, #8
 800190e:	d54b      	bpl.n	80019a8 <__aeabi_dmul+0x4b0>
 8001910:	2201      	movs	r2, #1
 8001912:	2400      	movs	r4, #0
 8001914:	2500      	movs	r5, #0
 8001916:	e650      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	031b      	lsls	r3, r3, #12
 800191c:	421c      	tst	r4, r3
 800191e:	d009      	beq.n	8001934 <__aeabi_dmul+0x43c>
 8001920:	421e      	tst	r6, r3
 8001922:	d107      	bne.n	8001934 <__aeabi_dmul+0x43c>
 8001924:	4333      	orrs	r3, r6
 8001926:	031c      	lsls	r4, r3, #12
 8001928:	4643      	mov	r3, r8
 800192a:	0015      	movs	r5, r2
 800192c:	0b24      	lsrs	r4, r4, #12
 800192e:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <__aeabi_dmul+0x4cc>)
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	e642      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	0312      	lsls	r2, r2, #12
 8001938:	4314      	orrs	r4, r2
 800193a:	0324      	lsls	r4, r4, #12
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <__aeabi_dmul+0x4cc>)
 800193e:	0b24      	lsrs	r4, r4, #12
 8001940:	9701      	str	r7, [sp, #4]
 8001942:	e63a      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001944:	f000 fc80 	bl	8002248 <__clzsi2>
 8001948:	0001      	movs	r1, r0
 800194a:	0002      	movs	r2, r0
 800194c:	3115      	adds	r1, #21
 800194e:	3220      	adds	r2, #32
 8001950:	291c      	cmp	r1, #28
 8001952:	dc00      	bgt.n	8001956 <__aeabi_dmul+0x45e>
 8001954:	e74b      	b.n	80017ee <__aeabi_dmul+0x2f6>
 8001956:	0034      	movs	r4, r6
 8001958:	3808      	subs	r0, #8
 800195a:	2500      	movs	r5, #0
 800195c:	4084      	lsls	r4, r0
 800195e:	e750      	b.n	8001802 <__aeabi_dmul+0x30a>
 8001960:	f000 fc72 	bl	8002248 <__clzsi2>
 8001964:	0003      	movs	r3, r0
 8001966:	001a      	movs	r2, r3
 8001968:	3215      	adds	r2, #21
 800196a:	3020      	adds	r0, #32
 800196c:	2a1c      	cmp	r2, #28
 800196e:	dc00      	bgt.n	8001972 <__aeabi_dmul+0x47a>
 8001970:	e71e      	b.n	80017b0 <__aeabi_dmul+0x2b8>
 8001972:	4656      	mov	r6, sl
 8001974:	3b08      	subs	r3, #8
 8001976:	2200      	movs	r2, #0
 8001978:	409e      	lsls	r6, r3
 800197a:	e723      	b.n	80017c4 <__aeabi_dmul+0x2cc>
 800197c:	9b00      	ldr	r3, [sp, #0]
 800197e:	469c      	mov	ip, r3
 8001980:	e6e6      	b.n	8001750 <__aeabi_dmul+0x258>
 8001982:	4912      	ldr	r1, [pc, #72]	; (80019cc <__aeabi_dmul+0x4d4>)
 8001984:	0022      	movs	r2, r4
 8001986:	4461      	add	r1, ip
 8001988:	002e      	movs	r6, r5
 800198a:	408d      	lsls	r5, r1
 800198c:	408a      	lsls	r2, r1
 800198e:	40c6      	lsrs	r6, r0
 8001990:	1e69      	subs	r1, r5, #1
 8001992:	418d      	sbcs	r5, r1
 8001994:	4332      	orrs	r2, r6
 8001996:	432a      	orrs	r2, r5
 8001998:	40c4      	lsrs	r4, r0
 800199a:	0753      	lsls	r3, r2, #29
 800199c:	d0b6      	beq.n	800190c <__aeabi_dmul+0x414>
 800199e:	210f      	movs	r1, #15
 80019a0:	4011      	ands	r1, r2
 80019a2:	2904      	cmp	r1, #4
 80019a4:	d1ac      	bne.n	8001900 <__aeabi_dmul+0x408>
 80019a6:	e7b1      	b.n	800190c <__aeabi_dmul+0x414>
 80019a8:	0765      	lsls	r5, r4, #29
 80019aa:	0264      	lsls	r4, r4, #9
 80019ac:	0b24      	lsrs	r4, r4, #12
 80019ae:	08d2      	lsrs	r2, r2, #3
 80019b0:	4315      	orrs	r5, r2
 80019b2:	2200      	movs	r2, #0
 80019b4:	e601      	b.n	80015ba <__aeabi_dmul+0xc2>
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	0312      	lsls	r2, r2, #12
 80019ba:	4314      	orrs	r4, r2
 80019bc:	0324      	lsls	r4, r4, #12
 80019be:	4a01      	ldr	r2, [pc, #4]	; (80019c4 <__aeabi_dmul+0x4cc>)
 80019c0:	0b24      	lsrs	r4, r4, #12
 80019c2:	e5fa      	b.n	80015ba <__aeabi_dmul+0xc2>
 80019c4:	000007ff 	.word	0x000007ff
 80019c8:	0000043e 	.word	0x0000043e
 80019cc:	0000041e 	.word	0x0000041e

080019d0 <__aeabi_dsub>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	4657      	mov	r7, sl
 80019d4:	464e      	mov	r6, r9
 80019d6:	4645      	mov	r5, r8
 80019d8:	46de      	mov	lr, fp
 80019da:	b5e0      	push	{r5, r6, r7, lr}
 80019dc:	001e      	movs	r6, r3
 80019de:	0017      	movs	r7, r2
 80019e0:	004a      	lsls	r2, r1, #1
 80019e2:	030b      	lsls	r3, r1, #12
 80019e4:	0d52      	lsrs	r2, r2, #21
 80019e6:	0a5b      	lsrs	r3, r3, #9
 80019e8:	4690      	mov	r8, r2
 80019ea:	0f42      	lsrs	r2, r0, #29
 80019ec:	431a      	orrs	r2, r3
 80019ee:	0fcd      	lsrs	r5, r1, #31
 80019f0:	4ccd      	ldr	r4, [pc, #820]	; (8001d28 <__aeabi_dsub+0x358>)
 80019f2:	0331      	lsls	r1, r6, #12
 80019f4:	00c3      	lsls	r3, r0, #3
 80019f6:	4694      	mov	ip, r2
 80019f8:	0070      	lsls	r0, r6, #1
 80019fa:	0f7a      	lsrs	r2, r7, #29
 80019fc:	0a49      	lsrs	r1, r1, #9
 80019fe:	00ff      	lsls	r7, r7, #3
 8001a00:	469a      	mov	sl, r3
 8001a02:	46b9      	mov	r9, r7
 8001a04:	0d40      	lsrs	r0, r0, #21
 8001a06:	0ff6      	lsrs	r6, r6, #31
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	42a0      	cmp	r0, r4
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x40>
 8001a0e:	e0b1      	b.n	8001b74 <__aeabi_dsub+0x1a4>
 8001a10:	2201      	movs	r2, #1
 8001a12:	4056      	eors	r6, r2
 8001a14:	46b3      	mov	fp, r6
 8001a16:	42b5      	cmp	r5, r6
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dsub+0x4c>
 8001a1a:	e088      	b.n	8001b2e <__aeabi_dsub+0x15e>
 8001a1c:	4642      	mov	r2, r8
 8001a1e:	1a12      	subs	r2, r2, r0
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dsub+0x56>
 8001a24:	e0ae      	b.n	8001b84 <__aeabi_dsub+0x1b4>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x5c>
 8001a2a:	e0c1      	b.n	8001bb0 <__aeabi_dsub+0x1e0>
 8001a2c:	48be      	ldr	r0, [pc, #760]	; (8001d28 <__aeabi_dsub+0x358>)
 8001a2e:	4580      	cmp	r8, r0
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x64>
 8001a32:	e151      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001a34:	2080      	movs	r0, #128	; 0x80
 8001a36:	0400      	lsls	r0, r0, #16
 8001a38:	4301      	orrs	r1, r0
 8001a3a:	2a38      	cmp	r2, #56	; 0x38
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dsub+0x70>
 8001a3e:	e17b      	b.n	8001d38 <__aeabi_dsub+0x368>
 8001a40:	2a1f      	cmp	r2, #31
 8001a42:	dd00      	ble.n	8001a46 <__aeabi_dsub+0x76>
 8001a44:	e1ee      	b.n	8001e24 <__aeabi_dsub+0x454>
 8001a46:	2020      	movs	r0, #32
 8001a48:	003e      	movs	r6, r7
 8001a4a:	1a80      	subs	r0, r0, r2
 8001a4c:	000c      	movs	r4, r1
 8001a4e:	40d6      	lsrs	r6, r2
 8001a50:	40d1      	lsrs	r1, r2
 8001a52:	4087      	lsls	r7, r0
 8001a54:	4662      	mov	r2, ip
 8001a56:	4084      	lsls	r4, r0
 8001a58:	1a52      	subs	r2, r2, r1
 8001a5a:	1e78      	subs	r0, r7, #1
 8001a5c:	4187      	sbcs	r7, r0
 8001a5e:	4694      	mov	ip, r2
 8001a60:	4334      	orrs	r4, r6
 8001a62:	4327      	orrs	r7, r4
 8001a64:	1bdc      	subs	r4, r3, r7
 8001a66:	42a3      	cmp	r3, r4
 8001a68:	419b      	sbcs	r3, r3
 8001a6a:	4662      	mov	r2, ip
 8001a6c:	425b      	negs	r3, r3
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4699      	mov	r9, r3
 8001a72:	464b      	mov	r3, r9
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	d400      	bmi.n	8001a7a <__aeabi_dsub+0xaa>
 8001a78:	e118      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	0258      	lsls	r0, r3, #9
 8001a7e:	0a43      	lsrs	r3, r0, #9
 8001a80:	4699      	mov	r9, r3
 8001a82:	464b      	mov	r3, r9
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0xba>
 8001a88:	e137      	b.n	8001cfa <__aeabi_dsub+0x32a>
 8001a8a:	4648      	mov	r0, r9
 8001a8c:	f000 fbdc 	bl	8002248 <__clzsi2>
 8001a90:	0001      	movs	r1, r0
 8001a92:	3908      	subs	r1, #8
 8001a94:	2320      	movs	r3, #32
 8001a96:	0022      	movs	r2, r4
 8001a98:	4648      	mov	r0, r9
 8001a9a:	1a5b      	subs	r3, r3, r1
 8001a9c:	40da      	lsrs	r2, r3
 8001a9e:	4088      	lsls	r0, r1
 8001aa0:	408c      	lsls	r4, r1
 8001aa2:	4643      	mov	r3, r8
 8001aa4:	4310      	orrs	r0, r2
 8001aa6:	4588      	cmp	r8, r1
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_dsub+0xdc>
 8001aaa:	e136      	b.n	8001d1a <__aeabi_dsub+0x34a>
 8001aac:	1ac9      	subs	r1, r1, r3
 8001aae:	1c4b      	adds	r3, r1, #1
 8001ab0:	2b1f      	cmp	r3, #31
 8001ab2:	dd00      	ble.n	8001ab6 <__aeabi_dsub+0xe6>
 8001ab4:	e0ea      	b.n	8001c8c <__aeabi_dsub+0x2bc>
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	0026      	movs	r6, r4
 8001aba:	1ad2      	subs	r2, r2, r3
 8001abc:	0001      	movs	r1, r0
 8001abe:	4094      	lsls	r4, r2
 8001ac0:	40de      	lsrs	r6, r3
 8001ac2:	40d8      	lsrs	r0, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4091      	lsls	r1, r2
 8001ac8:	1e62      	subs	r2, r4, #1
 8001aca:	4194      	sbcs	r4, r2
 8001acc:	4681      	mov	r9, r0
 8001ace:	4698      	mov	r8, r3
 8001ad0:	4331      	orrs	r1, r6
 8001ad2:	430c      	orrs	r4, r1
 8001ad4:	0763      	lsls	r3, r4, #29
 8001ad6:	d009      	beq.n	8001aec <__aeabi_dsub+0x11c>
 8001ad8:	230f      	movs	r3, #15
 8001ada:	4023      	ands	r3, r4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d005      	beq.n	8001aec <__aeabi_dsub+0x11c>
 8001ae0:	1d23      	adds	r3, r4, #4
 8001ae2:	42a3      	cmp	r3, r4
 8001ae4:	41a4      	sbcs	r4, r4
 8001ae6:	4264      	negs	r4, r4
 8001ae8:	44a1      	add	r9, r4
 8001aea:	001c      	movs	r4, r3
 8001aec:	464b      	mov	r3, r9
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dsub+0x124>
 8001af2:	e0de      	b.n	8001cb2 <__aeabi_dsub+0x2e2>
 8001af4:	4641      	mov	r1, r8
 8001af6:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <__aeabi_dsub+0x358>)
 8001af8:	3101      	adds	r1, #1
 8001afa:	4299      	cmp	r1, r3
 8001afc:	d100      	bne.n	8001b00 <__aeabi_dsub+0x130>
 8001afe:	e0e7      	b.n	8001cd0 <__aeabi_dsub+0x300>
 8001b00:	464b      	mov	r3, r9
 8001b02:	488a      	ldr	r0, [pc, #552]	; (8001d2c <__aeabi_dsub+0x35c>)
 8001b04:	08e4      	lsrs	r4, r4, #3
 8001b06:	4003      	ands	r3, r0
 8001b08:	0018      	movs	r0, r3
 8001b0a:	0549      	lsls	r1, r1, #21
 8001b0c:	075b      	lsls	r3, r3, #29
 8001b0e:	0240      	lsls	r0, r0, #9
 8001b10:	4323      	orrs	r3, r4
 8001b12:	0d4a      	lsrs	r2, r1, #21
 8001b14:	0b04      	lsrs	r4, r0, #12
 8001b16:	0512      	lsls	r2, r2, #20
 8001b18:	07ed      	lsls	r5, r5, #31
 8001b1a:	4322      	orrs	r2, r4
 8001b1c:	432a      	orrs	r2, r5
 8001b1e:	0018      	movs	r0, r3
 8001b20:	0011      	movs	r1, r2
 8001b22:	bcf0      	pop	{r4, r5, r6, r7}
 8001b24:	46bb      	mov	fp, r7
 8001b26:	46b2      	mov	sl, r6
 8001b28:	46a9      	mov	r9, r5
 8001b2a:	46a0      	mov	r8, r4
 8001b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b2e:	4642      	mov	r2, r8
 8001b30:	1a12      	subs	r2, r2, r0
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	dd52      	ble.n	8001bdc <__aeabi_dsub+0x20c>
 8001b36:	2800      	cmp	r0, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dsub+0x16c>
 8001b3a:	e09c      	b.n	8001c76 <__aeabi_dsub+0x2a6>
 8001b3c:	45a0      	cmp	r8, r4
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x172>
 8001b40:	e0ca      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001b42:	2080      	movs	r0, #128	; 0x80
 8001b44:	0400      	lsls	r0, r0, #16
 8001b46:	4301      	orrs	r1, r0
 8001b48:	2a38      	cmp	r2, #56	; 0x38
 8001b4a:	dd00      	ble.n	8001b4e <__aeabi_dsub+0x17e>
 8001b4c:	e149      	b.n	8001de2 <__aeabi_dsub+0x412>
 8001b4e:	2a1f      	cmp	r2, #31
 8001b50:	dc00      	bgt.n	8001b54 <__aeabi_dsub+0x184>
 8001b52:	e197      	b.n	8001e84 <__aeabi_dsub+0x4b4>
 8001b54:	0010      	movs	r0, r2
 8001b56:	000e      	movs	r6, r1
 8001b58:	3820      	subs	r0, #32
 8001b5a:	40c6      	lsrs	r6, r0
 8001b5c:	2a20      	cmp	r2, #32
 8001b5e:	d004      	beq.n	8001b6a <__aeabi_dsub+0x19a>
 8001b60:	2040      	movs	r0, #64	; 0x40
 8001b62:	1a82      	subs	r2, r0, r2
 8001b64:	4091      	lsls	r1, r2
 8001b66:	430f      	orrs	r7, r1
 8001b68:	46b9      	mov	r9, r7
 8001b6a:	464c      	mov	r4, r9
 8001b6c:	1e62      	subs	r2, r4, #1
 8001b6e:	4194      	sbcs	r4, r2
 8001b70:	4334      	orrs	r4, r6
 8001b72:	e13a      	b.n	8001dea <__aeabi_dsub+0x41a>
 8001b74:	000a      	movs	r2, r1
 8001b76:	433a      	orrs	r2, r7
 8001b78:	d028      	beq.n	8001bcc <__aeabi_dsub+0x1fc>
 8001b7a:	46b3      	mov	fp, r6
 8001b7c:	42b5      	cmp	r5, r6
 8001b7e:	d02b      	beq.n	8001bd8 <__aeabi_dsub+0x208>
 8001b80:	4a6b      	ldr	r2, [pc, #428]	; (8001d30 <__aeabi_dsub+0x360>)
 8001b82:	4442      	add	r2, r8
 8001b84:	2a00      	cmp	r2, #0
 8001b86:	d05d      	beq.n	8001c44 <__aeabi_dsub+0x274>
 8001b88:	4642      	mov	r2, r8
 8001b8a:	4644      	mov	r4, r8
 8001b8c:	1a82      	subs	r2, r0, r2
 8001b8e:	2c00      	cmp	r4, #0
 8001b90:	d000      	beq.n	8001b94 <__aeabi_dsub+0x1c4>
 8001b92:	e0f5      	b.n	8001d80 <__aeabi_dsub+0x3b0>
 8001b94:	4665      	mov	r5, ip
 8001b96:	431d      	orrs	r5, r3
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x1cc>
 8001b9a:	e19c      	b.n	8001ed6 <__aeabi_dsub+0x506>
 8001b9c:	1e55      	subs	r5, r2, #1
 8001b9e:	2a01      	cmp	r2, #1
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x1d4>
 8001ba2:	e1fb      	b.n	8001f9c <__aeabi_dsub+0x5cc>
 8001ba4:	4c60      	ldr	r4, [pc, #384]	; (8001d28 <__aeabi_dsub+0x358>)
 8001ba6:	42a2      	cmp	r2, r4
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dsub+0x1dc>
 8001baa:	e1bd      	b.n	8001f28 <__aeabi_dsub+0x558>
 8001bac:	002a      	movs	r2, r5
 8001bae:	e0f0      	b.n	8001d92 <__aeabi_dsub+0x3c2>
 8001bb0:	0008      	movs	r0, r1
 8001bb2:	4338      	orrs	r0, r7
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x1e8>
 8001bb6:	e0c3      	b.n	8001d40 <__aeabi_dsub+0x370>
 8001bb8:	1e50      	subs	r0, r2, #1
 8001bba:	2a01      	cmp	r2, #1
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x1f0>
 8001bbe:	e1a8      	b.n	8001f12 <__aeabi_dsub+0x542>
 8001bc0:	4c59      	ldr	r4, [pc, #356]	; (8001d28 <__aeabi_dsub+0x358>)
 8001bc2:	42a2      	cmp	r2, r4
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x1f8>
 8001bc6:	e087      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	e736      	b.n	8001a3a <__aeabi_dsub+0x6a>
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4056      	eors	r6, r2
 8001bd0:	46b3      	mov	fp, r6
 8001bd2:	42b5      	cmp	r5, r6
 8001bd4:	d000      	beq.n	8001bd8 <__aeabi_dsub+0x208>
 8001bd6:	e721      	b.n	8001a1c <__aeabi_dsub+0x4c>
 8001bd8:	4a55      	ldr	r2, [pc, #340]	; (8001d30 <__aeabi_dsub+0x360>)
 8001bda:	4442      	add	r2, r8
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x212>
 8001be0:	e0b5      	b.n	8001d4e <__aeabi_dsub+0x37e>
 8001be2:	4642      	mov	r2, r8
 8001be4:	4644      	mov	r4, r8
 8001be6:	1a82      	subs	r2, r0, r2
 8001be8:	2c00      	cmp	r4, #0
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x21e>
 8001bec:	e138      	b.n	8001e60 <__aeabi_dsub+0x490>
 8001bee:	4e4e      	ldr	r6, [pc, #312]	; (8001d28 <__aeabi_dsub+0x358>)
 8001bf0:	42b0      	cmp	r0, r6
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x226>
 8001bf4:	e1de      	b.n	8001fb4 <__aeabi_dsub+0x5e4>
 8001bf6:	2680      	movs	r6, #128	; 0x80
 8001bf8:	4664      	mov	r4, ip
 8001bfa:	0436      	lsls	r6, r6, #16
 8001bfc:	4334      	orrs	r4, r6
 8001bfe:	46a4      	mov	ip, r4
 8001c00:	2a38      	cmp	r2, #56	; 0x38
 8001c02:	dd00      	ble.n	8001c06 <__aeabi_dsub+0x236>
 8001c04:	e196      	b.n	8001f34 <__aeabi_dsub+0x564>
 8001c06:	2a1f      	cmp	r2, #31
 8001c08:	dd00      	ble.n	8001c0c <__aeabi_dsub+0x23c>
 8001c0a:	e224      	b.n	8002056 <__aeabi_dsub+0x686>
 8001c0c:	2620      	movs	r6, #32
 8001c0e:	1ab4      	subs	r4, r6, r2
 8001c10:	46a2      	mov	sl, r4
 8001c12:	4664      	mov	r4, ip
 8001c14:	4656      	mov	r6, sl
 8001c16:	40b4      	lsls	r4, r6
 8001c18:	46a1      	mov	r9, r4
 8001c1a:	001c      	movs	r4, r3
 8001c1c:	464e      	mov	r6, r9
 8001c1e:	40d4      	lsrs	r4, r2
 8001c20:	4326      	orrs	r6, r4
 8001c22:	0034      	movs	r4, r6
 8001c24:	4656      	mov	r6, sl
 8001c26:	40b3      	lsls	r3, r6
 8001c28:	1e5e      	subs	r6, r3, #1
 8001c2a:	41b3      	sbcs	r3, r6
 8001c2c:	431c      	orrs	r4, r3
 8001c2e:	4663      	mov	r3, ip
 8001c30:	40d3      	lsrs	r3, r2
 8001c32:	18c9      	adds	r1, r1, r3
 8001c34:	19e4      	adds	r4, r4, r7
 8001c36:	42bc      	cmp	r4, r7
 8001c38:	41bf      	sbcs	r7, r7
 8001c3a:	427f      	negs	r7, r7
 8001c3c:	46b9      	mov	r9, r7
 8001c3e:	4680      	mov	r8, r0
 8001c40:	4489      	add	r9, r1
 8001c42:	e0d8      	b.n	8001df6 <__aeabi_dsub+0x426>
 8001c44:	4640      	mov	r0, r8
 8001c46:	4c3b      	ldr	r4, [pc, #236]	; (8001d34 <__aeabi_dsub+0x364>)
 8001c48:	3001      	adds	r0, #1
 8001c4a:	4220      	tst	r0, r4
 8001c4c:	d000      	beq.n	8001c50 <__aeabi_dsub+0x280>
 8001c4e:	e0b4      	b.n	8001dba <__aeabi_dsub+0x3ea>
 8001c50:	4640      	mov	r0, r8
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d000      	beq.n	8001c58 <__aeabi_dsub+0x288>
 8001c56:	e144      	b.n	8001ee2 <__aeabi_dsub+0x512>
 8001c58:	4660      	mov	r0, ip
 8001c5a:	4318      	orrs	r0, r3
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x290>
 8001c5e:	e190      	b.n	8001f82 <__aeabi_dsub+0x5b2>
 8001c60:	0008      	movs	r0, r1
 8001c62:	4338      	orrs	r0, r7
 8001c64:	d000      	beq.n	8001c68 <__aeabi_dsub+0x298>
 8001c66:	e1aa      	b.n	8001fbe <__aeabi_dsub+0x5ee>
 8001c68:	4661      	mov	r1, ip
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	0749      	lsls	r1, r1, #29
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	4661      	mov	r1, ip
 8001c72:	08cc      	lsrs	r4, r1, #3
 8001c74:	e027      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001c76:	0008      	movs	r0, r1
 8001c78:	4338      	orrs	r0, r7
 8001c7a:	d061      	beq.n	8001d40 <__aeabi_dsub+0x370>
 8001c7c:	1e50      	subs	r0, r2, #1
 8001c7e:	2a01      	cmp	r2, #1
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x2b4>
 8001c82:	e139      	b.n	8001ef8 <__aeabi_dsub+0x528>
 8001c84:	42a2      	cmp	r2, r4
 8001c86:	d027      	beq.n	8001cd8 <__aeabi_dsub+0x308>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	e75d      	b.n	8001b48 <__aeabi_dsub+0x178>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	391f      	subs	r1, #31
 8001c90:	40ca      	lsrs	r2, r1
 8001c92:	0011      	movs	r1, r2
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d003      	beq.n	8001ca0 <__aeabi_dsub+0x2d0>
 8001c98:	2240      	movs	r2, #64	; 0x40
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	4098      	lsls	r0, r3
 8001c9e:	4304      	orrs	r4, r0
 8001ca0:	1e63      	subs	r3, r4, #1
 8001ca2:	419c      	sbcs	r4, r3
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4699      	mov	r9, r3
 8001ca8:	4698      	mov	r8, r3
 8001caa:	430c      	orrs	r4, r1
 8001cac:	0763      	lsls	r3, r4, #29
 8001cae:	d000      	beq.n	8001cb2 <__aeabi_dsub+0x2e2>
 8001cb0:	e712      	b.n	8001ad8 <__aeabi_dsub+0x108>
 8001cb2:	464b      	mov	r3, r9
 8001cb4:	464a      	mov	r2, r9
 8001cb6:	08e4      	lsrs	r4, r4, #3
 8001cb8:	075b      	lsls	r3, r3, #29
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	08d4      	lsrs	r4, r2, #3
 8001cbe:	4642      	mov	r2, r8
 8001cc0:	4919      	ldr	r1, [pc, #100]	; (8001d28 <__aeabi_dsub+0x358>)
 8001cc2:	428a      	cmp	r2, r1
 8001cc4:	d00e      	beq.n	8001ce4 <__aeabi_dsub+0x314>
 8001cc6:	0324      	lsls	r4, r4, #12
 8001cc8:	0552      	lsls	r2, r2, #21
 8001cca:	0b24      	lsrs	r4, r4, #12
 8001ccc:	0d52      	lsrs	r2, r2, #21
 8001cce:	e722      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cd0:	000a      	movs	r2, r1
 8001cd2:	2400      	movs	r4, #0
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e71e      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	4662      	mov	r2, ip
 8001cdc:	0752      	lsls	r2, r2, #29
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	4662      	mov	r2, ip
 8001ce2:	08d4      	lsrs	r4, r2, #3
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	4322      	orrs	r2, r4
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x31c>
 8001cea:	e1fc      	b.n	80020e6 <__aeabi_dsub+0x716>
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	0312      	lsls	r2, r2, #12
 8001cf0:	4314      	orrs	r4, r2
 8001cf2:	0324      	lsls	r4, r4, #12
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <__aeabi_dsub+0x358>)
 8001cf6:	0b24      	lsrs	r4, r4, #12
 8001cf8:	e70d      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cfa:	0020      	movs	r0, r4
 8001cfc:	f000 faa4 	bl	8002248 <__clzsi2>
 8001d00:	0001      	movs	r1, r0
 8001d02:	3118      	adds	r1, #24
 8001d04:	291f      	cmp	r1, #31
 8001d06:	dc00      	bgt.n	8001d0a <__aeabi_dsub+0x33a>
 8001d08:	e6c4      	b.n	8001a94 <__aeabi_dsub+0xc4>
 8001d0a:	3808      	subs	r0, #8
 8001d0c:	4084      	lsls	r4, r0
 8001d0e:	4643      	mov	r3, r8
 8001d10:	0020      	movs	r0, r4
 8001d12:	2400      	movs	r4, #0
 8001d14:	4588      	cmp	r8, r1
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_dsub+0x34a>
 8001d18:	e6c8      	b.n	8001aac <__aeabi_dsub+0xdc>
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <__aeabi_dsub+0x35c>)
 8001d1c:	1a5b      	subs	r3, r3, r1
 8001d1e:	4010      	ands	r0, r2
 8001d20:	4698      	mov	r8, r3
 8001d22:	4681      	mov	r9, r0
 8001d24:	e6d6      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	ff7fffff 	.word	0xff7fffff
 8001d30:	fffff801 	.word	0xfffff801
 8001d34:	000007fe 	.word	0x000007fe
 8001d38:	430f      	orrs	r7, r1
 8001d3a:	1e7a      	subs	r2, r7, #1
 8001d3c:	4197      	sbcs	r7, r2
 8001d3e:	e691      	b.n	8001a64 <__aeabi_dsub+0x94>
 8001d40:	4661      	mov	r1, ip
 8001d42:	08db      	lsrs	r3, r3, #3
 8001d44:	0749      	lsls	r1, r1, #29
 8001d46:	430b      	orrs	r3, r1
 8001d48:	4661      	mov	r1, ip
 8001d4a:	08cc      	lsrs	r4, r1, #3
 8001d4c:	e7b8      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001d4e:	4640      	mov	r0, r8
 8001d50:	4cd3      	ldr	r4, [pc, #844]	; (80020a0 <__aeabi_dsub+0x6d0>)
 8001d52:	3001      	adds	r0, #1
 8001d54:	4220      	tst	r0, r4
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x38a>
 8001d58:	e0a2      	b.n	8001ea0 <__aeabi_dsub+0x4d0>
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_dsub+0x392>
 8001d60:	e101      	b.n	8001f66 <__aeabi_dsub+0x596>
 8001d62:	4660      	mov	r0, ip
 8001d64:	4318      	orrs	r0, r3
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x39a>
 8001d68:	e15e      	b.n	8002028 <__aeabi_dsub+0x658>
 8001d6a:	0008      	movs	r0, r1
 8001d6c:	4338      	orrs	r0, r7
 8001d6e:	d000      	beq.n	8001d72 <__aeabi_dsub+0x3a2>
 8001d70:	e15f      	b.n	8002032 <__aeabi_dsub+0x662>
 8001d72:	4661      	mov	r1, ip
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	0749      	lsls	r1, r1, #29
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	4661      	mov	r1, ip
 8001d7c:	08cc      	lsrs	r4, r1, #3
 8001d7e:	e7a2      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001d80:	4dc8      	ldr	r5, [pc, #800]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001d82:	42a8      	cmp	r0, r5
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x3b8>
 8001d86:	e0cf      	b.n	8001f28 <__aeabi_dsub+0x558>
 8001d88:	2580      	movs	r5, #128	; 0x80
 8001d8a:	4664      	mov	r4, ip
 8001d8c:	042d      	lsls	r5, r5, #16
 8001d8e:	432c      	orrs	r4, r5
 8001d90:	46a4      	mov	ip, r4
 8001d92:	2a38      	cmp	r2, #56	; 0x38
 8001d94:	dc56      	bgt.n	8001e44 <__aeabi_dsub+0x474>
 8001d96:	2a1f      	cmp	r2, #31
 8001d98:	dd00      	ble.n	8001d9c <__aeabi_dsub+0x3cc>
 8001d9a:	e0d1      	b.n	8001f40 <__aeabi_dsub+0x570>
 8001d9c:	2520      	movs	r5, #32
 8001d9e:	001e      	movs	r6, r3
 8001da0:	1aad      	subs	r5, r5, r2
 8001da2:	4664      	mov	r4, ip
 8001da4:	40ab      	lsls	r3, r5
 8001da6:	40ac      	lsls	r4, r5
 8001da8:	40d6      	lsrs	r6, r2
 8001daa:	1e5d      	subs	r5, r3, #1
 8001dac:	41ab      	sbcs	r3, r5
 8001dae:	4334      	orrs	r4, r6
 8001db0:	4323      	orrs	r3, r4
 8001db2:	4664      	mov	r4, ip
 8001db4:	40d4      	lsrs	r4, r2
 8001db6:	1b09      	subs	r1, r1, r4
 8001db8:	e049      	b.n	8001e4e <__aeabi_dsub+0x47e>
 8001dba:	4660      	mov	r0, ip
 8001dbc:	1bdc      	subs	r4, r3, r7
 8001dbe:	1a46      	subs	r6, r0, r1
 8001dc0:	42a3      	cmp	r3, r4
 8001dc2:	4180      	sbcs	r0, r0
 8001dc4:	4240      	negs	r0, r0
 8001dc6:	4681      	mov	r9, r0
 8001dc8:	0030      	movs	r0, r6
 8001dca:	464e      	mov	r6, r9
 8001dcc:	1b80      	subs	r0, r0, r6
 8001dce:	4681      	mov	r9, r0
 8001dd0:	0200      	lsls	r0, r0, #8
 8001dd2:	d476      	bmi.n	8001ec2 <__aeabi_dsub+0x4f2>
 8001dd4:	464b      	mov	r3, r9
 8001dd6:	4323      	orrs	r3, r4
 8001dd8:	d000      	beq.n	8001ddc <__aeabi_dsub+0x40c>
 8001dda:	e652      	b.n	8001a82 <__aeabi_dsub+0xb2>
 8001ddc:	2400      	movs	r4, #0
 8001dde:	2500      	movs	r5, #0
 8001de0:	e771      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001de2:	4339      	orrs	r1, r7
 8001de4:	000c      	movs	r4, r1
 8001de6:	1e62      	subs	r2, r4, #1
 8001de8:	4194      	sbcs	r4, r2
 8001dea:	18e4      	adds	r4, r4, r3
 8001dec:	429c      	cmp	r4, r3
 8001dee:	419b      	sbcs	r3, r3
 8001df0:	425b      	negs	r3, r3
 8001df2:	4463      	add	r3, ip
 8001df4:	4699      	mov	r9, r3
 8001df6:	464b      	mov	r3, r9
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	d400      	bmi.n	8001dfe <__aeabi_dsub+0x42e>
 8001dfc:	e756      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	469c      	mov	ip, r3
 8001e02:	4ba8      	ldr	r3, [pc, #672]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001e04:	44e0      	add	r8, ip
 8001e06:	4598      	cmp	r8, r3
 8001e08:	d038      	beq.n	8001e7c <__aeabi_dsub+0x4ac>
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	48a6      	ldr	r0, [pc, #664]	; (80020a8 <__aeabi_dsub+0x6d8>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4003      	ands	r3, r0
 8001e12:	0018      	movs	r0, r3
 8001e14:	0863      	lsrs	r3, r4, #1
 8001e16:	4014      	ands	r4, r2
 8001e18:	431c      	orrs	r4, r3
 8001e1a:	07c3      	lsls	r3, r0, #31
 8001e1c:	431c      	orrs	r4, r3
 8001e1e:	0843      	lsrs	r3, r0, #1
 8001e20:	4699      	mov	r9, r3
 8001e22:	e657      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001e24:	0010      	movs	r0, r2
 8001e26:	000e      	movs	r6, r1
 8001e28:	3820      	subs	r0, #32
 8001e2a:	40c6      	lsrs	r6, r0
 8001e2c:	2a20      	cmp	r2, #32
 8001e2e:	d004      	beq.n	8001e3a <__aeabi_dsub+0x46a>
 8001e30:	2040      	movs	r0, #64	; 0x40
 8001e32:	1a82      	subs	r2, r0, r2
 8001e34:	4091      	lsls	r1, r2
 8001e36:	430f      	orrs	r7, r1
 8001e38:	46b9      	mov	r9, r7
 8001e3a:	464f      	mov	r7, r9
 8001e3c:	1e7a      	subs	r2, r7, #1
 8001e3e:	4197      	sbcs	r7, r2
 8001e40:	4337      	orrs	r7, r6
 8001e42:	e60f      	b.n	8001a64 <__aeabi_dsub+0x94>
 8001e44:	4662      	mov	r2, ip
 8001e46:	431a      	orrs	r2, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	4193      	sbcs	r3, r2
 8001e4e:	1afc      	subs	r4, r7, r3
 8001e50:	42a7      	cmp	r7, r4
 8001e52:	41bf      	sbcs	r7, r7
 8001e54:	427f      	negs	r7, r7
 8001e56:	1bcb      	subs	r3, r1, r7
 8001e58:	4699      	mov	r9, r3
 8001e5a:	465d      	mov	r5, fp
 8001e5c:	4680      	mov	r8, r0
 8001e5e:	e608      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001e60:	4666      	mov	r6, ip
 8001e62:	431e      	orrs	r6, r3
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x498>
 8001e66:	e0be      	b.n	8001fe6 <__aeabi_dsub+0x616>
 8001e68:	1e56      	subs	r6, r2, #1
 8001e6a:	2a01      	cmp	r2, #1
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x4a0>
 8001e6e:	e109      	b.n	8002084 <__aeabi_dsub+0x6b4>
 8001e70:	4c8c      	ldr	r4, [pc, #560]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001e72:	42a2      	cmp	r2, r4
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x4a8>
 8001e76:	e119      	b.n	80020ac <__aeabi_dsub+0x6dc>
 8001e78:	0032      	movs	r2, r6
 8001e7a:	e6c1      	b.n	8001c00 <__aeabi_dsub+0x230>
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	2400      	movs	r4, #0
 8001e80:	2300      	movs	r3, #0
 8001e82:	e648      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001e84:	2020      	movs	r0, #32
 8001e86:	000c      	movs	r4, r1
 8001e88:	1a80      	subs	r0, r0, r2
 8001e8a:	003e      	movs	r6, r7
 8001e8c:	4087      	lsls	r7, r0
 8001e8e:	4084      	lsls	r4, r0
 8001e90:	40d6      	lsrs	r6, r2
 8001e92:	1e78      	subs	r0, r7, #1
 8001e94:	4187      	sbcs	r7, r0
 8001e96:	40d1      	lsrs	r1, r2
 8001e98:	4334      	orrs	r4, r6
 8001e9a:	433c      	orrs	r4, r7
 8001e9c:	448c      	add	ip, r1
 8001e9e:	e7a4      	b.n	8001dea <__aeabi_dsub+0x41a>
 8001ea0:	4a80      	ldr	r2, [pc, #512]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001ea2:	4290      	cmp	r0, r2
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x4d8>
 8001ea6:	e0e9      	b.n	800207c <__aeabi_dsub+0x6ac>
 8001ea8:	19df      	adds	r7, r3, r7
 8001eaa:	429f      	cmp	r7, r3
 8001eac:	419b      	sbcs	r3, r3
 8001eae:	4461      	add	r1, ip
 8001eb0:	425b      	negs	r3, r3
 8001eb2:	18c9      	adds	r1, r1, r3
 8001eb4:	07cc      	lsls	r4, r1, #31
 8001eb6:	087f      	lsrs	r7, r7, #1
 8001eb8:	084b      	lsrs	r3, r1, #1
 8001eba:	4699      	mov	r9, r3
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	433c      	orrs	r4, r7
 8001ec0:	e6f4      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001ec2:	1afc      	subs	r4, r7, r3
 8001ec4:	42a7      	cmp	r7, r4
 8001ec6:	41bf      	sbcs	r7, r7
 8001ec8:	4663      	mov	r3, ip
 8001eca:	427f      	negs	r7, r7
 8001ecc:	1ac9      	subs	r1, r1, r3
 8001ece:	1bcb      	subs	r3, r1, r7
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	465d      	mov	r5, fp
 8001ed4:	e5d5      	b.n	8001a82 <__aeabi_dsub+0xb2>
 8001ed6:	08ff      	lsrs	r7, r7, #3
 8001ed8:	074b      	lsls	r3, r1, #29
 8001eda:	465d      	mov	r5, fp
 8001edc:	433b      	orrs	r3, r7
 8001ede:	08cc      	lsrs	r4, r1, #3
 8001ee0:	e6ee      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	d000      	beq.n	8001eea <__aeabi_dsub+0x51a>
 8001ee8:	e082      	b.n	8001ff0 <__aeabi_dsub+0x620>
 8001eea:	000b      	movs	r3, r1
 8001eec:	433b      	orrs	r3, r7
 8001eee:	d11b      	bne.n	8001f28 <__aeabi_dsub+0x558>
 8001ef0:	2480      	movs	r4, #128	; 0x80
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	0324      	lsls	r4, r4, #12
 8001ef6:	e6f9      	b.n	8001cec <__aeabi_dsub+0x31c>
 8001ef8:	19dc      	adds	r4, r3, r7
 8001efa:	429c      	cmp	r4, r3
 8001efc:	419b      	sbcs	r3, r3
 8001efe:	4461      	add	r1, ip
 8001f00:	4689      	mov	r9, r1
 8001f02:	425b      	negs	r3, r3
 8001f04:	4499      	add	r9, r3
 8001f06:	464b      	mov	r3, r9
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	d444      	bmi.n	8001f96 <__aeabi_dsub+0x5c6>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4698      	mov	r8, r3
 8001f10:	e6cc      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001f12:	1bdc      	subs	r4, r3, r7
 8001f14:	4662      	mov	r2, ip
 8001f16:	42a3      	cmp	r3, r4
 8001f18:	419b      	sbcs	r3, r3
 8001f1a:	1a51      	subs	r1, r2, r1
 8001f1c:	425b      	negs	r3, r3
 8001f1e:	1acb      	subs	r3, r1, r3
 8001f20:	4699      	mov	r9, r3
 8001f22:	2301      	movs	r3, #1
 8001f24:	4698      	mov	r8, r3
 8001f26:	e5a4      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001f28:	08ff      	lsrs	r7, r7, #3
 8001f2a:	074b      	lsls	r3, r1, #29
 8001f2c:	465d      	mov	r5, fp
 8001f2e:	433b      	orrs	r3, r7
 8001f30:	08cc      	lsrs	r4, r1, #3
 8001f32:	e6d7      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001f34:	4662      	mov	r2, ip
 8001f36:	431a      	orrs	r2, r3
 8001f38:	0014      	movs	r4, r2
 8001f3a:	1e63      	subs	r3, r4, #1
 8001f3c:	419c      	sbcs	r4, r3
 8001f3e:	e679      	b.n	8001c34 <__aeabi_dsub+0x264>
 8001f40:	0015      	movs	r5, r2
 8001f42:	4664      	mov	r4, ip
 8001f44:	3d20      	subs	r5, #32
 8001f46:	40ec      	lsrs	r4, r5
 8001f48:	46a0      	mov	r8, r4
 8001f4a:	2a20      	cmp	r2, #32
 8001f4c:	d005      	beq.n	8001f5a <__aeabi_dsub+0x58a>
 8001f4e:	2540      	movs	r5, #64	; 0x40
 8001f50:	4664      	mov	r4, ip
 8001f52:	1aaa      	subs	r2, r5, r2
 8001f54:	4094      	lsls	r4, r2
 8001f56:	4323      	orrs	r3, r4
 8001f58:	469a      	mov	sl, r3
 8001f5a:	4654      	mov	r4, sl
 8001f5c:	1e63      	subs	r3, r4, #1
 8001f5e:	419c      	sbcs	r4, r3
 8001f60:	4643      	mov	r3, r8
 8001f62:	4323      	orrs	r3, r4
 8001f64:	e773      	b.n	8001e4e <__aeabi_dsub+0x47e>
 8001f66:	4662      	mov	r2, ip
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	d023      	beq.n	8001fb4 <__aeabi_dsub+0x5e4>
 8001f6c:	000a      	movs	r2, r1
 8001f6e:	433a      	orrs	r2, r7
 8001f70:	d000      	beq.n	8001f74 <__aeabi_dsub+0x5a4>
 8001f72:	e0a0      	b.n	80020b6 <__aeabi_dsub+0x6e6>
 8001f74:	4662      	mov	r2, ip
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	0752      	lsls	r2, r2, #29
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	4662      	mov	r2, ip
 8001f7e:	08d4      	lsrs	r4, r2, #3
 8001f80:	e6b0      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001f82:	000b      	movs	r3, r1
 8001f84:	433b      	orrs	r3, r7
 8001f86:	d100      	bne.n	8001f8a <__aeabi_dsub+0x5ba>
 8001f88:	e728      	b.n	8001ddc <__aeabi_dsub+0x40c>
 8001f8a:	08ff      	lsrs	r7, r7, #3
 8001f8c:	074b      	lsls	r3, r1, #29
 8001f8e:	465d      	mov	r5, fp
 8001f90:	433b      	orrs	r3, r7
 8001f92:	08cc      	lsrs	r4, r1, #3
 8001f94:	e697      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001f96:	2302      	movs	r3, #2
 8001f98:	4698      	mov	r8, r3
 8001f9a:	e736      	b.n	8001e0a <__aeabi_dsub+0x43a>
 8001f9c:	1afc      	subs	r4, r7, r3
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	4663      	mov	r3, ip
 8001fa4:	427f      	negs	r7, r7
 8001fa6:	1ac9      	subs	r1, r1, r3
 8001fa8:	1bcb      	subs	r3, r1, r7
 8001faa:	4699      	mov	r9, r3
 8001fac:	2301      	movs	r3, #1
 8001fae:	465d      	mov	r5, fp
 8001fb0:	4698      	mov	r8, r3
 8001fb2:	e55e      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001fb4:	074b      	lsls	r3, r1, #29
 8001fb6:	08ff      	lsrs	r7, r7, #3
 8001fb8:	433b      	orrs	r3, r7
 8001fba:	08cc      	lsrs	r4, r1, #3
 8001fbc:	e692      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001fbe:	1bdc      	subs	r4, r3, r7
 8001fc0:	4660      	mov	r0, ip
 8001fc2:	42a3      	cmp	r3, r4
 8001fc4:	41b6      	sbcs	r6, r6
 8001fc6:	1a40      	subs	r0, r0, r1
 8001fc8:	4276      	negs	r6, r6
 8001fca:	1b80      	subs	r0, r0, r6
 8001fcc:	4681      	mov	r9, r0
 8001fce:	0200      	lsls	r0, r0, #8
 8001fd0:	d560      	bpl.n	8002094 <__aeabi_dsub+0x6c4>
 8001fd2:	1afc      	subs	r4, r7, r3
 8001fd4:	42a7      	cmp	r7, r4
 8001fd6:	41bf      	sbcs	r7, r7
 8001fd8:	4663      	mov	r3, ip
 8001fda:	427f      	negs	r7, r7
 8001fdc:	1ac9      	subs	r1, r1, r3
 8001fde:	1bcb      	subs	r3, r1, r7
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	465d      	mov	r5, fp
 8001fe4:	e576      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001fe6:	08ff      	lsrs	r7, r7, #3
 8001fe8:	074b      	lsls	r3, r1, #29
 8001fea:	433b      	orrs	r3, r7
 8001fec:	08cc      	lsrs	r4, r1, #3
 8001fee:	e667      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001ff0:	000a      	movs	r2, r1
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	433a      	orrs	r2, r7
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x62a>
 8001ff8:	e66f      	b.n	8001cda <__aeabi_dsub+0x30a>
 8001ffa:	4662      	mov	r2, ip
 8001ffc:	0752      	lsls	r2, r2, #29
 8001ffe:	4313      	orrs	r3, r2
 8002000:	4662      	mov	r2, ip
 8002002:	08d4      	lsrs	r4, r2, #3
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	0312      	lsls	r2, r2, #12
 8002008:	4214      	tst	r4, r2
 800200a:	d007      	beq.n	800201c <__aeabi_dsub+0x64c>
 800200c:	08c8      	lsrs	r0, r1, #3
 800200e:	4210      	tst	r0, r2
 8002010:	d104      	bne.n	800201c <__aeabi_dsub+0x64c>
 8002012:	465d      	mov	r5, fp
 8002014:	0004      	movs	r4, r0
 8002016:	08fb      	lsrs	r3, r7, #3
 8002018:	0749      	lsls	r1, r1, #29
 800201a:	430b      	orrs	r3, r1
 800201c:	0f5a      	lsrs	r2, r3, #29
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	0752      	lsls	r2, r2, #29
 8002024:	4313      	orrs	r3, r2
 8002026:	e65d      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8002028:	074b      	lsls	r3, r1, #29
 800202a:	08ff      	lsrs	r7, r7, #3
 800202c:	433b      	orrs	r3, r7
 800202e:	08cc      	lsrs	r4, r1, #3
 8002030:	e649      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8002032:	19dc      	adds	r4, r3, r7
 8002034:	429c      	cmp	r4, r3
 8002036:	419b      	sbcs	r3, r3
 8002038:	4461      	add	r1, ip
 800203a:	4689      	mov	r9, r1
 800203c:	425b      	negs	r3, r3
 800203e:	4499      	add	r9, r3
 8002040:	464b      	mov	r3, r9
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	d400      	bmi.n	8002048 <__aeabi_dsub+0x678>
 8002046:	e631      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8002048:	464a      	mov	r2, r9
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <__aeabi_dsub+0x6d8>)
 800204c:	401a      	ands	r2, r3
 800204e:	2301      	movs	r3, #1
 8002050:	4691      	mov	r9, r2
 8002052:	4698      	mov	r8, r3
 8002054:	e62a      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8002056:	0016      	movs	r6, r2
 8002058:	4664      	mov	r4, ip
 800205a:	3e20      	subs	r6, #32
 800205c:	40f4      	lsrs	r4, r6
 800205e:	46a0      	mov	r8, r4
 8002060:	2a20      	cmp	r2, #32
 8002062:	d005      	beq.n	8002070 <__aeabi_dsub+0x6a0>
 8002064:	2640      	movs	r6, #64	; 0x40
 8002066:	4664      	mov	r4, ip
 8002068:	1ab2      	subs	r2, r6, r2
 800206a:	4094      	lsls	r4, r2
 800206c:	4323      	orrs	r3, r4
 800206e:	469a      	mov	sl, r3
 8002070:	4654      	mov	r4, sl
 8002072:	1e63      	subs	r3, r4, #1
 8002074:	419c      	sbcs	r4, r3
 8002076:	4643      	mov	r3, r8
 8002078:	431c      	orrs	r4, r3
 800207a:	e5db      	b.n	8001c34 <__aeabi_dsub+0x264>
 800207c:	0002      	movs	r2, r0
 800207e:	2400      	movs	r4, #0
 8002080:	2300      	movs	r3, #0
 8002082:	e548      	b.n	8001b16 <__aeabi_dsub+0x146>
 8002084:	19dc      	adds	r4, r3, r7
 8002086:	42bc      	cmp	r4, r7
 8002088:	41bf      	sbcs	r7, r7
 800208a:	4461      	add	r1, ip
 800208c:	4689      	mov	r9, r1
 800208e:	427f      	negs	r7, r7
 8002090:	44b9      	add	r9, r7
 8002092:	e738      	b.n	8001f06 <__aeabi_dsub+0x536>
 8002094:	464b      	mov	r3, r9
 8002096:	4323      	orrs	r3, r4
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x6cc>
 800209a:	e69f      	b.n	8001ddc <__aeabi_dsub+0x40c>
 800209c:	e606      	b.n	8001cac <__aeabi_dsub+0x2dc>
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	000007fe 	.word	0x000007fe
 80020a4:	000007ff 	.word	0x000007ff
 80020a8:	ff7fffff 	.word	0xff7fffff
 80020ac:	08ff      	lsrs	r7, r7, #3
 80020ae:	074b      	lsls	r3, r1, #29
 80020b0:	433b      	orrs	r3, r7
 80020b2:	08cc      	lsrs	r4, r1, #3
 80020b4:	e616      	b.n	8001ce4 <__aeabi_dsub+0x314>
 80020b6:	4662      	mov	r2, ip
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	0752      	lsls	r2, r2, #29
 80020bc:	4313      	orrs	r3, r2
 80020be:	4662      	mov	r2, ip
 80020c0:	08d4      	lsrs	r4, r2, #3
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	0312      	lsls	r2, r2, #12
 80020c6:	4214      	tst	r4, r2
 80020c8:	d007      	beq.n	80020da <__aeabi_dsub+0x70a>
 80020ca:	08c8      	lsrs	r0, r1, #3
 80020cc:	4210      	tst	r0, r2
 80020ce:	d104      	bne.n	80020da <__aeabi_dsub+0x70a>
 80020d0:	465d      	mov	r5, fp
 80020d2:	0004      	movs	r4, r0
 80020d4:	08fb      	lsrs	r3, r7, #3
 80020d6:	0749      	lsls	r1, r1, #29
 80020d8:	430b      	orrs	r3, r1
 80020da:	0f5a      	lsrs	r2, r3, #29
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	0752      	lsls	r2, r2, #29
 80020e0:	08db      	lsrs	r3, r3, #3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	e5fe      	b.n	8001ce4 <__aeabi_dsub+0x314>
 80020e6:	2300      	movs	r3, #0
 80020e8:	4a01      	ldr	r2, [pc, #4]	; (80020f0 <__aeabi_dsub+0x720>)
 80020ea:	001c      	movs	r4, r3
 80020ec:	e513      	b.n	8001b16 <__aeabi_dsub+0x146>
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	000007ff 	.word	0x000007ff

080020f4 <__aeabi_dcmpun>:
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	0005      	movs	r5, r0
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <__aeabi_dcmpun+0x38>)
 80020fa:	031c      	lsls	r4, r3, #12
 80020fc:	0016      	movs	r6, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	030a      	lsls	r2, r1, #12
 8002102:	0049      	lsls	r1, r1, #1
 8002104:	0b12      	lsrs	r2, r2, #12
 8002106:	0d49      	lsrs	r1, r1, #21
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	4281      	cmp	r1, r0
 800210e:	d008      	beq.n	8002122 <__aeabi_dcmpun+0x2e>
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <__aeabi_dcmpun+0x38>)
 8002112:	2000      	movs	r0, #0
 8002114:	4293      	cmp	r3, r2
 8002116:	d103      	bne.n	8002120 <__aeabi_dcmpun+0x2c>
 8002118:	0020      	movs	r0, r4
 800211a:	4330      	orrs	r0, r6
 800211c:	1e43      	subs	r3, r0, #1
 800211e:	4198      	sbcs	r0, r3
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	2001      	movs	r0, #1
 8002124:	432a      	orrs	r2, r5
 8002126:	d1fb      	bne.n	8002120 <__aeabi_dcmpun+0x2c>
 8002128:	e7f2      	b.n	8002110 <__aeabi_dcmpun+0x1c>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	000007ff 	.word	0x000007ff

08002130 <__aeabi_d2iz>:
 8002130:	000a      	movs	r2, r1
 8002132:	b530      	push	{r4, r5, lr}
 8002134:	4c13      	ldr	r4, [pc, #76]	; (8002184 <__aeabi_d2iz+0x54>)
 8002136:	0053      	lsls	r3, r2, #1
 8002138:	0309      	lsls	r1, r1, #12
 800213a:	0005      	movs	r5, r0
 800213c:	0b09      	lsrs	r1, r1, #12
 800213e:	2000      	movs	r0, #0
 8002140:	0d5b      	lsrs	r3, r3, #21
 8002142:	0fd2      	lsrs	r2, r2, #31
 8002144:	42a3      	cmp	r3, r4
 8002146:	dd04      	ble.n	8002152 <__aeabi_d2iz+0x22>
 8002148:	480f      	ldr	r0, [pc, #60]	; (8002188 <__aeabi_d2iz+0x58>)
 800214a:	4283      	cmp	r3, r0
 800214c:	dd02      	ble.n	8002154 <__aeabi_d2iz+0x24>
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <__aeabi_d2iz+0x5c>)
 8002150:	18d0      	adds	r0, r2, r3
 8002152:	bd30      	pop	{r4, r5, pc}
 8002154:	2080      	movs	r0, #128	; 0x80
 8002156:	0340      	lsls	r0, r0, #13
 8002158:	4301      	orrs	r1, r0
 800215a:	480d      	ldr	r0, [pc, #52]	; (8002190 <__aeabi_d2iz+0x60>)
 800215c:	1ac0      	subs	r0, r0, r3
 800215e:	281f      	cmp	r0, #31
 8002160:	dd08      	ble.n	8002174 <__aeabi_d2iz+0x44>
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <__aeabi_d2iz+0x64>)
 8002164:	1ac3      	subs	r3, r0, r3
 8002166:	40d9      	lsrs	r1, r3
 8002168:	000b      	movs	r3, r1
 800216a:	4258      	negs	r0, r3
 800216c:	2a00      	cmp	r2, #0
 800216e:	d1f0      	bne.n	8002152 <__aeabi_d2iz+0x22>
 8002170:	0018      	movs	r0, r3
 8002172:	e7ee      	b.n	8002152 <__aeabi_d2iz+0x22>
 8002174:	4c08      	ldr	r4, [pc, #32]	; (8002198 <__aeabi_d2iz+0x68>)
 8002176:	40c5      	lsrs	r5, r0
 8002178:	46a4      	mov	ip, r4
 800217a:	4463      	add	r3, ip
 800217c:	4099      	lsls	r1, r3
 800217e:	000b      	movs	r3, r1
 8002180:	432b      	orrs	r3, r5
 8002182:	e7f2      	b.n	800216a <__aeabi_d2iz+0x3a>
 8002184:	000003fe 	.word	0x000003fe
 8002188:	0000041d 	.word	0x0000041d
 800218c:	7fffffff 	.word	0x7fffffff
 8002190:	00000433 	.word	0x00000433
 8002194:	00000413 	.word	0x00000413
 8002198:	fffffbed 	.word	0xfffffbed

0800219c <__aeabi_i2d>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	2800      	cmp	r0, #0
 80021a0:	d016      	beq.n	80021d0 <__aeabi_i2d+0x34>
 80021a2:	17c3      	asrs	r3, r0, #31
 80021a4:	18c5      	adds	r5, r0, r3
 80021a6:	405d      	eors	r5, r3
 80021a8:	0fc4      	lsrs	r4, r0, #31
 80021aa:	0028      	movs	r0, r5
 80021ac:	f000 f84c 	bl	8002248 <__clzsi2>
 80021b0:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <__aeabi_i2d+0x5c>)
 80021b2:	1a12      	subs	r2, r2, r0
 80021b4:	280a      	cmp	r0, #10
 80021b6:	dc16      	bgt.n	80021e6 <__aeabi_i2d+0x4a>
 80021b8:	0003      	movs	r3, r0
 80021ba:	002e      	movs	r6, r5
 80021bc:	3315      	adds	r3, #21
 80021be:	409e      	lsls	r6, r3
 80021c0:	230b      	movs	r3, #11
 80021c2:	1a18      	subs	r0, r3, r0
 80021c4:	40c5      	lsrs	r5, r0
 80021c6:	0552      	lsls	r2, r2, #21
 80021c8:	032d      	lsls	r5, r5, #12
 80021ca:	0b2d      	lsrs	r5, r5, #12
 80021cc:	0d53      	lsrs	r3, r2, #21
 80021ce:	e003      	b.n	80021d8 <__aeabi_i2d+0x3c>
 80021d0:	2400      	movs	r4, #0
 80021d2:	2300      	movs	r3, #0
 80021d4:	2500      	movs	r5, #0
 80021d6:	2600      	movs	r6, #0
 80021d8:	051b      	lsls	r3, r3, #20
 80021da:	432b      	orrs	r3, r5
 80021dc:	07e4      	lsls	r4, r4, #31
 80021de:	4323      	orrs	r3, r4
 80021e0:	0030      	movs	r0, r6
 80021e2:	0019      	movs	r1, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	380b      	subs	r0, #11
 80021e8:	4085      	lsls	r5, r0
 80021ea:	0552      	lsls	r2, r2, #21
 80021ec:	032d      	lsls	r5, r5, #12
 80021ee:	2600      	movs	r6, #0
 80021f0:	0b2d      	lsrs	r5, r5, #12
 80021f2:	0d53      	lsrs	r3, r2, #21
 80021f4:	e7f0      	b.n	80021d8 <__aeabi_i2d+0x3c>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	0000041e 	.word	0x0000041e

080021fc <__aeabi_ui2d>:
 80021fc:	b510      	push	{r4, lr}
 80021fe:	1e04      	subs	r4, r0, #0
 8002200:	d010      	beq.n	8002224 <__aeabi_ui2d+0x28>
 8002202:	f000 f821 	bl	8002248 <__clzsi2>
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <__aeabi_ui2d+0x48>)
 8002208:	1a1b      	subs	r3, r3, r0
 800220a:	280a      	cmp	r0, #10
 800220c:	dc11      	bgt.n	8002232 <__aeabi_ui2d+0x36>
 800220e:	220b      	movs	r2, #11
 8002210:	0021      	movs	r1, r4
 8002212:	1a12      	subs	r2, r2, r0
 8002214:	40d1      	lsrs	r1, r2
 8002216:	3015      	adds	r0, #21
 8002218:	030a      	lsls	r2, r1, #12
 800221a:	055b      	lsls	r3, r3, #21
 800221c:	4084      	lsls	r4, r0
 800221e:	0b12      	lsrs	r2, r2, #12
 8002220:	0d5b      	lsrs	r3, r3, #21
 8002222:	e001      	b.n	8002228 <__aeabi_ui2d+0x2c>
 8002224:	2300      	movs	r3, #0
 8002226:	2200      	movs	r2, #0
 8002228:	051b      	lsls	r3, r3, #20
 800222a:	4313      	orrs	r3, r2
 800222c:	0020      	movs	r0, r4
 800222e:	0019      	movs	r1, r3
 8002230:	bd10      	pop	{r4, pc}
 8002232:	0022      	movs	r2, r4
 8002234:	380b      	subs	r0, #11
 8002236:	4082      	lsls	r2, r0
 8002238:	055b      	lsls	r3, r3, #21
 800223a:	0312      	lsls	r2, r2, #12
 800223c:	2400      	movs	r4, #0
 800223e:	0b12      	lsrs	r2, r2, #12
 8002240:	0d5b      	lsrs	r3, r3, #21
 8002242:	e7f1      	b.n	8002228 <__aeabi_ui2d+0x2c>
 8002244:	0000041e 	.word	0x0000041e

08002248 <__clzsi2>:
 8002248:	211c      	movs	r1, #28
 800224a:	2301      	movs	r3, #1
 800224c:	041b      	lsls	r3, r3, #16
 800224e:	4298      	cmp	r0, r3
 8002250:	d301      	bcc.n	8002256 <__clzsi2+0xe>
 8002252:	0c00      	lsrs	r0, r0, #16
 8002254:	3910      	subs	r1, #16
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	4298      	cmp	r0, r3
 800225a:	d301      	bcc.n	8002260 <__clzsi2+0x18>
 800225c:	0a00      	lsrs	r0, r0, #8
 800225e:	3908      	subs	r1, #8
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	4298      	cmp	r0, r3
 8002264:	d301      	bcc.n	800226a <__clzsi2+0x22>
 8002266:	0900      	lsrs	r0, r0, #4
 8002268:	3904      	subs	r1, #4
 800226a:	a202      	add	r2, pc, #8	; (adr r2, 8002274 <__clzsi2+0x2c>)
 800226c:	5c10      	ldrb	r0, [r2, r0]
 800226e:	1840      	adds	r0, r0, r1
 8002270:	4770      	bx	lr
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	02020304 	.word	0x02020304
 8002278:	01010101 	.word	0x01010101
	...

08002284 <__clzdi2>:
 8002284:	b510      	push	{r4, lr}
 8002286:	2900      	cmp	r1, #0
 8002288:	d103      	bne.n	8002292 <__clzdi2+0xe>
 800228a:	f7ff ffdd 	bl	8002248 <__clzsi2>
 800228e:	3020      	adds	r0, #32
 8002290:	e002      	b.n	8002298 <__clzdi2+0x14>
 8002292:	0008      	movs	r0, r1
 8002294:	f7ff ffd8 	bl	8002248 <__clzsi2>
 8002298:	bd10      	pop	{r4, pc}
 800229a:	46c0      	nop			; (mov r8, r8)

0800229c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022a0:	f3bf 8f4f 	dsb	sy
}
 80022a4:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a6:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <__NVIC_SystemReset+0x1c>)
 80022a8:	4a04      	ldr	r2, [pc, #16]	; (80022bc <__NVIC_SystemReset+0x20>)
 80022aa:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80022ac:	f3bf 8f4f 	dsb	sy
}
 80022b0:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	e7fd      	b.n	80022b2 <__NVIC_SystemReset+0x16>
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	e000ed00 	.word	0xe000ed00
 80022bc:	05fa0004 	.word	0x05fa0004

080022c0 <HAL_FDCAN_RxFifo0Callback>:
uint8_t ing_count = 0;
HAL_StatusTypeDef error_code;
FDCAN_ProtocolStatusTypeDef can_status;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
	if ( HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 80022ca:	4b52      	ldr	r3, [pc, #328]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 80022cc:	4a52      	ldr	r2, [pc, #328]	; (8002418 <HAL_FDCAN_RxFifo0Callback+0x158>)
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	2140      	movs	r1, #64	; 0x40
 80022d2:	f001 fbdd 	bl	8003a90 <HAL_FDCAN_GetRxMessage>
 80022d6:	1e03      	subs	r3, r0, #0
 80022d8:	d000      	beq.n	80022dc <HAL_FDCAN_RxFifo0Callback+0x1c>
 80022da:	e096      	b.n	800240a <HAL_FDCAN_RxFifo0Callback+0x14a>
		if(rchar == 49 || rchar == 50 )
 80022dc:	4b4f      	ldr	r3, [pc, #316]	; (800241c <HAL_FDCAN_RxFifo0Callback+0x15c>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b31      	cmp	r3, #49	; 0x31
 80022e2:	d004      	beq.n	80022ee <HAL_FDCAN_RxFifo0Callback+0x2e>
 80022e4:	4b4d      	ldr	r3, [pc, #308]	; (800241c <HAL_FDCAN_RxFifo0Callback+0x15c>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b32      	cmp	r3, #50	; 0x32
 80022ea:	d000      	beq.n	80022ee <HAL_FDCAN_RxFifo0Callback+0x2e>
 80022ec:	e079      	b.n	80023e2 <HAL_FDCAN_RxFifo0Callback+0x122>
		{
			if(RxData[1] == 0x41)
 80022ee:	4b49      	ldr	r3, [pc, #292]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 80022f0:	785b      	ldrb	r3, [r3, #1]
 80022f2:	2b41      	cmp	r3, #65	; 0x41
 80022f4:	d165      	bne.n	80023c2 <HAL_FDCAN_RxFifo0Callback+0x102>
			{
				pid_Response = 1;
 80022f6:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <HAL_FDCAN_RxFifo0Callback+0x160>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
				ing = 1;
 80022fc:	4b49      	ldr	r3, [pc, #292]	; (8002424 <HAL_FDCAN_RxFifo0Callback+0x164>)
 80022fe:	2201      	movs	r2, #1
 8002300:	601a      	str	r2, [r3, #0]
				if(RxData[2] == 0x0C){
 8002302:	4b44      	ldr	r3, [pc, #272]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 8002304:	789b      	ldrb	r3, [r3, #2]
 8002306:	2b0c      	cmp	r3, #12
 8002308:	d10d      	bne.n	8002326 <HAL_FDCAN_RxFifo0Callback+0x66>
					OBD2_data.RPM = ( RxData[4]|(RxData[3] << 8) )/4 ;
 800230a:	4b42      	ldr	r3, [pc, #264]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 800230c:	791b      	ldrb	r3, [r3, #4]
 800230e:	001a      	movs	r2, r3
 8002310:	4b40      	ldr	r3, [pc, #256]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 8002312:	78db      	ldrb	r3, [r3, #3]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	4313      	orrs	r3, r2
 8002318:	d500      	bpl.n	800231c <HAL_FDCAN_RxFifo0Callback+0x5c>
 800231a:	3303      	adds	r3, #3
 800231c:	109b      	asrs	r3, r3, #2
 800231e:	001a      	movs	r2, r3
 8002320:	4b41      	ldr	r3, [pc, #260]	; (8002428 <HAL_FDCAN_RxFifo0Callback+0x168>)
 8002322:	605a      	str	r2, [r3, #4]
			if(RxData[1] == 0x41)
 8002324:	e070      	b.n	8002408 <HAL_FDCAN_RxFifo0Callback+0x148>
				}
				else if(RxData[2] == 0x0D){
 8002326:	4b3b      	ldr	r3, [pc, #236]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 8002328:	789b      	ldrb	r3, [r3, #2]
 800232a:	2b0d      	cmp	r3, #13
 800232c:	d105      	bne.n	800233a <HAL_FDCAN_RxFifo0Callback+0x7a>
					OBD2_data.Speed = RxData[3];
 800232e:	4b39      	ldr	r3, [pc, #228]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 8002330:	78db      	ldrb	r3, [r3, #3]
 8002332:	001a      	movs	r2, r3
 8002334:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <HAL_FDCAN_RxFifo0Callback+0x168>)
 8002336:	601a      	str	r2, [r3, #0]
			if(RxData[1] == 0x41)
 8002338:	e066      	b.n	8002408 <HAL_FDCAN_RxFifo0Callback+0x148>
				}
				else if(RxData[2] == 0x10){
 800233a:	4b36      	ldr	r3, [pc, #216]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 800233c:	789b      	ldrb	r3, [r3, #2]
 800233e:	2b10      	cmp	r3, #16
 8002340:	d10f      	bne.n	8002362 <HAL_FDCAN_RxFifo0Callback+0xa2>
					OBD2_data.MAF = ( RxData[4]|(RxData[3] << 8) )/100 ;
 8002342:	4b34      	ldr	r3, [pc, #208]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 8002344:	791b      	ldrb	r3, [r3, #4]
 8002346:	001a      	movs	r2, r3
 8002348:	4b32      	ldr	r3, [pc, #200]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 800234a:	78db      	ldrb	r3, [r3, #3]
 800234c:	021b      	lsls	r3, r3, #8
 800234e:	4313      	orrs	r3, r2
 8002350:	2164      	movs	r1, #100	; 0x64
 8002352:	0018      	movs	r0, r3
 8002354:	f7fd ff7c 	bl	8000250 <__divsi3>
 8002358:	0003      	movs	r3, r0
 800235a:	001a      	movs	r2, r3
 800235c:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HAL_FDCAN_RxFifo0Callback+0x168>)
 800235e:	60da      	str	r2, [r3, #12]
			if(RxData[1] == 0x41)
 8002360:	e052      	b.n	8002408 <HAL_FDCAN_RxFifo0Callback+0x148>
				}
				else if(RxData[2] == 0x05){
 8002362:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 8002364:	789b      	ldrb	r3, [r3, #2]
 8002366:	2b05      	cmp	r3, #5
 8002368:	d106      	bne.n	8002378 <HAL_FDCAN_RxFifo0Callback+0xb8>
					OBD2_data.temp = (RxData[3] - 40);
 800236a:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 800236c:	78db      	ldrb	r3, [r3, #3]
 800236e:	3b28      	subs	r3, #40	; 0x28
 8002370:	001a      	movs	r2, r3
 8002372:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <HAL_FDCAN_RxFifo0Callback+0x168>)
 8002374:	609a      	str	r2, [r3, #8]
			if(RxData[1] == 0x41)
 8002376:	e047      	b.n	8002408 <HAL_FDCAN_RxFifo0Callback+0x148>
				}
				else if(RxData[2] == 0xA6){
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 800237a:	789b      	ldrb	r3, [r3, #2]
 800237c:	2ba6      	cmp	r3, #166	; 0xa6
 800237e:	d143      	bne.n	8002408 <HAL_FDCAN_RxFifo0Callback+0x148>
					OBD2_data.Odometer = (0xFFFFFFFF & ( RxData[3] << 24) ) ;
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 8002382:	78db      	ldrb	r3, [r3, #3]
 8002384:	061a      	lsls	r2, r3, #24
 8002386:	4b28      	ldr	r3, [pc, #160]	; (8002428 <HAL_FDCAN_RxFifo0Callback+0x168>)
 8002388:	611a      	str	r2, [r3, #16]
					OBD2_data.Odometer = OBD2_data.Odometer |(0xFFFFFFFF & ( RxData[4] << 16) );
 800238a:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_FDCAN_RxFifo0Callback+0x168>)
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	001a      	movs	r2, r3
 8002390:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 8002392:	791b      	ldrb	r3, [r3, #4]
 8002394:	041b      	lsls	r3, r3, #16
 8002396:	4313      	orrs	r3, r2
 8002398:	001a      	movs	r2, r3
 800239a:	4b23      	ldr	r3, [pc, #140]	; (8002428 <HAL_FDCAN_RxFifo0Callback+0x168>)
 800239c:	611a      	str	r2, [r3, #16]
					OBD2_data.Odometer = OBD2_data.Odometer |(0xFFFFFFFF & ( RxData[5] << 8) );
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_FDCAN_RxFifo0Callback+0x168>)
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	001a      	movs	r2, r3
 80023a4:	4b1b      	ldr	r3, [pc, #108]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 80023a6:	795b      	ldrb	r3, [r3, #5]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	4313      	orrs	r3, r2
 80023ac:	001a      	movs	r2, r3
 80023ae:	4b1e      	ldr	r3, [pc, #120]	; (8002428 <HAL_FDCAN_RxFifo0Callback+0x168>)
 80023b0:	611a      	str	r2, [r3, #16]
					OBD2_data.Odometer = OBD2_data.Odometer|RxData[6];
 80023b2:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <HAL_FDCAN_RxFifo0Callback+0x168>)
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	4a17      	ldr	r2, [pc, #92]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 80023b8:	7992      	ldrb	r2, [r2, #6]
 80023ba:	431a      	orrs	r2, r3
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <HAL_FDCAN_RxFifo0Callback+0x168>)
 80023be:	611a      	str	r2, [r3, #16]
			if(RxData[1] == 0x41)
 80023c0:	e022      	b.n	8002408 <HAL_FDCAN_RxFifo0Callback+0x148>
				}

			}
			else if(RxData[0] == 0x00 && RxData[1] == 0x00)
 80023c2:	4b14      	ldr	r3, [pc, #80]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d11e      	bne.n	8002408 <HAL_FDCAN_RxFifo0Callback+0x148>
 80023ca:	4b12      	ldr	r3, [pc, #72]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 80023cc:	785b      	ldrb	r3, [r3, #1]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d11a      	bne.n	8002408 <HAL_FDCAN_RxFifo0Callback+0x148>
			{
				if(cal == 0)
 80023d2:	4b16      	ldr	r3, [pc, #88]	; (800242c <HAL_FDCAN_RxFifo0Callback+0x16c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d116      	bne.n	8002408 <HAL_FDCAN_RxFifo0Callback+0x148>
				{
					pid_Response = 1;
 80023da:	4b11      	ldr	r3, [pc, #68]	; (8002420 <HAL_FDCAN_RxFifo0Callback+0x160>)
 80023dc:	2201      	movs	r2, #1
 80023de:	601a      	str	r2, [r3, #0]
			if(RxData[1] == 0x41)
 80023e0:	e012      	b.n	8002408 <HAL_FDCAN_RxFifo0Callback+0x148>
				}
			}
		}
		else{
			if(RxData[1] == 0x00)
 80023e2:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 80023e4:	785b      	ldrb	r3, [r3, #1]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10f      	bne.n	800240a <HAL_FDCAN_RxFifo0Callback+0x14a>
			{
				if(RxData[2] == 0x00)
 80023ea:	4b0a      	ldr	r3, [pc, #40]	; (8002414 <HAL_FDCAN_RxFifo0Callback+0x154>)
 80023ec:	789b      	ldrb	r3, [r3, #2]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10b      	bne.n	800240a <HAL_FDCAN_RxFifo0Callback+0x14a>
				{
//					sprintf((char *)buf,"0X%lX %02X %02X %02X %02X %02X %02X %02X %02X\n",RxHeader.Identifier ,RxData[0],RxData[1],RxData[2],RxData[3],RxData[4],RxData[5],RxData[6],RxData[7]);
//					HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen((char *)buf), 1000);
					if(cal == 0)
 80023f2:	4b0e      	ldr	r3, [pc, #56]	; (800242c <HAL_FDCAN_RxFifo0Callback+0x16c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d107      	bne.n	800240a <HAL_FDCAN_RxFifo0Callback+0x14a>
					{
						pid_Response = 1;
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_FDCAN_RxFifo0Callback+0x160>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
						can_active_mode = 0;
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_FDCAN_RxFifo0Callback+0x170>)
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 8002406:	e000      	b.n	800240a <HAL_FDCAN_RxFifo0Callback+0x14a>
			if(RxData[1] == 0x41)
 8002408:	46c0      	nop			; (mov r8, r8)
}
 800240a:	46c0      	nop			; (mov r8, r8)
 800240c:	46bd      	mov	sp, r7
 800240e:	b002      	add	sp, #8
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	2000035c 	.word	0x2000035c
 8002418:	2000032c 	.word	0x2000032c
 800241c:	20000000 	.word	0x20000000
 8002420:	20000400 	.word	0x20000400
 8002424:	20000364 	.word	0x20000364
 8002428:	200002f4 	.word	0x200002f4
 800242c:	20000404 	.word	0x20000404
 8002430:	20000408 	.word	0x20000408

08002434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002436:	46de      	mov	lr, fp
 8002438:	4657      	mov	r7, sl
 800243a:	464e      	mov	r6, r9
 800243c:	4645      	mov	r5, r8
 800243e:	b5e0      	push	{r5, r6, r7, lr}
 8002440:	b089      	sub	sp, #36	; 0x24
 8002442:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002444:	f000 fe52 	bl	80030ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002448:	f000 f96a 	bl	8002720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800244c:	f000 faa0 	bl	8002990 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8002450:	f000 fa50 	bl	80028f4 <MX_USART1_UART_Init>
  MX_FDCAN1_Init();
 8002454:	f000 f9c2 	bl	80027dc <MX_FDCAN1_Init>

  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart1, (uint8_t*) "OBD2 G0B1 Test\n",strlen("OBD2 G0B1 Test\n"), 1000);
 8002458:	23fa      	movs	r3, #250	; 0xfa
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	499e      	ldr	r1, [pc, #632]	; (80026d8 <main+0x2a4>)
 800245e:	489f      	ldr	r0, [pc, #636]	; (80026dc <main+0x2a8>)
 8002460:	220f      	movs	r2, #15
 8002462:	f003 f925 	bl	80056b0 <HAL_UART_Transmit>
  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, FDCAN_TX_BUFFER0 ); //enable interrupts
 8002466:	4b9e      	ldr	r3, [pc, #632]	; (80026e0 <main+0x2ac>)
 8002468:	2201      	movs	r2, #1
 800246a:	2101      	movs	r1, #1
 800246c:	0018      	movs	r0, r3
 800246e:	f001 fc52 	bl	8003d16 <HAL_FDCAN_ActivateNotification>
  HAL_FDCAN_Start(&hfdcan1); //start CAN
 8002472:	4b9b      	ldr	r3, [pc, #620]	; (80026e0 <main+0x2ac>)
 8002474:	0018      	movs	r0, r3
 8002476:	f001 fa9f 	bl	80039b8 <HAL_FDCAN_Start>
  HAL_UART_Receive_IT(&huart1, &rchar, 1);
 800247a:	499a      	ldr	r1, [pc, #616]	; (80026e4 <main+0x2b0>)
 800247c:	4b97      	ldr	r3, [pc, #604]	; (80026dc <main+0x2a8>)
 800247e:	2201      	movs	r2, #1
 8002480:	0018      	movs	r0, r3
 8002482:	f003 f9b1 	bl	80057e8 <HAL_UART_Receive_IT>

  HAL_UART_Transmit(&huart1, (uint8_t*) "Protocol searching\n",strlen("Protocol searching\n"), 1000);
 8002486:	23fa      	movs	r3, #250	; 0xfa
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4997      	ldr	r1, [pc, #604]	; (80026e8 <main+0x2b4>)
 800248c:	4893      	ldr	r0, [pc, #588]	; (80026dc <main+0x2a8>)
 800248e:	2213      	movs	r2, #19
 8002490:	f003 f90e 	bl	80056b0 <HAL_UART_Transmit>
  current_time  = HAL_GetTick();
 8002494:	f000 fea6 	bl	80031e4 <HAL_GetTick>
 8002498:	0002      	movs	r2, r0
 800249a:	4b94      	ldr	r3, [pc, #592]	; (80026ec <main+0x2b8>)
 800249c:	601a      	str	r2, [r3, #0]
  rchar = CAN_Protocal_detect();
 800249e:	f000 fba9 	bl	8002bf4 <CAN_Protocal_detect>
 80024a2:	0003      	movs	r3, r0
 80024a4:	001a      	movs	r2, r3
 80024a6:	4b8f      	ldr	r3, [pc, #572]	; (80026e4 <main+0x2b0>)
 80024a8:	701a      	strb	r2, [r3, #0]
  sprintf((char *)buf,"Protocol detect %d\n",rchar);
 80024aa:	4b8e      	ldr	r3, [pc, #568]	; (80026e4 <main+0x2b0>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	001a      	movs	r2, r3
 80024b0:	498f      	ldr	r1, [pc, #572]	; (80026f0 <main+0x2bc>)
 80024b2:	4b90      	ldr	r3, [pc, #576]	; (80026f4 <main+0x2c0>)
 80024b4:	0018      	movs	r0, r3
 80024b6:	f005 fe67 	bl	8008188 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen((char *)buf), 1000);
 80024ba:	4b8e      	ldr	r3, [pc, #568]	; (80026f4 <main+0x2c0>)
 80024bc:	0018      	movs	r0, r3
 80024be:	f7fd fe21 	bl	8000104 <strlen>
 80024c2:	0003      	movs	r3, r0
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	23fa      	movs	r3, #250	; 0xfa
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	498a      	ldr	r1, [pc, #552]	; (80026f4 <main+0x2c0>)
 80024cc:	4883      	ldr	r0, [pc, #524]	; (80026dc <main+0x2a8>)
 80024ce:	f003 f8ef 	bl	80056b0 <HAL_UART_Transmit>
  if(rchar == 0)
 80024d2:	4b84      	ldr	r3, [pc, #528]	; (80026e4 <main+0x2b0>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <main+0xae>
  {
	  can_active_mode = 0;
 80024da:	4b87      	ldr	r3, [pc, #540]	; (80026f8 <main+0x2c4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e002      	b.n	80024e8 <main+0xb4>
  }
  else{
	  can_active_mode = 1;
 80024e2:	4b85      	ldr	r3, [pc, #532]	; (80026f8 <main+0x2c4>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if( HAL_GetTick() - current_time > 1000 )
 80024e8:	f000 fe7c 	bl	80031e4 <HAL_GetTick>
 80024ec:	0002      	movs	r2, r0
 80024ee:	4b7f      	ldr	r3, [pc, #508]	; (80026ec <main+0x2b8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	1ad2      	subs	r2, r2, r3
 80024f4:	23fa      	movs	r3, #250	; 0xfa
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d800      	bhi.n	80024fe <main+0xca>
 80024fc:	e0e7      	b.n	80026ce <main+0x29a>
	  {
		  current_time  = HAL_GetTick();
 80024fe:	f000 fe71 	bl	80031e4 <HAL_GetTick>
 8002502:	0002      	movs	r2, r0
 8002504:	4b79      	ldr	r3, [pc, #484]	; (80026ec <main+0x2b8>)
 8002506:	601a      	str	r2, [r3, #0]
		  if(can_active_mode == 1){
 8002508:	4b7b      	ldr	r3, [pc, #492]	; (80026f8 <main+0x2c4>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d000      	beq.n	8002512 <main+0xde>
 8002510:	e0ad      	b.n	800266e <main+0x23a>
			   if(rchar == 49)
 8002512:	4b74      	ldr	r3, [pc, #464]	; (80026e4 <main+0x2b0>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b31      	cmp	r3, #49	; 0x31
 8002518:	d11e      	bne.n	8002558 <main+0x124>
				{
					pid_Response = 0;
 800251a:	4b78      	ldr	r3, [pc, #480]	; (80026fc <main+0x2c8>)
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
					_RPM(0X0C);  // RPM
 8002520:	200c      	movs	r0, #12
 8002522:	f000 fa85 	bl	8002a30 <_RPM>
					HAL_Delay (10);
 8002526:	200a      	movs	r0, #10
 8002528:	f000 fe66 	bl	80031f8 <HAL_Delay>
					_RPM(0X0D);	// SPEED
 800252c:	200d      	movs	r0, #13
 800252e:	f000 fa7f 	bl	8002a30 <_RPM>
					HAL_Delay (10);
 8002532:	200a      	movs	r0, #10
 8002534:	f000 fe60 	bl	80031f8 <HAL_Delay>
					_RPM(0X10);	// MAF
 8002538:	2010      	movs	r0, #16
 800253a:	f000 fa79 	bl	8002a30 <_RPM>
					HAL_Delay (10);
 800253e:	200a      	movs	r0, #10
 8002540:	f000 fe5a 	bl	80031f8 <HAL_Delay>
					_RPM(0X05);	// temp
 8002544:	2005      	movs	r0, #5
 8002546:	f000 fa73 	bl	8002a30 <_RPM>
					HAL_Delay (10);
 800254a:	200a      	movs	r0, #10
 800254c:	f000 fe54 	bl	80031f8 <HAL_Delay>
					_RPM(0XA6);	// Odometer
 8002550:	20a6      	movs	r0, #166	; 0xa6
 8002552:	f000 fa6d 	bl	8002a30 <_RPM>
 8002556:	e029      	b.n	80025ac <main+0x178>
				}
				else if(rchar == 50)
 8002558:	4b62      	ldr	r3, [pc, #392]	; (80026e4 <main+0x2b0>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b32      	cmp	r3, #50	; 0x32
 800255e:	d11e      	bne.n	800259e <main+0x16a>
				{
					pid_Response = 0;
 8002560:	4b66      	ldr	r3, [pc, #408]	; (80026fc <main+0x2c8>)
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
					_RPM_11(0X0C);  // RPM
 8002566:	200c      	movs	r0, #12
 8002568:	f000 faba 	bl	8002ae0 <_RPM_11>
					HAL_Delay (10);
 800256c:	200a      	movs	r0, #10
 800256e:	f000 fe43 	bl	80031f8 <HAL_Delay>
					_RPM_11(0X0D);	// SPEED
 8002572:	200d      	movs	r0, #13
 8002574:	f000 fab4 	bl	8002ae0 <_RPM_11>
					HAL_Delay (10);
 8002578:	200a      	movs	r0, #10
 800257a:	f000 fe3d 	bl	80031f8 <HAL_Delay>
					_RPM_11(0X10);	// MAF
 800257e:	2010      	movs	r0, #16
 8002580:	f000 faae 	bl	8002ae0 <_RPM_11>
					HAL_Delay (10);
 8002584:	200a      	movs	r0, #10
 8002586:	f000 fe37 	bl	80031f8 <HAL_Delay>
					_RPM_11(0X05);	// temp
 800258a:	2005      	movs	r0, #5
 800258c:	f000 faa8 	bl	8002ae0 <_RPM_11>
					HAL_Delay (10);
 8002590:	200a      	movs	r0, #10
 8002592:	f000 fe31 	bl	80031f8 <HAL_Delay>
					_RPM_11(0XA6);	// Odometer
 8002596:	20a6      	movs	r0, #166	; 0xa6
 8002598:	f000 faa2 	bl	8002ae0 <_RPM_11>
 800259c:	e006      	b.n	80025ac <main+0x178>
				}
				else{
					HAL_UART_Transmit(&huart1, (uint8_t*)"rec\n", strlen("rec\n"), 1000);
 800259e:	23fa      	movs	r3, #250	; 0xfa
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4957      	ldr	r1, [pc, #348]	; (8002700 <main+0x2cc>)
 80025a4:	484d      	ldr	r0, [pc, #308]	; (80026dc <main+0x2a8>)
 80025a6:	2204      	movs	r2, #4
 80025a8:	f003 f882 	bl	80056b0 <HAL_UART_Transmit>
				}
			   if(pid_Response ==  0){
 80025ac:	4b53      	ldr	r3, [pc, #332]	; (80026fc <main+0x2c8>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d112      	bne.n	80025da <main+0x1a6>
					ing_count++;
 80025b4:	4b53      	ldr	r3, [pc, #332]	; (8002704 <main+0x2d0>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b51      	ldr	r3, [pc, #324]	; (8002704 <main+0x2d0>)
 80025be:	701a      	strb	r2, [r3, #0]
					if(ing_count > 10)
 80025c0:	4b50      	ldr	r3, [pc, #320]	; (8002704 <main+0x2d0>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b0a      	cmp	r3, #10
 80025c6:	d908      	bls.n	80025da <main+0x1a6>
					{
						ing = 0;
 80025c8:	4b4f      	ldr	r3, [pc, #316]	; (8002708 <main+0x2d4>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
						can_active_mode = 0;
 80025ce:	4b4a      	ldr	r3, [pc, #296]	; (80026f8 <main+0x2c4>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]
						ing_count = 0;
 80025d4:	4b4b      	ldr	r3, [pc, #300]	; (8002704 <main+0x2d0>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	701a      	strb	r2, [r3, #0]
					}
			   }
			HAL_FDCAN_GetProtocolStatus(&hfdcan1, &can_status);
 80025da:	4a4c      	ldr	r2, [pc, #304]	; (800270c <main+0x2d8>)
 80025dc:	4b40      	ldr	r3, [pc, #256]	; (80026e0 <main+0x2ac>)
 80025de:	0011      	movs	r1, r2
 80025e0:	0018      	movs	r0, r3
 80025e2:	f001 fb37 	bl	8003c54 <HAL_FDCAN_GetProtocolStatus>
			if( can_status.LastErrorCode == 3 ||can_status.Warning == 1 )
 80025e6:	4b49      	ldr	r3, [pc, #292]	; (800270c <main+0x2d8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d003      	beq.n	80025f6 <main+0x1c2>
 80025ee:	4b47      	ldr	r3, [pc, #284]	; (800270c <main+0x2d8>)
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d102      	bne.n	80025fc <main+0x1c8>
			{
				ing = 0;
 80025f6:	4b44      	ldr	r3, [pc, #272]	; (8002708 <main+0x2d4>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]
			}
			sprintf((char *)buf,"%d %d %d RPM %d SPEED %d MAF %d Temp %d Odometer %f\n",ing_count,rchar ,ing , OBD2_data.RPM, OBD2_data.Speed, OBD2_data.MAF, OBD2_data.temp ,OBD2_data.Odometer/10.0);
 80025fc:	4b41      	ldr	r3, [pc, #260]	; (8002704 <main+0x2d0>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	469a      	mov	sl, r3
 8002602:	4b38      	ldr	r3, [pc, #224]	; (80026e4 <main+0x2b0>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	469b      	mov	fp, r3
 8002608:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <main+0x2d4>)
 800260a:	681c      	ldr	r4, [r3, #0]
 800260c:	4b40      	ldr	r3, [pc, #256]	; (8002710 <main+0x2dc>)
 800260e:	685d      	ldr	r5, [r3, #4]
 8002610:	4b3f      	ldr	r3, [pc, #252]	; (8002710 <main+0x2dc>)
 8002612:	681e      	ldr	r6, [r3, #0]
 8002614:	4b3e      	ldr	r3, [pc, #248]	; (8002710 <main+0x2dc>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4698      	mov	r8, r3
 800261a:	4b3d      	ldr	r3, [pc, #244]	; (8002710 <main+0x2dc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	4699      	mov	r9, r3
 8002620:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <main+0x2dc>)
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	0018      	movs	r0, r3
 8002626:	f7ff fdb9 	bl	800219c <__aeabi_i2d>
 800262a:	2200      	movs	r2, #0
 800262c:	4b39      	ldr	r3, [pc, #228]	; (8002714 <main+0x2e0>)
 800262e:	f7fe fb61 	bl	8000cf4 <__aeabi_ddiv>
 8002632:	0002      	movs	r2, r0
 8002634:	000b      	movs	r3, r1
 8002636:	4938      	ldr	r1, [pc, #224]	; (8002718 <main+0x2e4>)
 8002638:	482e      	ldr	r0, [pc, #184]	; (80026f4 <main+0x2c0>)
 800263a:	9206      	str	r2, [sp, #24]
 800263c:	9307      	str	r3, [sp, #28]
 800263e:	464b      	mov	r3, r9
 8002640:	9304      	str	r3, [sp, #16]
 8002642:	4643      	mov	r3, r8
 8002644:	9303      	str	r3, [sp, #12]
 8002646:	9602      	str	r6, [sp, #8]
 8002648:	9501      	str	r5, [sp, #4]
 800264a:	9400      	str	r4, [sp, #0]
 800264c:	465b      	mov	r3, fp
 800264e:	4652      	mov	r2, sl
 8002650:	f005 fd9a 	bl	8008188 <siprintf>
			HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen((char *)buf), 1000);
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <main+0x2c0>)
 8002656:	0018      	movs	r0, r3
 8002658:	f7fd fd54 	bl	8000104 <strlen>
 800265c:	0003      	movs	r3, r0
 800265e:	b29a      	uxth	r2, r3
 8002660:	23fa      	movs	r3, #250	; 0xfa
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4923      	ldr	r1, [pc, #140]	; (80026f4 <main+0x2c0>)
 8002666:	481d      	ldr	r0, [pc, #116]	; (80026dc <main+0x2a8>)
 8002668:	f003 f822 	bl	80056b0 <HAL_UART_Transmit>
 800266c:	e026      	b.n	80026bc <main+0x288>
		  }
		  else{
			  if(pid_Response == 1)
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <main+0x2c8>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d108      	bne.n	8002688 <main+0x254>
			  {
				  can_active_mode = 1;
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <main+0x2c4>)
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
				  rchar = CAN_Protocal_detect();
 800267c:	f000 faba 	bl	8002bf4 <CAN_Protocal_detect>
 8002680:	0003      	movs	r3, r0
 8002682:	001a      	movs	r2, r3
 8002684:	4b17      	ldr	r3, [pc, #92]	; (80026e4 <main+0x2b0>)
 8002686:	701a      	strb	r2, [r3, #0]
			  }
			  sprintf((char *)buf,"%d Img %d %d Car OFF\n",rchar, can_active_mode, ing);
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <main+0x2b0>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	001a      	movs	r2, r3
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <main+0x2c4>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	001c      	movs	r4, r3
 8002694:	4b1c      	ldr	r3, [pc, #112]	; (8002708 <main+0x2d4>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4920      	ldr	r1, [pc, #128]	; (800271c <main+0x2e8>)
 800269a:	4816      	ldr	r0, [pc, #88]	; (80026f4 <main+0x2c0>)
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	0023      	movs	r3, r4
 80026a0:	f005 fd72 	bl	8008188 <siprintf>
			  HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen((char *)buf), 1000);
 80026a4:	4b13      	ldr	r3, [pc, #76]	; (80026f4 <main+0x2c0>)
 80026a6:	0018      	movs	r0, r3
 80026a8:	f7fd fd2c 	bl	8000104 <strlen>
 80026ac:	0003      	movs	r3, r0
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	23fa      	movs	r3, #250	; 0xfa
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	490f      	ldr	r1, [pc, #60]	; (80026f4 <main+0x2c0>)
 80026b6:	4809      	ldr	r0, [pc, #36]	; (80026dc <main+0x2a8>)
 80026b8:	f002 fffa 	bl	80056b0 <HAL_UART_Transmit>
		  }
		  if(rchar == 'r')
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <main+0x2b0>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b72      	cmp	r3, #114	; 0x72
 80026c2:	d101      	bne.n	80026c8 <main+0x294>
		  {
			  NVIC_SystemReset();
 80026c4:	f7ff fdea 	bl	800229c <__NVIC_SystemReset>
		  }
		  pid_Response = 0;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <main+0x2c8>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
	   }
	  HAL_Delay(10);
 80026ce:	200a      	movs	r0, #10
 80026d0:	f000 fd92 	bl	80031f8 <HAL_Delay>
	  if( HAL_GetTick() - current_time > 1000 )
 80026d4:	e708      	b.n	80024e8 <main+0xb4>
 80026d6:	46c0      	nop			; (mov r8, r8)
 80026d8:	0800a7f8 	.word	0x0800a7f8
 80026dc:	20000260 	.word	0x20000260
 80026e0:	200001fc 	.word	0x200001fc
 80026e4:	20000000 	.word	0x20000000
 80026e8:	0800a808 	.word	0x0800a808
 80026ec:	20000438 	.word	0x20000438
 80026f0:	0800a81c 	.word	0x0800a81c
 80026f4:	20000368 	.word	0x20000368
 80026f8:	20000408 	.word	0x20000408
 80026fc:	20000400 	.word	0x20000400
 8002700:	0800a830 	.word	0x0800a830
 8002704:	20000409 	.word	0x20000409
 8002708:	20000364 	.word	0x20000364
 800270c:	2000040c 	.word	0x2000040c
 8002710:	200002f4 	.word	0x200002f4
 8002714:	40240000 	.word	0x40240000
 8002718:	0800a838 	.word	0x0800a838
 800271c:	0800a870 	.word	0x0800a870

08002720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002720:	b590      	push	{r4, r7, lr}
 8002722:	b095      	sub	sp, #84	; 0x54
 8002724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002726:	2414      	movs	r4, #20
 8002728:	193b      	adds	r3, r7, r4
 800272a:	0018      	movs	r0, r3
 800272c:	233c      	movs	r3, #60	; 0x3c
 800272e:	001a      	movs	r2, r3
 8002730:	2100      	movs	r1, #0
 8002732:	f005 f8b3 	bl	800789c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002736:	1d3b      	adds	r3, r7, #4
 8002738:	0018      	movs	r0, r3
 800273a:	2310      	movs	r3, #16
 800273c:	001a      	movs	r2, r3
 800273e:	2100      	movs	r1, #0
 8002740:	f005 f8ac 	bl	800789c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	0018      	movs	r0, r3
 800274a:	f001 ffc9 	bl	80046e0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800274e:	193b      	adds	r3, r7, r4
 8002750:	2202      	movs	r2, #2
 8002752:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002754:	193b      	adds	r3, r7, r4
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	0052      	lsls	r2, r2, #1
 800275a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800275c:	0021      	movs	r1, r4
 800275e:	187b      	adds	r3, r7, r1
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002764:	187b      	adds	r3, r7, r1
 8002766:	2240      	movs	r2, #64	; 0x40
 8002768:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800276a:	187b      	adds	r3, r7, r1
 800276c:	2202      	movs	r2, #2
 800276e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002770:	187b      	adds	r3, r7, r1
 8002772:	2202      	movs	r2, #2
 8002774:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8002776:	187b      	adds	r3, r7, r1
 8002778:	2200      	movs	r2, #0
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 9;
 800277c:	187b      	adds	r3, r7, r1
 800277e:	2209      	movs	r2, #9
 8002780:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002782:	187b      	adds	r3, r7, r1
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	0292      	lsls	r2, r2, #10
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800278a:	187b      	adds	r3, r7, r1
 800278c:	2280      	movs	r2, #128	; 0x80
 800278e:	0492      	lsls	r2, r2, #18
 8002790:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 8002792:	187b      	adds	r3, r7, r1
 8002794:	2280      	movs	r2, #128	; 0x80
 8002796:	05d2      	lsls	r2, r2, #23
 8002798:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800279a:	187b      	adds	r3, r7, r1
 800279c:	0018      	movs	r0, r3
 800279e:	f001 ffeb 	bl	8004778 <HAL_RCC_OscConfig>
 80027a2:	1e03      	subs	r3, r0, #0
 80027a4:	d001      	beq.n	80027aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80027a6:	f000 fa7b 	bl	8002ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	2207      	movs	r2, #7
 80027ae:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	2202      	movs	r2, #2
 80027b4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027b6:	1d3b      	adds	r3, r7, #4
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	2200      	movs	r2, #0
 80027c0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027c2:	1d3b      	adds	r3, r7, #4
 80027c4:	2101      	movs	r1, #1
 80027c6:	0018      	movs	r0, r3
 80027c8:	f002 fb36 	bl	8004e38 <HAL_RCC_ClockConfig>
 80027cc:	1e03      	subs	r3, r0, #0
 80027ce:	d001      	beq.n	80027d4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80027d0:	f000 fa66 	bl	8002ca0 <Error_Handler>
  }
}
 80027d4:	46c0      	nop			; (mov r8, r8)
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b015      	add	sp, #84	; 0x54
 80027da:	bd90      	pop	{r4, r7, pc}

080027dc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80027e2:	4b3e      	ldr	r3, [pc, #248]	; (80028dc <MX_FDCAN1_Init+0x100>)
 80027e4:	4a3e      	ldr	r2, [pc, #248]	; (80028e0 <MX_FDCAN1_Init+0x104>)
 80027e6:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80027e8:	4b3c      	ldr	r3, [pc, #240]	; (80028dc <MX_FDCAN1_Init+0x100>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80027ee:	4b3b      	ldr	r3, [pc, #236]	; (80028dc <MX_FDCAN1_Init+0x100>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80027f4:	4b39      	ldr	r3, [pc, #228]	; (80028dc <MX_FDCAN1_Init+0x100>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80027fa:	4b38      	ldr	r3, [pc, #224]	; (80028dc <MX_FDCAN1_Init+0x100>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002800:	4b36      	ldr	r3, [pc, #216]	; (80028dc <MX_FDCAN1_Init+0x100>)
 8002802:	2200      	movs	r2, #0
 8002804:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002806:	4b35      	ldr	r3, [pc, #212]	; (80028dc <MX_FDCAN1_Init+0x100>)
 8002808:	2200      	movs	r2, #0
 800280a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 12;
 800280c:	4b33      	ldr	r3, [pc, #204]	; (80028dc <MX_FDCAN1_Init+0x100>)
 800280e:	220c      	movs	r2, #12
 8002810:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002812:	4b32      	ldr	r3, [pc, #200]	; (80028dc <MX_FDCAN1_Init+0x100>)
 8002814:	2201      	movs	r2, #1
 8002816:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 4;
 8002818:	4b30      	ldr	r3, [pc, #192]	; (80028dc <MX_FDCAN1_Init+0x100>)
 800281a:	2204      	movs	r2, #4
 800281c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 3;
 800281e:	4b2f      	ldr	r3, [pc, #188]	; (80028dc <MX_FDCAN1_Init+0x100>)
 8002820:	2203      	movs	r2, #3
 8002822:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002824:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <MX_FDCAN1_Init+0x100>)
 8002826:	2201      	movs	r2, #1
 8002828:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800282a:	4b2c      	ldr	r3, [pc, #176]	; (80028dc <MX_FDCAN1_Init+0x100>)
 800282c:	2201      	movs	r2, #1
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002830:	4b2a      	ldr	r3, [pc, #168]	; (80028dc <MX_FDCAN1_Init+0x100>)
 8002832:	2201      	movs	r2, #1
 8002834:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002836:	4b29      	ldr	r3, [pc, #164]	; (80028dc <MX_FDCAN1_Init+0x100>)
 8002838:	2201      	movs	r2, #1
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800283c:	4b27      	ldr	r3, [pc, #156]	; (80028dc <MX_FDCAN1_Init+0x100>)
 800283e:	2200      	movs	r2, #0
 8002840:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002842:	4b26      	ldr	r3, [pc, #152]	; (80028dc <MX_FDCAN1_Init+0x100>)
 8002844:	2200      	movs	r2, #0
 8002846:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002848:	4b24      	ldr	r3, [pc, #144]	; (80028dc <MX_FDCAN1_Init+0x100>)
 800284a:	2200      	movs	r2, #0
 800284c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800284e:	4b23      	ldr	r3, [pc, #140]	; (80028dc <MX_FDCAN1_Init+0x100>)
 8002850:	0018      	movs	r0, r3
 8002852:	f000 fe9b 	bl	800358c <HAL_FDCAN_Init>
 8002856:	1e03      	subs	r3, r0, #0
 8002858:	d001      	beq.n	800285e <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800285a:	f000 fa21 	bl	8002ca0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef canfilterconfig;
  canfilterconfig.IdType = FDCAN_EXTENDED_ID;
 800285e:	003b      	movs	r3, r7
 8002860:	2280      	movs	r2, #128	; 0x80
 8002862:	05d2      	lsls	r2, r2, #23
 8002864:	601a      	str	r2, [r3, #0]
  canfilterconfig.FilterIndex = 0;
 8002866:	003b      	movs	r3, r7
 8002868:	2200      	movs	r2, #0
 800286a:	605a      	str	r2, [r3, #4]
  canfilterconfig.FilterType = FDCAN_FILTER_MASK;  // which filter bank to use from the assigned ones
 800286c:	003b      	movs	r3, r7
 800286e:	2202      	movs	r2, #2
 8002870:	609a      	str	r2, [r3, #8]
  canfilterconfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002872:	003b      	movs	r3, r7
 8002874:	2201      	movs	r2, #1
 8002876:	60da      	str	r2, [r3, #12]
  canfilterconfig.FilterID1 = 0X10;
 8002878:	003b      	movs	r3, r7
 800287a:	2210      	movs	r2, #16
 800287c:	611a      	str	r2, [r3, #16]
  canfilterconfig.FilterID2 = 0X18DAF110;
 800287e:	003b      	movs	r3, r7
 8002880:	4a18      	ldr	r2, [pc, #96]	; (80028e4 <MX_FDCAN1_Init+0x108>)
 8002882:	615a      	str	r2, [r3, #20]

  HAL_FDCAN_ConfigFilter(&hfdcan1, &canfilterconfig);
 8002884:	003a      	movs	r2, r7
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <MX_FDCAN1_Init+0x100>)
 8002888:	0011      	movs	r1, r2
 800288a:	0018      	movs	r0, r3
 800288c:	f000 ffe4 	bl	8003858 <HAL_FDCAN_ConfigFilter>

  if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK) {
 8002890:	4812      	ldr	r0, [pc, #72]	; (80028dc <MX_FDCAN1_Init+0x100>)
 8002892:	2300      	movs	r3, #0
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2300      	movs	r3, #0
 8002898:	2200      	movs	r2, #0
 800289a:	2100      	movs	r1, #0
 800289c:	f001 f839 	bl	8003912 <HAL_FDCAN_ConfigGlobalFilter>
 80028a0:	1e03      	subs	r3, r0, #0
 80028a2:	d001      	beq.n	80028a8 <MX_FDCAN1_Init+0xcc>
  		Error_Handler();
 80028a4:	f000 f9fc 	bl	8002ca0 <Error_Handler>
  }
  if( HAL_FDCAN_EnableISOMode(&hfdcan1) == HAL_OK)
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <MX_FDCAN1_Init+0x100>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f001 f862 	bl	8003974 <HAL_FDCAN_EnableISOMode>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d107      	bne.n	80028c4 <MX_FDCAN1_Init+0xe8>
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)"****EnableISOMode\n", strlen("****EnableISOMode\n"), 1000);
 80028b4:	23fa      	movs	r3, #250	; 0xfa
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	490b      	ldr	r1, [pc, #44]	; (80028e8 <MX_FDCAN1_Init+0x10c>)
 80028ba:	480c      	ldr	r0, [pc, #48]	; (80028ec <MX_FDCAN1_Init+0x110>)
 80028bc:	2212      	movs	r2, #18
 80028be:	f002 fef7 	bl	80056b0 <HAL_UART_Transmit>
  else{
	  HAL_UART_Transmit(&huart1, (uint8_t*)"****Fail ISOMode\n", strlen("****Fail ISOMode\n"), 1000);
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 80028c2:	e006      	b.n	80028d2 <MX_FDCAN1_Init+0xf6>
	  HAL_UART_Transmit(&huart1, (uint8_t*)"****Fail ISOMode\n", strlen("****Fail ISOMode\n"), 1000);
 80028c4:	23fa      	movs	r3, #250	; 0xfa
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4909      	ldr	r1, [pc, #36]	; (80028f0 <MX_FDCAN1_Init+0x114>)
 80028ca:	4808      	ldr	r0, [pc, #32]	; (80028ec <MX_FDCAN1_Init+0x110>)
 80028cc:	2211      	movs	r2, #17
 80028ce:	f002 feef 	bl	80056b0 <HAL_UART_Transmit>
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b006      	add	sp, #24
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	200001fc 	.word	0x200001fc
 80028e0:	40006400 	.word	0x40006400
 80028e4:	18daf110 	.word	0x18daf110
 80028e8:	0800a888 	.word	0x0800a888
 80028ec:	20000260 	.word	0x20000260
 80028f0:	0800a89c 	.word	0x0800a89c

080028f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028f8:	4b23      	ldr	r3, [pc, #140]	; (8002988 <MX_USART1_UART_Init+0x94>)
 80028fa:	4a24      	ldr	r2, [pc, #144]	; (800298c <MX_USART1_UART_Init+0x98>)
 80028fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <MX_USART1_UART_Init+0x94>)
 8002900:	22e1      	movs	r2, #225	; 0xe1
 8002902:	0252      	lsls	r2, r2, #9
 8002904:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002906:	4b20      	ldr	r3, [pc, #128]	; (8002988 <MX_USART1_UART_Init+0x94>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <MX_USART1_UART_Init+0x94>)
 800290e:	2200      	movs	r2, #0
 8002910:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <MX_USART1_UART_Init+0x94>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002918:	4b1b      	ldr	r3, [pc, #108]	; (8002988 <MX_USART1_UART_Init+0x94>)
 800291a:	220c      	movs	r2, #12
 800291c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <MX_USART1_UART_Init+0x94>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002924:	4b18      	ldr	r3, [pc, #96]	; (8002988 <MX_USART1_UART_Init+0x94>)
 8002926:	2200      	movs	r2, #0
 8002928:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800292a:	4b17      	ldr	r3, [pc, #92]	; (8002988 <MX_USART1_UART_Init+0x94>)
 800292c:	2200      	movs	r2, #0
 800292e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <MX_USART1_UART_Init+0x94>)
 8002932:	2200      	movs	r2, #0
 8002934:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002936:	4b14      	ldr	r3, [pc, #80]	; (8002988 <MX_USART1_UART_Init+0x94>)
 8002938:	2200      	movs	r2, #0
 800293a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <MX_USART1_UART_Init+0x94>)
 800293e:	0018      	movs	r0, r3
 8002940:	f002 fe60 	bl	8005604 <HAL_UART_Init>
 8002944:	1e03      	subs	r3, r0, #0
 8002946:	d001      	beq.n	800294c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002948:	f000 f9aa 	bl	8002ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <MX_USART1_UART_Init+0x94>)
 800294e:	2100      	movs	r1, #0
 8002950:	0018      	movs	r0, r3
 8002952:	f004 fe99 	bl	8007688 <HAL_UARTEx_SetTxFifoThreshold>
 8002956:	1e03      	subs	r3, r0, #0
 8002958:	d001      	beq.n	800295e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800295a:	f000 f9a1 	bl	8002ca0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800295e:	4b0a      	ldr	r3, [pc, #40]	; (8002988 <MX_USART1_UART_Init+0x94>)
 8002960:	2100      	movs	r1, #0
 8002962:	0018      	movs	r0, r3
 8002964:	f004 fed0 	bl	8007708 <HAL_UARTEx_SetRxFifoThreshold>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d001      	beq.n	8002970 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800296c:	f000 f998 	bl	8002ca0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <MX_USART1_UART_Init+0x94>)
 8002972:	0018      	movs	r0, r3
 8002974:	f004 fe4e 	bl	8007614 <HAL_UARTEx_DisableFifoMode>
 8002978:	1e03      	subs	r3, r0, #0
 800297a:	d001      	beq.n	8002980 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800297c:	f000 f990 	bl	8002ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002980:	46c0      	nop			; (mov r8, r8)
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	20000260 	.word	0x20000260
 800298c:	40013800 	.word	0x40013800

08002990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002990:	b590      	push	{r4, r7, lr}
 8002992:	b089      	sub	sp, #36	; 0x24
 8002994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002996:	240c      	movs	r4, #12
 8002998:	193b      	adds	r3, r7, r4
 800299a:	0018      	movs	r0, r3
 800299c:	2314      	movs	r3, #20
 800299e:	001a      	movs	r2, r3
 80029a0:	2100      	movs	r1, #0
 80029a2:	f004 ff7b 	bl	800789c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <MX_GPIO_Init+0x98>)
 80029a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029aa:	4b1f      	ldr	r3, [pc, #124]	; (8002a28 <MX_GPIO_Init+0x98>)
 80029ac:	2101      	movs	r1, #1
 80029ae:	430a      	orrs	r2, r1
 80029b0:	635a      	str	r2, [r3, #52]	; 0x34
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <MX_GPIO_Init+0x98>)
 80029b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b6:	2201      	movs	r2, #1
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029be:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <MX_GPIO_Init+0x98>)
 80029c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <MX_GPIO_Init+0x98>)
 80029c4:	2104      	movs	r1, #4
 80029c6:	430a      	orrs	r2, r1
 80029c8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ca:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <MX_GPIO_Init+0x98>)
 80029cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ce:	2204      	movs	r2, #4
 80029d0:	4013      	ands	r3, r2
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <MX_GPIO_Init+0x98>)
 80029d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029da:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <MX_GPIO_Init+0x98>)
 80029dc:	2102      	movs	r1, #2
 80029de:	430a      	orrs	r2, r1
 80029e0:	635a      	str	r2, [r3, #52]	; 0x34
 80029e2:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <MX_GPIO_Init+0x98>)
 80029e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e6:	2202      	movs	r2, #2
 80029e8:	4013      	ands	r3, r2
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <MX_GPIO_Init+0x9c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	2180      	movs	r1, #128	; 0x80
 80029f4:	0018      	movs	r0, r3
 80029f6:	f001 fe55 	bl	80046a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80029fa:	0021      	movs	r1, r4
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a02:	187b      	adds	r3, r7, r1
 8002a04:	2201      	movs	r2, #1
 8002a06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	187b      	adds	r3, r7, r1
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a0e:	187b      	adds	r3, r7, r1
 8002a10:	2200      	movs	r2, #0
 8002a12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <MX_GPIO_Init+0x9c>)
 8002a18:	0019      	movs	r1, r3
 8002a1a:	0010      	movs	r0, r2
 8002a1c:	f001 fcd6 	bl	80043cc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b009      	add	sp, #36	; 0x24
 8002a26:	bd90      	pop	{r4, r7, pc}
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	50000800 	.word	0x50000800

08002a30 <_RPM>:

/* USER CODE BEGIN 4 */
uint8_t _RPM(uint8_t _PID)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	0002      	movs	r2, r0
 8002a38:	1dfb      	adds	r3, r7, #7
 8002a3a:	701a      	strb	r2, [r3, #0]
	TxHeader.Identifier = 0x18DB33F1;   // ID
 8002a3c:	4b23      	ldr	r3, [pc, #140]	; (8002acc <_RPM+0x9c>)
 8002a3e:	4a24      	ldr	r2, [pc, #144]	; (8002ad0 <_RPM+0xa0>)
 8002a40:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_EXTENDED_ID;
 8002a42:	4b22      	ldr	r3, [pc, #136]	; (8002acc <_RPM+0x9c>)
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	05d2      	lsls	r2, r2, #23
 8002a48:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <_RPM+0x9c>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;  // data length
 8002a50:	4b1e      	ldr	r3, [pc, #120]	; (8002acc <_RPM+0x9c>)
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	0312      	lsls	r2, r2, #12
 8002a56:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002a58:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <_RPM+0x9c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	; (8002acc <_RPM+0x9c>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002a64:	4b19      	ldr	r3, [pc, #100]	; (8002acc <_RPM+0x9c>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8002a6a:	4b18      	ldr	r3, [pc, #96]	; (8002acc <_RPM+0x9c>)
 8002a6c:	2280      	movs	r2, #128	; 0x80
 8002a6e:	0412      	lsls	r2, r2, #16
 8002a70:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0x52;
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <_RPM+0x9c>)
 8002a74:	2252      	movs	r2, #82	; 0x52
 8002a76:	621a      	str	r2, [r3, #32]

	TxData[0] = 0x02;
 8002a78:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <_RPM+0xa4>)
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0X01;
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <_RPM+0xa4>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	705a      	strb	r2, [r3, #1]
	TxData[2] = _PID;
 8002a84:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <_RPM+0xa4>)
 8002a86:	1dfa      	adds	r2, r7, #7
 8002a88:	7812      	ldrb	r2, [r2, #0]
 8002a8a:	709a      	strb	r2, [r3, #2]
	error_code = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 8002a8c:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <_RPM+0xa4>)
 8002a8e:	490f      	ldr	r1, [pc, #60]	; (8002acc <_RPM+0x9c>)
 8002a90:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <_RPM+0xa8>)
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 ffb6 	bl	8003a04 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <_RPM+0xac>)
 8002a9e:	701a      	strb	r2, [r3, #0]
	error_code = Wait_Tx_Timeout(&hfdcan1, 1000);
 8002aa0:	23fa      	movs	r3, #250	; 0xfa
 8002aa2:	009a      	lsls	r2, r3, #2
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	; (8002ad8 <_RPM+0xa8>)
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f000 f871 	bl	8002b90 <Wait_Tx_Timeout>
 8002aae:	0003      	movs	r3, r0
 8002ab0:	001a      	movs	r2, r3
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <_RPM+0xac>)
 8002ab4:	701a      	strb	r2, [r3, #0]
	if (error_code == 1)
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <_RPM+0xac>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <_RPM+0x92>
	{
		return 1;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <_RPM+0x94>
	}
	return 0;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000308 	.word	0x20000308
 8002ad0:	18db33f1 	.word	0x18db33f1
 8002ad4:	20000354 	.word	0x20000354
 8002ad8:	200001fc 	.word	0x200001fc
 8002adc:	2000040a 	.word	0x2000040a

08002ae0 <_RPM_11>:

uint8_t _RPM_11(uint8_t _PID)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	1dfb      	adds	r3, r7, #7
 8002aea:	701a      	strb	r2, [r3, #0]
	TxHeader.Identifier = 0x7DF;   // ID
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <_RPM_11+0x9c>)
 8002aee:	4a24      	ldr	r2, [pc, #144]	; (8002b80 <_RPM_11+0xa0>)
 8002af0:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8002af2:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <_RPM_11+0x9c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002af8:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <_RPM_11+0x9c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;  // data length
 8002afe:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <_RPM_11+0x9c>)
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	0312      	lsls	r2, r2, #12
 8002b04:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <_RPM_11+0x9c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <_RPM_11+0x9c>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <_RPM_11+0x9c>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_STORE_TX_EVENTS;
 8002b18:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <_RPM_11+0x9c>)
 8002b1a:	2280      	movs	r2, #128	; 0x80
 8002b1c:	0412      	lsls	r2, r2, #16
 8002b1e:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0x52;
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <_RPM_11+0x9c>)
 8002b22:	2252      	movs	r2, #82	; 0x52
 8002b24:	621a      	str	r2, [r3, #32]

	TxData[0] = 0x02;
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <_RPM_11+0xa4>)
 8002b28:	2202      	movs	r2, #2
 8002b2a:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0X01;
 8002b2c:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <_RPM_11+0xa4>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	705a      	strb	r2, [r3, #1]
	TxData[2] = _PID;
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <_RPM_11+0xa4>)
 8002b34:	1dfa      	adds	r2, r7, #7
 8002b36:	7812      	ldrb	r2, [r2, #0]
 8002b38:	709a      	strb	r2, [r3, #2]
	error_code = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 8002b3a:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <_RPM_11+0xa4>)
 8002b3c:	490f      	ldr	r1, [pc, #60]	; (8002b7c <_RPM_11+0x9c>)
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <_RPM_11+0xa8>)
 8002b40:	0018      	movs	r0, r3
 8002b42:	f000 ff5f 	bl	8003a04 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002b46:	0003      	movs	r3, r0
 8002b48:	001a      	movs	r2, r3
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <_RPM_11+0xac>)
 8002b4c:	701a      	strb	r2, [r3, #0]
	error_code = Wait_Tx_Timeout(&hfdcan1, 1000);
 8002b4e:	23fa      	movs	r3, #250	; 0xfa
 8002b50:	009a      	lsls	r2, r3, #2
 8002b52:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <_RPM_11+0xa8>)
 8002b54:	0011      	movs	r1, r2
 8002b56:	0018      	movs	r0, r3
 8002b58:	f000 f81a 	bl	8002b90 <Wait_Tx_Timeout>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	001a      	movs	r2, r3
 8002b60:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <_RPM_11+0xac>)
 8002b62:	701a      	strb	r2, [r3, #0]
	if (error_code == 1)
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <_RPM_11+0xac>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d101      	bne.n	8002b70 <_RPM_11+0x90>
	{
		return 1;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <_RPM_11+0x92>
	}
	return 0;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	0018      	movs	r0, r3
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b002      	add	sp, #8
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	20000308 	.word	0x20000308
 8002b80:	000007df 	.word	0x000007df
 8002b84:	20000354 	.word	0x20000354
 8002b88:	200001fc 	.word	0x200001fc
 8002b8c:	2000040a 	.word	0x2000040a

08002b90 <Wait_Tx_Timeout>:

uint8_t Wait_Tx_Timeout(FDCAN_HandleTypeDef *hfdcan, uint32_t set_timeout)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]

	uint32_t aTickstart = 0; /* 10 */
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60fb      	str	r3, [r7, #12]
	uint32_t aTotalTick = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
	aTickstart = HAL_GetTick(); /* Get tick */
 8002ba2:	f000 fb1f 	bl	80031e4 <HAL_GetTick>
 8002ba6:	0003      	movs	r3, r0
 8002ba8:	60fb      	str	r3, [r7, #12]
	/* Check transmission occurred before timeout */
	while (HAL_FDCAN_IsTxBufferMessagePending(hfdcan, FDCAN_TX_BUFFER0) != 0) {
 8002baa:	e012      	b.n	8002bd2 <Wait_Tx_Timeout+0x42>
		aTotalTick = HAL_GetTick() - aTickstart;
 8002bac:	f000 fb1a 	bl	80031e4 <HAL_GetTick>
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	60bb      	str	r3, [r7, #8]
		if (aTotalTick > set_timeout) {
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d908      	bls.n	8002bd2 <Wait_Tx_Timeout+0x42>
			HAL_UART_Transmit(&huart1, (uint8_t*) "Tx Buf Msg Pnd-> timeout\n",strlen("Tx Buf Msg Pnd-> timeout\n"), 1000);
 8002bc0:	23fa      	movs	r3, #250	; 0xfa
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4909      	ldr	r1, [pc, #36]	; (8002bec <Wait_Tx_Timeout+0x5c>)
 8002bc6:	480a      	ldr	r0, [pc, #40]	; (8002bf0 <Wait_Tx_Timeout+0x60>)
 8002bc8:	2219      	movs	r2, #25
 8002bca:	f002 fd71 	bl	80056b0 <HAL_UART_Transmit>
			return 0;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	e007      	b.n	8002be2 <Wait_Tx_Timeout+0x52>
	while (HAL_FDCAN_IsTxBufferMessagePending(hfdcan, FDCAN_TX_BUFFER0) != 0) {
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f001 f88a 	bl	8003cf0 <HAL_FDCAN_IsTxBufferMessagePending>
 8002bdc:	1e03      	subs	r3, r0, #0
 8002bde:	d1e5      	bne.n	8002bac <Wait_Tx_Timeout+0x1c>
		}
	}
//	sprintf((char *)buf,"Tx Buf Msg Pnd->time take %d\n",(int)aTotalTick);
//	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen((char *)buf), 1000);
	return 1;
 8002be0:	2301      	movs	r3, #1
}
 8002be2:	0018      	movs	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	b004      	add	sp, #16
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	0800a8b0 	.word	0x0800a8b0
 8002bf0:	20000260 	.word	0x20000260

08002bf4 <CAN_Protocal_detect>:
	sprintf((char *)buf,"Rx Fifo Fill Lev-> time take %d\n",(int)aTotalTick);
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, strlen((char *)buf), 1000);
	return 1;
}

uint8_t CAN_Protocal_detect(void){
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
	cal = 1;
 8002bfa:	4b26      	ldr	r3, [pc, #152]	; (8002c94 <CAN_Protocal_detect+0xa0>)
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	601a      	str	r2, [r3, #0]
	pid_Response = 0;
 8002c00:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <CAN_Protocal_detect+0xa4>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	601a      	str	r2, [r3, #0]
	int i = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	607b      	str	r3, [r7, #4]
	rchar = 49;
 8002c0a:	4b24      	ldr	r3, [pc, #144]	; (8002c9c <CAN_Protocal_detect+0xa8>)
 8002c0c:	2231      	movs	r2, #49	; 0x31
 8002c0e:	701a      	strb	r2, [r3, #0]
	HAL_Delay (1000);
 8002c10:	23fa      	movs	r3, #250	; 0xfa
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	0018      	movs	r0, r3
 8002c16:	f000 faef 	bl	80031f8 <HAL_Delay>
	for(i = 0; i<5; i++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	e013      	b.n	8002c48 <CAN_Protocal_detect+0x54>
	{
		_RPM(0X0C);
 8002c20:	200c      	movs	r0, #12
 8002c22:	f7ff ff05 	bl	8002a30 <_RPM>
		 HAL_Delay (1000);
 8002c26:	23fa      	movs	r3, #250	; 0xfa
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f000 fae4 	bl	80031f8 <HAL_Delay>
		 if(pid_Response ==  1){
 8002c30:	4b19      	ldr	r3, [pc, #100]	; (8002c98 <CAN_Protocal_detect+0xa4>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d104      	bne.n	8002c42 <CAN_Protocal_detect+0x4e>
			 cal = 0;
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <CAN_Protocal_detect+0xa0>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	601a      	str	r2, [r3, #0]
			 return 49;
 8002c3e:	2331      	movs	r3, #49	; 0x31
 8002c40:	e023      	b.n	8002c8a <CAN_Protocal_detect+0x96>
	for(i = 0; i<5; i++)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	3301      	adds	r3, #1
 8002c46:	607b      	str	r3, [r7, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	dde8      	ble.n	8002c20 <CAN_Protocal_detect+0x2c>
		 }
	}
	rchar = 50;
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <CAN_Protocal_detect+0xa8>)
 8002c50:	2232      	movs	r2, #50	; 0x32
 8002c52:	701a      	strb	r2, [r3, #0]
	for(i = 0; i<5; i++)
 8002c54:	2300      	movs	r3, #0
 8002c56:	607b      	str	r3, [r7, #4]
 8002c58:	e013      	b.n	8002c82 <CAN_Protocal_detect+0x8e>
	{
		_RPM_11(0X0C);
 8002c5a:	200c      	movs	r0, #12
 8002c5c:	f7ff ff40 	bl	8002ae0 <_RPM_11>
		 HAL_Delay (1000);
 8002c60:	23fa      	movs	r3, #250	; 0xfa
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 fac7 	bl	80031f8 <HAL_Delay>
		 if(pid_Response ==  1){
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <CAN_Protocal_detect+0xa4>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d104      	bne.n	8002c7c <CAN_Protocal_detect+0x88>
			 cal = 0;
 8002c72:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <CAN_Protocal_detect+0xa0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
			 return 50;
 8002c78:	2332      	movs	r3, #50	; 0x32
 8002c7a:	e006      	b.n	8002c8a <CAN_Protocal_detect+0x96>
	for(i = 0; i<5; i++)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	607b      	str	r3, [r7, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	dde8      	ble.n	8002c5a <CAN_Protocal_detect+0x66>
		 }
	}
	return 0;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	20000404 	.word	0x20000404
 8002c98:	20000400 	.word	0x20000400
 8002c9c:	20000000 	.word	0x20000000

08002ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca4:	b672      	cpsid	i
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <Error_Handler+0x8>
	...

08002cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_MspInit+0x44>)
 8002cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb6:	4b0e      	ldr	r3, [pc, #56]	; (8002cf0 <HAL_MspInit+0x44>)
 8002cb8:	2101      	movs	r1, #1
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	; (8002cf0 <HAL_MspInit+0x44>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	607b      	str	r3, [r7, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_MspInit+0x44>)
 8002ccc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cce:	4b08      	ldr	r3, [pc, #32]	; (8002cf0 <HAL_MspInit+0x44>)
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	0549      	lsls	r1, r1, #21
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cd8:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <HAL_MspInit+0x44>)
 8002cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cdc:	2380      	movs	r3, #128	; 0x80
 8002cde:	055b      	lsls	r3, r3, #21
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b002      	add	sp, #8
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b09d      	sub	sp, #116	; 0x74
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	235c      	movs	r3, #92	; 0x5c
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	0018      	movs	r0, r3
 8002d02:	2314      	movs	r3, #20
 8002d04:	001a      	movs	r2, r3
 8002d06:	2100      	movs	r1, #0
 8002d08:	f004 fdc8 	bl	800789c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d0c:	2410      	movs	r4, #16
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	0018      	movs	r0, r3
 8002d12:	234c      	movs	r3, #76	; 0x4c
 8002d14:	001a      	movs	r2, r3
 8002d16:	2100      	movs	r1, #0
 8002d18:	f004 fdc0 	bl	800789c <memset>
  if(hfdcan->Instance==FDCAN1)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <HAL_FDCAN_MspInit+0xcc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d147      	bne.n	8002db6 <HAL_FDCAN_MspInit+0xc2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002d26:	193b      	adds	r3, r7, r4
 8002d28:	2280      	movs	r2, #128	; 0x80
 8002d2a:	0492      	lsls	r2, r2, #18
 8002d2c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002d2e:	193b      	adds	r3, r7, r4
 8002d30:	2200      	movs	r2, #0
 8002d32:	649a      	str	r2, [r3, #72]	; 0x48

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d34:	193b      	adds	r3, r7, r4
 8002d36:	0018      	movs	r0, r3
 8002d38:	f002 fa28 	bl	800518c <HAL_RCCEx_PeriphCLKConfig>
 8002d3c:	1e03      	subs	r3, r0, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002d40:	f7ff ffae 	bl	8002ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002d44:	4b1f      	ldr	r3, [pc, #124]	; (8002dc4 <HAL_FDCAN_MspInit+0xd0>)
 8002d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <HAL_FDCAN_MspInit+0xd0>)
 8002d4a:	2180      	movs	r1, #128	; 0x80
 8002d4c:	0149      	lsls	r1, r1, #5
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d52:	4b1c      	ldr	r3, [pc, #112]	; (8002dc4 <HAL_FDCAN_MspInit+0xd0>)
 8002d54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	015b      	lsls	r3, r3, #5
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d60:	4b18      	ldr	r3, [pc, #96]	; (8002dc4 <HAL_FDCAN_MspInit+0xd0>)
 8002d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d64:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <HAL_FDCAN_MspInit+0xd0>)
 8002d66:	2102      	movs	r1, #2
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	635a      	str	r2, [r3, #52]	; 0x34
 8002d6c:	4b15      	ldr	r3, [pc, #84]	; (8002dc4 <HAL_FDCAN_MspInit+0xd0>)
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d70:	2202      	movs	r2, #2
 8002d72:	4013      	ands	r3, r2
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d78:	215c      	movs	r1, #92	; 0x5c
 8002d7a:	187b      	adds	r3, r7, r1
 8002d7c:	22c0      	movs	r2, #192	; 0xc0
 8002d7e:	0092      	lsls	r2, r2, #2
 8002d80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d82:	187b      	adds	r3, r7, r1
 8002d84:	2202      	movs	r2, #2
 8002d86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	187b      	adds	r3, r7, r1
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	2200      	movs	r2, #0
 8002d92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_FDCAN1;
 8002d94:	187b      	adds	r3, r7, r1
 8002d96:	2203      	movs	r2, #3
 8002d98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d9a:	187b      	adds	r3, r7, r1
 8002d9c:	4a0a      	ldr	r2, [pc, #40]	; (8002dc8 <HAL_FDCAN_MspInit+0xd4>)
 8002d9e:	0019      	movs	r1, r3
 8002da0:	0010      	movs	r0, r2
 8002da2:	f001 fb13 	bl	80043cc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_FDCAN_IT0_IRQn, 0, 0);
 8002da6:	2200      	movs	r2, #0
 8002da8:	2100      	movs	r1, #0
 8002daa:	2015      	movs	r0, #21
 8002dac:	f000 faf4 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_FDCAN_IT0_IRQn);
 8002db0:	2015      	movs	r0, #21
 8002db2:	f000 fb06 	bl	80033c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b01d      	add	sp, #116	; 0x74
 8002dbc:	bd90      	pop	{r4, r7, pc}
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	40006400 	.word	0x40006400
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	50000400 	.word	0x50000400

08002dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b09d      	sub	sp, #116	; 0x74
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	235c      	movs	r3, #92	; 0x5c
 8002dd6:	18fb      	adds	r3, r7, r3
 8002dd8:	0018      	movs	r0, r3
 8002dda:	2314      	movs	r3, #20
 8002ddc:	001a      	movs	r2, r3
 8002dde:	2100      	movs	r1, #0
 8002de0:	f004 fd5c 	bl	800789c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002de4:	2410      	movs	r4, #16
 8002de6:	193b      	adds	r3, r7, r4
 8002de8:	0018      	movs	r0, r3
 8002dea:	234c      	movs	r3, #76	; 0x4c
 8002dec:	001a      	movs	r2, r3
 8002dee:	2100      	movs	r1, #0
 8002df0:	f004 fd54 	bl	800789c <memset>
  if(huart->Instance==USART1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <HAL_UART_MspInit+0xcc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d147      	bne.n	8002e8e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002dfe:	193b      	adds	r3, r7, r4
 8002e00:	2201      	movs	r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002e04:	193b      	adds	r3, r7, r4
 8002e06:	2200      	movs	r2, #0
 8002e08:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e0a:	193b      	adds	r3, r7, r4
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f002 f9bd 	bl	800518c <HAL_RCCEx_PeriphCLKConfig>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002e16:	f7ff ff43 	bl	8002ca0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e1a:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <HAL_UART_MspInit+0xd0>)
 8002e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e1e:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <HAL_UART_MspInit+0xd0>)
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	01c9      	lsls	r1, r1, #7
 8002e24:	430a      	orrs	r2, r1
 8002e26:	641a      	str	r2, [r3, #64]	; 0x40
 8002e28:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <HAL_UART_MspInit+0xd0>)
 8002e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e2c:	2380      	movs	r3, #128	; 0x80
 8002e2e:	01db      	lsls	r3, r3, #7
 8002e30:	4013      	ands	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	4b19      	ldr	r3, [pc, #100]	; (8002e9c <HAL_UART_MspInit+0xd0>)
 8002e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <HAL_UART_MspInit+0xd0>)
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34
 8002e42:	4b16      	ldr	r3, [pc, #88]	; (8002e9c <HAL_UART_MspInit+0xd0>)
 8002e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e46:	2201      	movs	r2, #1
 8002e48:	4013      	ands	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002e4e:	215c      	movs	r1, #92	; 0x5c
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	22c0      	movs	r2, #192	; 0xc0
 8002e54:	00d2      	lsls	r2, r2, #3
 8002e56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	187b      	adds	r3, r7, r1
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e64:	187b      	adds	r3, r7, r1
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002e6a:	187b      	adds	r3, r7, r1
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e70:	187a      	adds	r2, r7, r1
 8002e72:	23a0      	movs	r3, #160	; 0xa0
 8002e74:	05db      	lsls	r3, r3, #23
 8002e76:	0011      	movs	r1, r2
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f001 faa7 	bl	80043cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2100      	movs	r1, #0
 8002e82:	201b      	movs	r0, #27
 8002e84:	f000 fa88 	bl	8003398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e88:	201b      	movs	r0, #27
 8002e8a:	f000 fa9a 	bl	80033c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	46bd      	mov	sp, r7
 8002e92:	b01d      	add	sp, #116	; 0x74
 8002e94:	bd90      	pop	{r4, r7, pc}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	40013800 	.word	0x40013800
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ea4:	e7fe      	b.n	8002ea4 <NMI_Handler+0x4>

08002ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eaa:	e7fe      	b.n	8002eaa <HardFault_Handler+0x4>

08002eac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ec4:	f000 f97c 	bl	80031c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec8:	46c0      	nop			; (mov r8, r8)
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <TIM16_FDCAN_IT0_IRQHandler>:

/**
  * @brief This function handles TIM16, FDCAN1_IT0 and FDCAN2_IT0 Interrupt.
  */
void TIM16_FDCAN_IT0_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 0 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <TIM16_FDCAN_IT0_IRQHandler+0x14>)
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f000 fff3 	bl	8003ec2 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN TIM16_FDCAN_IT0_IRQn 1 */

  /* USER CODE END TIM16_FDCAN_IT0_IRQn 1 */
}
 8002edc:	46c0      	nop			; (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	200001fc 	.word	0x200001fc

08002ee8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002eec:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <USART1_IRQHandler+0x20>)
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f002 fce0 	bl	80058b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  HAL_UART_Receive_IT(&huart1, &rchar, 1);
 8002ef4:	4905      	ldr	r1, [pc, #20]	; (8002f0c <USART1_IRQHandler+0x24>)
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <USART1_IRQHandler+0x20>)
 8002ef8:	2201      	movs	r2, #1
 8002efa:	0018      	movs	r0, r3
 8002efc:	f002 fc74 	bl	80057e8 <HAL_UART_Receive_IT>
  /* USER CODE END USART1_IRQn 1 */
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			; (mov r8, r8)
 8002f08:	20000260 	.word	0x20000260
 8002f0c:	20000000 	.word	0x20000000

08002f10 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  return 1;
 8002f14:	2301      	movs	r3, #1
}
 8002f16:	0018      	movs	r0, r3
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <_kill>:

int _kill(int pid, int sig)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f26:	f004 fc8f 	bl	8007848 <__errno>
 8002f2a:	0003      	movs	r3, r0
 8002f2c:	2216      	movs	r2, #22
 8002f2e:	601a      	str	r2, [r3, #0]
  return -1;
 8002f30:	2301      	movs	r3, #1
 8002f32:	425b      	negs	r3, r3
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <_exit>:

void _exit (int status)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f44:	2301      	movs	r3, #1
 8002f46:	425a      	negs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	0011      	movs	r1, r2
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f7ff ffe5 	bl	8002f1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f52:	e7fe      	b.n	8002f52 <_exit+0x16>

08002f54 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	e00a      	b.n	8002f7c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f66:	e000      	b.n	8002f6a <_read+0x16>
 8002f68:	bf00      	nop
 8002f6a:	0001      	movs	r1, r0
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	60ba      	str	r2, [r7, #8]
 8002f72:	b2ca      	uxtb	r2, r1
 8002f74:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	dbf0      	blt.n	8002f66 <_read+0x12>
  }

  return len;
 8002f84:	687b      	ldr	r3, [r7, #4]
}
 8002f86:	0018      	movs	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b006      	add	sp, #24
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b086      	sub	sp, #24
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e009      	b.n	8002fb4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	1c5a      	adds	r2, r3, #1
 8002fa4:	60ba      	str	r2, [r7, #8]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	e000      	b.n	8002fae <_write+0x20>
 8002fac:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	617b      	str	r3, [r7, #20]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	dbf1      	blt.n	8002fa0 <_write+0x12>
  }
  return len;
 8002fbc:	687b      	ldr	r3, [r7, #4]
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b006      	add	sp, #24
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <_close>:

int _close(int file)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	425b      	negs	r3, r3
}
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b002      	add	sp, #8
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b082      	sub	sp, #8
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
 8002fe2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	0192      	lsls	r2, r2, #6
 8002fea:	605a      	str	r2, [r3, #4]
  return 0;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	0018      	movs	r0, r3
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	b002      	add	sp, #8
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <_isatty>:

int _isatty(int file)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b082      	sub	sp, #8
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ffe:	2301      	movs	r3, #1
}
 8003000:	0018      	movs	r0, r3
 8003002:	46bd      	mov	sp, r7
 8003004:	b002      	add	sp, #8
 8003006:	bd80      	pop	{r7, pc}

08003008 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003014:	2300      	movs	r3, #0
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b004      	add	sp, #16
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003028:	4a14      	ldr	r2, [pc, #80]	; (800307c <_sbrk+0x5c>)
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <_sbrk+0x60>)
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <_sbrk+0x64>)
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <_sbrk+0x68>)
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	18d3      	adds	r3, r2, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	429a      	cmp	r2, r3
 800304e:	d207      	bcs.n	8003060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003050:	f004 fbfa 	bl	8007848 <__errno>
 8003054:	0003      	movs	r3, r0
 8003056:	220c      	movs	r2, #12
 8003058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800305a:	2301      	movs	r3, #1
 800305c:	425b      	negs	r3, r3
 800305e:	e009      	b.n	8003074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	18d2      	adds	r2, r2, r3
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <_sbrk+0x64>)
 8003070:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	0018      	movs	r0, r3
 8003076:	46bd      	mov	sp, r7
 8003078:	b006      	add	sp, #24
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20024000 	.word	0x20024000
 8003080:	00000400 	.word	0x00000400
 8003084:	2000043c 	.word	0x2000043c
 8003088:	20000458 	.word	0x20000458

0800308c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003090:	46c0      	nop			; (mov r8, r8)
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003098:	480d      	ldr	r0, [pc, #52]	; (80030d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800309a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800309c:	f7ff fff6 	bl	800308c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80030a0:	480c      	ldr	r0, [pc, #48]	; (80030d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80030a2:	490d      	ldr	r1, [pc, #52]	; (80030d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80030a4:	4a0d      	ldr	r2, [pc, #52]	; (80030dc <LoopForever+0xe>)
  movs r3, #0
 80030a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030a8:	e002      	b.n	80030b0 <LoopCopyDataInit>

080030aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ae:	3304      	adds	r3, #4

080030b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030b4:	d3f9      	bcc.n	80030aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80030b8:	4c0a      	ldr	r4, [pc, #40]	; (80030e4 <LoopForever+0x16>)
  movs r3, #0
 80030ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030bc:	e001      	b.n	80030c2 <LoopFillZerobss>

080030be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030c0:	3204      	adds	r2, #4

080030c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030c4:	d3fb      	bcc.n	80030be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80030c6:	f004 fbc5 	bl	8007854 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80030ca:	f7ff f9b3 	bl	8002434 <main>

080030ce <LoopForever>:

LoopForever:
  b LoopForever
 80030ce:	e7fe      	b.n	80030ce <LoopForever>
  ldr   r0, =_estack
 80030d0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80030d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030d8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80030dc:	0800ae0c 	.word	0x0800ae0c
  ldr r2, =_sbss
 80030e0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80030e4:	20000454 	.word	0x20000454

080030e8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030e8:	e7fe      	b.n	80030e8 <ADC1_COMP_IRQHandler>
	...

080030ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030f2:	1dfb      	adds	r3, r7, #7
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030f8:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_Init+0x3c>)
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b0a      	ldr	r3, [pc, #40]	; (8003128 <HAL_Init+0x3c>)
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	0049      	lsls	r1, r1, #1
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003106:	2003      	movs	r0, #3
 8003108:	f000 f810 	bl	800312c <HAL_InitTick>
 800310c:	1e03      	subs	r3, r0, #0
 800310e:	d003      	beq.n	8003118 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	2201      	movs	r2, #1
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e001      	b.n	800311c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8003118:	f7ff fdc8 	bl	8002cac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800311c:	1dfb      	adds	r3, r7, #7
 800311e:	781b      	ldrb	r3, [r3, #0]
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b002      	add	sp, #8
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40022000 	.word	0x40022000

0800312c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800312c:	b590      	push	{r4, r7, lr}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003134:	230f      	movs	r3, #15
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	2200      	movs	r2, #0
 800313a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <HAL_InitTick+0x88>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02b      	beq.n	800319c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_InitTick+0x8c>)
 8003146:	681c      	ldr	r4, [r3, #0]
 8003148:	4b1a      	ldr	r3, [pc, #104]	; (80031b4 <HAL_InitTick+0x88>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	0019      	movs	r1, r3
 800314e:	23fa      	movs	r3, #250	; 0xfa
 8003150:	0098      	lsls	r0, r3, #2
 8003152:	f7fc fff3 	bl	800013c <__udivsi3>
 8003156:	0003      	movs	r3, r0
 8003158:	0019      	movs	r1, r3
 800315a:	0020      	movs	r0, r4
 800315c:	f7fc ffee 	bl	800013c <__udivsi3>
 8003160:	0003      	movs	r3, r0
 8003162:	0018      	movs	r0, r3
 8003164:	f000 f93d 	bl	80033e2 <HAL_SYSTICK_Config>
 8003168:	1e03      	subs	r3, r0, #0
 800316a:	d112      	bne.n	8003192 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d80a      	bhi.n	8003188 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	2301      	movs	r3, #1
 8003176:	425b      	negs	r3, r3
 8003178:	2200      	movs	r2, #0
 800317a:	0018      	movs	r0, r3
 800317c:	f000 f90c 	bl	8003398 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003180:	4b0e      	ldr	r3, [pc, #56]	; (80031bc <HAL_InitTick+0x90>)
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	601a      	str	r2, [r3, #0]
 8003186:	e00d      	b.n	80031a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8003188:	230f      	movs	r3, #15
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e008      	b.n	80031a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003192:	230f      	movs	r3, #15
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	2201      	movs	r2, #1
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e003      	b.n	80031a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800319c:	230f      	movs	r3, #15
 800319e:	18fb      	adds	r3, r7, r3
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80031a4:	230f      	movs	r3, #15
 80031a6:	18fb      	adds	r3, r7, r3
 80031a8:	781b      	ldrb	r3, [r3, #0]
}
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b005      	add	sp, #20
 80031b0:	bd90      	pop	{r4, r7, pc}
 80031b2:	46c0      	nop			; (mov r8, r8)
 80031b4:	2000000c 	.word	0x2000000c
 80031b8:	20000004 	.word	0x20000004
 80031bc:	20000008 	.word	0x20000008

080031c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <HAL_IncTick+0x1c>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	001a      	movs	r2, r3
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_IncTick+0x20>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	18d2      	adds	r2, r2, r3
 80031d0:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <HAL_IncTick+0x20>)
 80031d2:	601a      	str	r2, [r3, #0]
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	46c0      	nop			; (mov r8, r8)
 80031dc:	2000000c 	.word	0x2000000c
 80031e0:	20000440 	.word	0x20000440

080031e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  return uwTick;
 80031e8:	4b02      	ldr	r3, [pc, #8]	; (80031f4 <HAL_GetTick+0x10>)
 80031ea:	681b      	ldr	r3, [r3, #0]
}
 80031ec:	0018      	movs	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	20000440 	.word	0x20000440

080031f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003200:	f7ff fff0 	bl	80031e4 <HAL_GetTick>
 8003204:	0003      	movs	r3, r0
 8003206:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	3301      	adds	r3, #1
 8003210:	d005      	beq.n	800321e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003212:	4b0a      	ldr	r3, [pc, #40]	; (800323c <HAL_Delay+0x44>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	001a      	movs	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	189b      	adds	r3, r3, r2
 800321c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800321e:	46c0      	nop			; (mov r8, r8)
 8003220:	f7ff ffe0 	bl	80031e4 <HAL_GetTick>
 8003224:	0002      	movs	r2, r0
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	429a      	cmp	r2, r3
 800322e:	d8f7      	bhi.n	8003220 <HAL_Delay+0x28>
  {
  }
}
 8003230:	46c0      	nop			; (mov r8, r8)
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	46bd      	mov	sp, r7
 8003236:	b004      	add	sp, #16
 8003238:	bd80      	pop	{r7, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	2000000c 	.word	0x2000000c

08003240 <__NVIC_EnableIRQ>:
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	0002      	movs	r2, r0
 8003248:	1dfb      	adds	r3, r7, #7
 800324a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800324c:	1dfb      	adds	r3, r7, #7
 800324e:	781b      	ldrb	r3, [r3, #0]
 8003250:	2b7f      	cmp	r3, #127	; 0x7f
 8003252:	d809      	bhi.n	8003268 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003254:	1dfb      	adds	r3, r7, #7
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	001a      	movs	r2, r3
 800325a:	231f      	movs	r3, #31
 800325c:	401a      	ands	r2, r3
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <__NVIC_EnableIRQ+0x30>)
 8003260:	2101      	movs	r1, #1
 8003262:	4091      	lsls	r1, r2
 8003264:	000a      	movs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b002      	add	sp, #8
 800326e:	bd80      	pop	{r7, pc}
 8003270:	e000e100 	.word	0xe000e100

08003274 <__NVIC_SetPriority>:
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	0002      	movs	r2, r0
 800327c:	6039      	str	r1, [r7, #0]
 800327e:	1dfb      	adds	r3, r7, #7
 8003280:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003282:	1dfb      	adds	r3, r7, #7
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b7f      	cmp	r3, #127	; 0x7f
 8003288:	d828      	bhi.n	80032dc <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800328a:	4a2f      	ldr	r2, [pc, #188]	; (8003348 <__NVIC_SetPriority+0xd4>)
 800328c:	1dfb      	adds	r3, r7, #7
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	b25b      	sxtb	r3, r3
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	33c0      	adds	r3, #192	; 0xc0
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	589b      	ldr	r3, [r3, r2]
 800329a:	1dfa      	adds	r2, r7, #7
 800329c:	7812      	ldrb	r2, [r2, #0]
 800329e:	0011      	movs	r1, r2
 80032a0:	2203      	movs	r2, #3
 80032a2:	400a      	ands	r2, r1
 80032a4:	00d2      	lsls	r2, r2, #3
 80032a6:	21ff      	movs	r1, #255	; 0xff
 80032a8:	4091      	lsls	r1, r2
 80032aa:	000a      	movs	r2, r1
 80032ac:	43d2      	mvns	r2, r2
 80032ae:	401a      	ands	r2, r3
 80032b0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	019b      	lsls	r3, r3, #6
 80032b6:	22ff      	movs	r2, #255	; 0xff
 80032b8:	401a      	ands	r2, r3
 80032ba:	1dfb      	adds	r3, r7, #7
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	0018      	movs	r0, r3
 80032c0:	2303      	movs	r3, #3
 80032c2:	4003      	ands	r3, r0
 80032c4:	00db      	lsls	r3, r3, #3
 80032c6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032c8:	481f      	ldr	r0, [pc, #124]	; (8003348 <__NVIC_SetPriority+0xd4>)
 80032ca:	1dfb      	adds	r3, r7, #7
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	b25b      	sxtb	r3, r3
 80032d0:	089b      	lsrs	r3, r3, #2
 80032d2:	430a      	orrs	r2, r1
 80032d4:	33c0      	adds	r3, #192	; 0xc0
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	501a      	str	r2, [r3, r0]
}
 80032da:	e031      	b.n	8003340 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032dc:	4a1b      	ldr	r2, [pc, #108]	; (800334c <__NVIC_SetPriority+0xd8>)
 80032de:	1dfb      	adds	r3, r7, #7
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	0019      	movs	r1, r3
 80032e4:	230f      	movs	r3, #15
 80032e6:	400b      	ands	r3, r1
 80032e8:	3b08      	subs	r3, #8
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	3306      	adds	r3, #6
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	18d3      	adds	r3, r2, r3
 80032f2:	3304      	adds	r3, #4
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	1dfa      	adds	r2, r7, #7
 80032f8:	7812      	ldrb	r2, [r2, #0]
 80032fa:	0011      	movs	r1, r2
 80032fc:	2203      	movs	r2, #3
 80032fe:	400a      	ands	r2, r1
 8003300:	00d2      	lsls	r2, r2, #3
 8003302:	21ff      	movs	r1, #255	; 0xff
 8003304:	4091      	lsls	r1, r2
 8003306:	000a      	movs	r2, r1
 8003308:	43d2      	mvns	r2, r2
 800330a:	401a      	ands	r2, r3
 800330c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	019b      	lsls	r3, r3, #6
 8003312:	22ff      	movs	r2, #255	; 0xff
 8003314:	401a      	ands	r2, r3
 8003316:	1dfb      	adds	r3, r7, #7
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	0018      	movs	r0, r3
 800331c:	2303      	movs	r3, #3
 800331e:	4003      	ands	r3, r0
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003324:	4809      	ldr	r0, [pc, #36]	; (800334c <__NVIC_SetPriority+0xd8>)
 8003326:	1dfb      	adds	r3, r7, #7
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	001c      	movs	r4, r3
 800332c:	230f      	movs	r3, #15
 800332e:	4023      	ands	r3, r4
 8003330:	3b08      	subs	r3, #8
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	430a      	orrs	r2, r1
 8003336:	3306      	adds	r3, #6
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	18c3      	adds	r3, r0, r3
 800333c:	3304      	adds	r3, #4
 800333e:	601a      	str	r2, [r3, #0]
}
 8003340:	46c0      	nop			; (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b003      	add	sp, #12
 8003346:	bd90      	pop	{r4, r7, pc}
 8003348:	e000e100 	.word	0xe000e100
 800334c:	e000ed00 	.word	0xe000ed00

08003350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	1e5a      	subs	r2, r3, #1
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	045b      	lsls	r3, r3, #17
 8003360:	429a      	cmp	r2, r3
 8003362:	d301      	bcc.n	8003368 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003364:	2301      	movs	r3, #1
 8003366:	e010      	b.n	800338a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003368:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <SysTick_Config+0x44>)
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	3a01      	subs	r2, #1
 800336e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003370:	2301      	movs	r3, #1
 8003372:	425b      	negs	r3, r3
 8003374:	2103      	movs	r1, #3
 8003376:	0018      	movs	r0, r3
 8003378:	f7ff ff7c 	bl	8003274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <SysTick_Config+0x44>)
 800337e:	2200      	movs	r2, #0
 8003380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003382:	4b04      	ldr	r3, [pc, #16]	; (8003394 <SysTick_Config+0x44>)
 8003384:	2207      	movs	r2, #7
 8003386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003388:	2300      	movs	r3, #0
}
 800338a:	0018      	movs	r0, r3
 800338c:	46bd      	mov	sp, r7
 800338e:	b002      	add	sp, #8
 8003390:	bd80      	pop	{r7, pc}
 8003392:	46c0      	nop			; (mov r8, r8)
 8003394:	e000e010 	.word	0xe000e010

08003398 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	210f      	movs	r1, #15
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	1c02      	adds	r2, r0, #0
 80033a8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	b25b      	sxtb	r3, r3
 80033b2:	0011      	movs	r1, r2
 80033b4:	0018      	movs	r0, r3
 80033b6:	f7ff ff5d 	bl	8003274 <__NVIC_SetPriority>
}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	46bd      	mov	sp, r7
 80033be:	b004      	add	sp, #16
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	0002      	movs	r2, r0
 80033ca:	1dfb      	adds	r3, r7, #7
 80033cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ce:	1dfb      	adds	r3, r7, #7
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	b25b      	sxtb	r3, r3
 80033d4:	0018      	movs	r0, r3
 80033d6:	f7ff ff33 	bl	8003240 <__NVIC_EnableIRQ>
}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b002      	add	sp, #8
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	0018      	movs	r0, r3
 80033ee:	f7ff ffaf 	bl	8003350 <SysTick_Config>
 80033f2:	0003      	movs	r3, r0
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b002      	add	sp, #8
 80033fa:	bd80      	pop	{r7, pc}

080033fc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e04f      	b.n	80034ae <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2225      	movs	r2, #37	; 0x25
 8003412:	5c9b      	ldrb	r3, [r3, r2]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d008      	beq.n	800342c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2204      	movs	r2, #4
 800341e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	; 0x24
 8003424:	2100      	movs	r1, #0
 8003426:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e040      	b.n	80034ae <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	210e      	movs	r1, #14
 8003438:	438a      	bics	r2, r1
 800343a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003446:	491c      	ldr	r1, [pc, #112]	; (80034b8 <HAL_DMA_Abort+0xbc>)
 8003448:	400a      	ands	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2101      	movs	r1, #1
 8003458:	438a      	bics	r2, r1
 800345a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003460:	221c      	movs	r2, #28
 8003462:	401a      	ands	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	2101      	movs	r1, #1
 800346a:	4091      	lsls	r1, r2
 800346c:	000a      	movs	r2, r1
 800346e:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003478:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	490a      	ldr	r1, [pc, #40]	; (80034b8 <HAL_DMA_Abort+0xbc>)
 800348e:	400a      	ands	r2, r1
 8003490:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800349a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2225      	movs	r2, #37	; 0x25
 80034a0:	2101      	movs	r1, #1
 80034a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2224      	movs	r2, #36	; 0x24
 80034a8:	2100      	movs	r1, #0
 80034aa:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	0018      	movs	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	b002      	add	sp, #8
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	fffffeff 	.word	0xfffffeff

080034bc <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c4:	210f      	movs	r1, #15
 80034c6:	187b      	adds	r3, r7, r1
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2225      	movs	r2, #37	; 0x25
 80034d0:	5c9b      	ldrb	r3, [r3, r2]
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d006      	beq.n	80034e6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2204      	movs	r2, #4
 80034dc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80034de:	187b      	adds	r3, r7, r1
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	e048      	b.n	8003578 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	210e      	movs	r1, #14
 80034f2:	438a      	bics	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	438a      	bics	r2, r1
 8003504:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003510:	491d      	ldr	r1, [pc, #116]	; (8003588 <HAL_DMA_Abort_IT+0xcc>)
 8003512:	400a      	ands	r2, r1
 8003514:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	221c      	movs	r2, #28
 800351c:	401a      	ands	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	2101      	movs	r1, #1
 8003524:	4091      	lsls	r1, r2
 8003526:	000a      	movs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003532:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00c      	beq.n	8003556 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003546:	4910      	ldr	r1, [pc, #64]	; (8003588 <HAL_DMA_Abort_IT+0xcc>)
 8003548:	400a      	ands	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003554:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2225      	movs	r2, #37	; 0x25
 800355a:	2101      	movs	r1, #1
 800355c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2224      	movs	r2, #36	; 0x24
 8003562:	2100      	movs	r1, #0
 8003564:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356a:	2b00      	cmp	r3, #0
 800356c:	d004      	beq.n	8003578 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	0010      	movs	r0, r2
 8003576:	4798      	blx	r3
    }
  }
  return status;
 8003578:	230f      	movs	r3, #15
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	781b      	ldrb	r3, [r3, #0]
}
 800357e:	0018      	movs	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	b004      	add	sp, #16
 8003584:	bd80      	pop	{r7, pc}
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	fffffeff 	.word	0xfffffeff

0800358c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e14e      	b.n	800383c <HAL_FDCAN_Init+0x2b0>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	225c      	movs	r2, #92	; 0x5c
 80035a2:	5c9b      	ldrb	r3, [r3, r2]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d107      	bne.n	80035ba <HAL_FDCAN_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	225d      	movs	r2, #93	; 0x5d
 80035ae:	2100      	movs	r1, #0
 80035b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f7ff fb9d 	bl	8002cf4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2110      	movs	r1, #16
 80035c6:	438a      	bics	r2, r1
 80035c8:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035ca:	f7ff fe0b 	bl	80031e4 <HAL_GetTick>
 80035ce:	0003      	movs	r3, r0
 80035d0:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80035d2:	e012      	b.n	80035fa <HAL_FDCAN_Init+0x6e>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80035d4:	f7ff fe06 	bl	80031e4 <HAL_GetTick>
 80035d8:	0002      	movs	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b0a      	cmp	r3, #10
 80035e0:	d90b      	bls.n	80035fa <HAL_FDCAN_Init+0x6e>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e6:	2201      	movs	r2, #1
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	225c      	movs	r2, #92	; 0x5c
 80035f2:	2103      	movs	r1, #3
 80035f4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e120      	b.n	800383c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2208      	movs	r2, #8
 8003602:	4013      	ands	r3, r2
 8003604:	2b08      	cmp	r3, #8
 8003606:	d0e5      	beq.n	80035d4 <HAL_FDCAN_Init+0x48>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699a      	ldr	r2, [r3, #24]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2101      	movs	r1, #1
 8003614:	430a      	orrs	r2, r1
 8003616:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003618:	f7ff fde4 	bl	80031e4 <HAL_GetTick>
 800361c:	0003      	movs	r3, r0
 800361e:	60fb      	str	r3, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003620:	e012      	b.n	8003648 <HAL_FDCAN_Init+0xbc>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003622:	f7ff fddf 	bl	80031e4 <HAL_GetTick>
 8003626:	0002      	movs	r2, r0
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b0a      	cmp	r3, #10
 800362e:	d90b      	bls.n	8003648 <HAL_FDCAN_Init+0xbc>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003634:	2201      	movs	r2, #1
 8003636:	431a      	orrs	r2, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	225c      	movs	r2, #92	; 0x5c
 8003640:	2103      	movs	r1, #3
 8003642:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0f9      	b.n	800383c <HAL_FDCAN_Init+0x2b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	2201      	movs	r2, #1
 8003650:	4013      	ands	r3, r2
 8003652:	d0e6      	beq.n	8003622 <HAL_FDCAN_Init+0x96>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699a      	ldr	r2, [r3, #24]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2102      	movs	r1, #2
 8003660:	430a      	orrs	r2, r1
 8003662:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a76      	ldr	r2, [pc, #472]	; (8003844 <HAL_FDCAN_Init+0x2b8>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d103      	bne.n	8003676 <HAL_FDCAN_Init+0xea>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800366e:	4a76      	ldr	r2, [pc, #472]	; (8003848 <HAL_FDCAN_Init+0x2bc>)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7c1b      	ldrb	r3, [r3, #16]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d108      	bne.n	8003690 <HAL_FDCAN_Init+0x104>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2140      	movs	r1, #64	; 0x40
 800368a:	438a      	bics	r2, r1
 800368c:	619a      	str	r2, [r3, #24]
 800368e:	e007      	b.n	80036a0 <HAL_FDCAN_Init+0x114>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2140      	movs	r1, #64	; 0x40
 800369c:	430a      	orrs	r2, r1
 800369e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	7c5b      	ldrb	r3, [r3, #17]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d109      	bne.n	80036bc <HAL_FDCAN_Init+0x130>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699a      	ldr	r2, [r3, #24]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2180      	movs	r1, #128	; 0x80
 80036b4:	01c9      	lsls	r1, r1, #7
 80036b6:	430a      	orrs	r2, r1
 80036b8:	619a      	str	r2, [r3, #24]
 80036ba:	e007      	b.n	80036cc <HAL_FDCAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4961      	ldr	r1, [pc, #388]	; (800384c <HAL_FDCAN_Init+0x2c0>)
 80036c8:	400a      	ands	r2, r1
 80036ca:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	7c9b      	ldrb	r3, [r3, #18]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d108      	bne.n	80036e6 <HAL_FDCAN_Init+0x15a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	699a      	ldr	r2, [r3, #24]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	495c      	ldr	r1, [pc, #368]	; (8003850 <HAL_FDCAN_Init+0x2c4>)
 80036e0:	400a      	ands	r2, r1
 80036e2:	619a      	str	r2, [r3, #24]
 80036e4:	e008      	b.n	80036f8 <HAL_FDCAN_Init+0x16c>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	699a      	ldr	r2, [r3, #24]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	0149      	lsls	r1, r1, #5
 80036f4:	430a      	orrs	r2, r1
 80036f6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	4a55      	ldr	r2, [pc, #340]	; (8003854 <HAL_FDCAN_Init+0x2c8>)
 8003700:	4013      	ands	r3, r2
 8003702:	0019      	movs	r1, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	699a      	ldr	r2, [r3, #24]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	21a4      	movs	r1, #164	; 0xa4
 800371c:	438a      	bics	r2, r1
 800371e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	691a      	ldr	r2, [r3, #16]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2110      	movs	r1, #16
 800372c:	438a      	bics	r2, r1
 800372e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d108      	bne.n	800374a <HAL_FDCAN_Init+0x1be>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2104      	movs	r1, #4
 8003744:	430a      	orrs	r2, r1
 8003746:	619a      	str	r2, [r3, #24]
 8003748:	e02c      	b.n	80037a4 <HAL_FDCAN_Init+0x218>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d028      	beq.n	80037a4 <HAL_FDCAN_Init+0x218>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d01c      	beq.n	8003794 <HAL_FDCAN_Init+0x208>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	699a      	ldr	r2, [r3, #24]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2180      	movs	r1, #128	; 0x80
 8003766:	430a      	orrs	r2, r1
 8003768:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2110      	movs	r1, #16
 8003776:	430a      	orrs	r2, r1
 8003778:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	2b03      	cmp	r3, #3
 8003780:	d110      	bne.n	80037a4 <HAL_FDCAN_Init+0x218>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699a      	ldr	r2, [r3, #24]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2120      	movs	r1, #32
 800378e:	430a      	orrs	r2, r1
 8003790:	619a      	str	r2, [r3, #24]
 8003792:	e007      	b.n	80037a4 <HAL_FDCAN_Init+0x218>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2120      	movs	r1, #32
 80037a0:	430a      	orrs	r2, r1
 80037a2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037b4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80037bc:	431a      	orrs	r2, r3
 80037be:	0011      	movs	r1, r2
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80037cc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80037ce:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	23c0      	movs	r3, #192	; 0xc0
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	429a      	cmp	r2, r3
 80037da:	d115      	bne.n	8003808 <HAL_FDCAN_Init+0x27c>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e6:	3b01      	subs	r3, #1
 80037e8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80037ea:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	3b01      	subs	r3, #1
 80037f2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80037f4:	431a      	orrs	r2, r3
 80037f6:	0011      	movs	r1, r2
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	3b01      	subs	r3, #1
 80037fe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003804:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003806:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	22c0      	movs	r2, #192	; 0xc0
 800380e:	5899      	ldr	r1, [r3, r2]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	21c0      	movs	r1, #192	; 0xc0
 800381c:	505a      	str	r2, [r3, r1]

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	0018      	movs	r0, r3
 8003822:	f000 fceb 	bl	80041fc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	225c      	movs	r2, #92	; 0x5c
 8003836:	2101      	movs	r1, #1
 8003838:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	0018      	movs	r0, r3
 800383e:	46bd      	mov	sp, r7
 8003840:	b004      	add	sp, #16
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40006400 	.word	0x40006400
 8003848:	40006500 	.word	0x40006500
 800384c:	ffffbfff 	.word	0xffffbfff
 8003850:	ffffefff 	.word	0xffffefff
 8003854:	fffffcff 	.word	0xfffffcff

08003858 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003862:	2017      	movs	r0, #23
 8003864:	183b      	adds	r3, r7, r0
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	215c      	movs	r1, #92	; 0x5c
 800386a:	5c52      	ldrb	r2, [r2, r1]
 800386c:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800386e:	0002      	movs	r2, r0
 8003870:	18bb      	adds	r3, r7, r2
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d003      	beq.n	8003880 <HAL_FDCAN_ConfigFilter+0x28>
 8003878:	18bb      	adds	r3, r7, r2
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d13d      	bne.n	80038fc <HAL_FDCAN_ConfigFilter+0xa4>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d119      	bne.n	80038bc <HAL_FDCAN_ConfigFilter+0x64>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003894:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800389c:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	18d3      	adds	r3, r2, r3
 80038b2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e01d      	b.n	80038f8 <HAL_FDCAN_ConfigFilter+0xa0>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	075a      	lsls	r2, r3, #29
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	079a      	lsls	r2, r3, #30
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	18d3      	adds	r3, r2, r3
 80038e4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	3304      	adds	r3, #4
 80038f0:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e006      	b.n	800390a <HAL_FDCAN_ConfigFilter+0xb2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003900:	2202      	movs	r2, #2
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
  }
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	b006      	add	sp, #24
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	225c      	movs	r2, #92	; 0x5c
 8003924:	5c9b      	ldrb	r3, [r3, r2]
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b01      	cmp	r3, #1
 800392a:	d117      	bne.n	800395c <HAL_FDCAN_ConfigGlobalFilter+0x4a>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2280      	movs	r2, #128	; 0x80
 8003932:	589b      	ldr	r3, [r3, r2]
 8003934:	223f      	movs	r2, #63	; 0x3f
 8003936:	4393      	bics	r3, r2
 8003938:	0019      	movs	r1, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	011a      	lsls	r2, r3, #4
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	431a      	orrs	r2, r3
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	431a      	orrs	r2, r3
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	431a      	orrs	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	2180      	movs	r1, #128	; 0x80
 8003956:	505a      	str	r2, [r3, r1]
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e006      	b.n	800396a <HAL_FDCAN_ConfigGlobalFilter+0x58>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003960:	2204      	movs	r2, #4
 8003962:	431a      	orrs	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
  }
}
 800396a:	0018      	movs	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	b004      	add	sp, #16
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_FDCAN_EnableISOMode>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableISOMode(FDCAN_HandleTypeDef *hfdcan)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	225c      	movs	r2, #92	; 0x5c
 8003980:	5c9b      	ldrb	r3, [r3, r2]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b01      	cmp	r3, #1
 8003986:	d109      	bne.n	800399c <HAL_FDCAN_EnableISOMode+0x28>
  {
    /* Disable Non ISO protocol mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_NISO);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4908      	ldr	r1, [pc, #32]	; (80039b4 <HAL_FDCAN_EnableISOMode+0x40>)
 8003994:	400a      	ands	r2, r1
 8003996:	619a      	str	r2, [r3, #24]

    /* Return function status */
    return HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	e006      	b.n	80039aa <HAL_FDCAN_EnableISOMode+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a0:	2204      	movs	r2, #4
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
  }
}
 80039aa:	0018      	movs	r0, r3
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b002      	add	sp, #8
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	46c0      	nop			; (mov r8, r8)
 80039b4:	ffff7fff 	.word	0xffff7fff

080039b8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	225c      	movs	r2, #92	; 0x5c
 80039c4:	5c9b      	ldrb	r3, [r3, r2]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d110      	bne.n	80039ee <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	225c      	movs	r2, #92	; 0x5c
 80039d0:	2102      	movs	r1, #2
 80039d2:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2101      	movs	r1, #1
 80039e0:	438a      	bics	r2, r1
 80039e2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e006      	b.n	80039fc <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f2:	2204      	movs	r2, #4
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
  }
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b002      	add	sp, #8
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	225c      	movs	r2, #92	; 0x5c
 8003a14:	5c9b      	ldrb	r3, [r3, r2]
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d12d      	bne.n	8003a78 <HAL_FDCAN_AddMessageToTxFifoQ+0x74>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	22c4      	movs	r2, #196	; 0xc4
 8003a22:	589a      	ldr	r2, [r3, r2]
 8003a24:	2380      	movs	r3, #128	; 0x80
 8003a26:	039b      	lsls	r3, r3, #14
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d008      	beq.n	8003a3e <HAL_FDCAN_AddMessageToTxFifoQ+0x3a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a30:	2280      	movs	r2, #128	; 0x80
 8003a32:	0092      	lsls	r2, r2, #2
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e023      	b.n	8003a86 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	22c4      	movs	r2, #196	; 0xc4
 8003a44:	589b      	ldr	r3, [r3, r2]
 8003a46:	0c1b      	lsrs	r3, r3, #16
 8003a48:	2203      	movs	r2, #3
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 fc3d 	bl	80042d4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2101      	movs	r1, #1
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	4091      	lsls	r1, r2
 8003a64:	000a      	movs	r2, r1
 8003a66:	21cc      	movs	r1, #204	; 0xcc
 8003a68:	505a      	str	r2, [r3, r1]

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	409a      	lsls	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	e006      	b.n	8003a86 <HAL_FDCAN_AddMessageToTxFifoQ+0x82>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7c:	2208      	movs	r2, #8
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
  }
}
 8003a86:	0018      	movs	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b006      	add	sp, #24
 8003a8c:	bd80      	pop	{r7, pc}
	...

08003a90 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	; 0x28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a9e:	201b      	movs	r0, #27
 8003aa0:	183b      	adds	r3, r7, r0
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	215c      	movs	r1, #92	; 0x5c
 8003aa6:	5c52      	ldrb	r2, [r2, r1]
 8003aa8:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003aaa:	183b      	adds	r3, r7, r0
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d000      	beq.n	8003ab4 <HAL_FDCAN_GetRxMessage+0x24>
 8003ab2:	e0c1      	b.n	8003c38 <HAL_FDCAN_GetRxMessage+0x1a8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b40      	cmp	r3, #64	; 0x40
 8003ab8:	d121      	bne.n	8003afe <HAL_FDCAN_GetRxMessage+0x6e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2290      	movs	r2, #144	; 0x90
 8003ac0:	589b      	ldr	r3, [r3, r2]
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d108      	bne.n	8003ada <HAL_FDCAN_GetRxMessage+0x4a>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003acc:	2280      	movs	r2, #128	; 0x80
 8003ace:	0052      	lsls	r2, r2, #1
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e0b5      	b.n	8003c46 <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2290      	movs	r2, #144	; 0x90
 8003ae0:	589b      	ldr	r3, [r3, r2]
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	0013      	movs	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	189b      	adds	r3, r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	18cb      	adds	r3, r1, r3
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
 8003afc:	e020      	b.n	8003b40 <HAL_FDCAN_GetRxMessage+0xb0>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2298      	movs	r2, #152	; 0x98
 8003b04:	589b      	ldr	r3, [r3, r2]
 8003b06:	220f      	movs	r2, #15
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d108      	bne.n	8003b1e <HAL_FDCAN_GetRxMessage+0x8e>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b10:	2280      	movs	r2, #128	; 0x80
 8003b12:	0052      	lsls	r2, r2, #1
 8003b14:	431a      	orrs	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e093      	b.n	8003c46 <HAL_FDCAN_GetRxMessage+0x1b6>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2298      	movs	r2, #152	; 0x98
 8003b24:	589b      	ldr	r3, [r3, r2]
 8003b26:	0a1b      	lsrs	r3, r3, #8
 8003b28:	2203      	movs	r2, #3
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	0013      	movs	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	189b      	adds	r3, r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	18cb      	adds	r3, r1, r3
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	2380      	movs	r3, #128	; 0x80
 8003b46:	05db      	lsls	r3, r3, #23
 8003b48:	401a      	ands	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d107      	bne.n	8003b66 <HAL_FDCAN_GetRxMessage+0xd6>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	0c9b      	lsrs	r3, r3, #18
 8003b5c:	055b      	lsls	r3, r3, #21
 8003b5e:	0d5a      	lsrs	r2, r3, #21
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	e005      	b.n	8003b72 <HAL_FDCAN_GetRxMessage+0xe2>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	08da      	lsrs	r2, r3, #3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	059b      	lsls	r3, r3, #22
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	0fdb      	lsrs	r3, r3, #31
 8003b86:	07da      	lsls	r2, r3, #31
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	3304      	adds	r3, #4
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	041b      	lsls	r3, r3, #16
 8003b98:	0c1a      	lsrs	r2, r3, #16
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	23f0      	movs	r3, #240	; 0xf0
 8003ba4:	031b      	lsls	r3, r3, #12
 8003ba6:	401a      	ands	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	035b      	lsls	r3, r3, #13
 8003bb4:	401a      	ands	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	2380      	movs	r3, #128	; 0x80
 8003bc0:	039b      	lsls	r3, r3, #14
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	0e1b      	lsrs	r3, r3, #24
 8003bce:	227f      	movs	r2, #127	; 0x7f
 8003bd0:	401a      	ands	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	0fda      	lsrs	r2, r3, #31
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	3304      	adds	r3, #4
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	623b      	str	r3, [r7, #32]
 8003bee:	e00a      	b.n	8003c06 <HAL_FDCAN_GetRxMessage+0x176>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	18d2      	adds	r2, r2, r3
 8003bf6:	6839      	ldr	r1, [r7, #0]
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
 8003bfa:	18cb      	adds	r3, r1, r3
 8003bfc:	7812      	ldrb	r2, [r2, #0]
 8003bfe:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	3301      	adds	r3, #1
 8003c04:	623b      	str	r3, [r7, #32]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	0c1b      	lsrs	r3, r3, #16
 8003c0c:	4a10      	ldr	r2, [pc, #64]	; (8003c50 <HAL_FDCAN_GetRxMessage+0x1c0>)
 8003c0e:	5cd3      	ldrb	r3, [r2, r3]
 8003c10:	001a      	movs	r2, r3
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d3eb      	bcc.n	8003bf0 <HAL_FDCAN_GetRxMessage+0x160>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	d105      	bne.n	8003c2a <HAL_FDCAN_GetRxMessage+0x19a>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2194      	movs	r1, #148	; 0x94
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	505a      	str	r2, [r3, r1]
 8003c28:	e004      	b.n	8003c34 <HAL_FDCAN_GetRxMessage+0x1a4>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	219c      	movs	r1, #156	; 0x9c
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	505a      	str	r2, [r3, r1]
    }

    /* Return function status */
    return HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	e006      	b.n	8003c46 <HAL_FDCAN_GetRxMessage+0x1b6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
  }
}
 8003c46:	0018      	movs	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b00a      	add	sp, #40	; 0x28
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	0800a9ec 	.word	0x0800a9ec

08003c54 <HAL_FDCAN_GetProtocolStatus>:
  *         the configuration information for the specified FDCAN.
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(FDCAN_HandleTypeDef *hfdcan, FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2207      	movs	r2, #7
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	2207      	movs	r2, #7
 8003c76:	401a      	ands	r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2218      	movs	r2, #24
 8003c80:	401a      	ands	r2, r3
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	095b      	lsrs	r3, r3, #5
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	401a      	ands	r2, r3
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	099b      	lsrs	r3, r3, #6
 8003c96:	2201      	movs	r2, #1
 8003c98:	401a      	ands	r2, r3
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	09db      	lsrs	r3, r3, #7
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	401a      	ands	r2, r3
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	0adb      	lsrs	r3, r3, #11
 8003cae:	2201      	movs	r2, #1
 8003cb0:	401a      	ands	r2, r3
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	0b1b      	lsrs	r3, r3, #12
 8003cba:	2201      	movs	r2, #1
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	0b5b      	lsrs	r3, r3, #13
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	401a      	ands	r2, r3
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	0b9b      	lsrs	r3, r3, #14
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	401a      	ands	r2, r3
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	227f      	movs	r2, #127	; 0x7f
 8003ce0:	401a      	ands	r2, r3
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	0018      	movs	r0, r3
 8003cea:	46bd      	mov	sp, r7
 8003cec:	b004      	add	sp, #16
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_FDCAN_IsTxBufferMessagePending>:
  * @retval Status
  *          - 0 : No pending transmission request on TxBufferIndex list
  *          - 1 : Pending transmission request on TxBufferIndex.
  */
uint32_t HAL_FDCAN_IsTxBufferMessagePending(FDCAN_HandleTypeDef *hfdcan, uint32_t TxBufferIndex)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  /* Check function parameters */
  assert_param(IS_FDCAN_TX_LOCATION_LIST(TxBufferIndex));

  /* Check pending transmission request on the selected buffer */
  if ((hfdcan->Instance->TXBRP & TxBufferIndex) == 0U)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	22c8      	movs	r2, #200	; 0xc8
 8003d00:	589b      	ldr	r3, [r3, r2]
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	4013      	ands	r3, r2
 8003d06:	d101      	bne.n	8003d0c <HAL_FDCAN_IsTxBufferMessagePending+0x1c>
  {
    return 0;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e000      	b.n	8003d0e <HAL_FDCAN_IsTxBufferMessagePending+0x1e>
  }
  return 1;
 8003d0c:	2301      	movs	r3, #1
}
 8003d0e:	0018      	movs	r0, r3
 8003d10:	46bd      	mov	sp, r7
 8003d12:	b002      	add	sp, #8
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b086      	sub	sp, #24
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	60f8      	str	r0, [r7, #12]
 8003d1e:	60b9      	str	r1, [r7, #8]
 8003d20:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003d22:	2017      	movs	r0, #23
 8003d24:	183b      	adds	r3, r7, r0
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	215c      	movs	r1, #92	; 0x5c
 8003d2a:	5c52      	ldrb	r2, [r2, r1]
 8003d2c:	701a      	strb	r2, [r3, #0]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003d2e:	0002      	movs	r2, r0
 8003d30:	18bb      	adds	r3, r7, r2
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d004      	beq.n	8003d42 <HAL_FDCAN_ActivateNotification+0x2c>
 8003d38:	18bb      	adds	r3, r7, r2
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d000      	beq.n	8003d42 <HAL_FDCAN_ActivateNotification+0x2c>
 8003d40:	e0b4      	b.n	8003eac <HAL_FDCAN_ActivateNotification+0x196>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d48:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	2207      	movs	r2, #7
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d003      	beq.n	8003d5a <HAL_FDCAN_ActivateNotification+0x44>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	2201      	movs	r2, #1
 8003d56:	4013      	ands	r3, r2
 8003d58:	d034      	beq.n	8003dc4 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2238      	movs	r2, #56	; 0x38
 8003d5e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003d60:	d003      	beq.n	8003d6a <HAL_FDCAN_ActivateNotification+0x54>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	2202      	movs	r2, #2
 8003d66:	4013      	ands	r3, r2
 8003d68:	d02c      	beq.n	8003dc4 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	23e0      	movs	r3, #224	; 0xe0
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8003d72:	d003      	beq.n	8003d7c <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	2204      	movs	r2, #4
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d023      	beq.n	8003dc4 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	23f0      	movs	r3, #240	; 0xf0
 8003d80:	015b      	lsls	r3, r3, #5
 8003d82:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003d84:	d003      	beq.n	8003d8e <HAL_FDCAN_ActivateNotification+0x78>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2208      	movs	r2, #8
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d01a      	beq.n	8003dc4 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	23e0      	movs	r3, #224	; 0xe0
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003d96:	d003      	beq.n	8003da0 <HAL_FDCAN_ActivateNotification+0x8a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	2210      	movs	r2, #16
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	d011      	beq.n	8003dc4 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	23c0      	movs	r3, #192	; 0xc0
 8003da4:	029b      	lsls	r3, r3, #10
 8003da6:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003da8:	d003      	beq.n	8003db2 <HAL_FDCAN_ActivateNotification+0x9c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2220      	movs	r2, #32
 8003dae:	4013      	ands	r3, r2
 8003db0:	d008      	beq.n	8003dc4 <HAL_FDCAN_ActivateNotification+0xae>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	23fc      	movs	r3, #252	; 0xfc
 8003db6:	041b      	lsls	r3, r3, #16
 8003db8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003dba:	d00b      	beq.n	8003dd4 <HAL_FDCAN_ActivateNotification+0xbe>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	2240      	movs	r2, #64	; 0x40
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	d107      	bne.n	8003dd4 <HAL_FDCAN_ActivateNotification+0xbe>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2101      	movs	r1, #1
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2207      	movs	r2, #7
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d003      	beq.n	8003de4 <HAL_FDCAN_ActivateNotification+0xce>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2201      	movs	r2, #1
 8003de0:	4013      	ands	r3, r2
 8003de2:	d134      	bne.n	8003e4e <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2238      	movs	r2, #56	; 0x38
 8003de8:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8003dea:	d003      	beq.n	8003df4 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2202      	movs	r2, #2
 8003df0:	4013      	ands	r3, r2
 8003df2:	d12c      	bne.n	8003e4e <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	23e0      	movs	r3, #224	; 0xe0
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003dfc:	d003      	beq.n	8003e06 <HAL_FDCAN_ActivateNotification+0xf0>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2204      	movs	r2, #4
 8003e02:	4013      	ands	r3, r2
 8003e04:	d123      	bne.n	8003e4e <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	23f0      	movs	r3, #240	; 0xf0
 8003e0a:	015b      	lsls	r3, r3, #5
 8003e0c:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003e0e:	d003      	beq.n	8003e18 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2208      	movs	r2, #8
 8003e14:	4013      	ands	r3, r2
 8003e16:	d11a      	bne.n	8003e4e <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	23e0      	movs	r3, #224	; 0xe0
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003e20:	d003      	beq.n	8003e2a <HAL_FDCAN_ActivateNotification+0x114>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2210      	movs	r2, #16
 8003e26:	4013      	ands	r3, r2
 8003e28:	d111      	bne.n	8003e4e <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	23c0      	movs	r3, #192	; 0xc0
 8003e2e:	029b      	lsls	r3, r3, #10
 8003e30:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003e32:	d003      	beq.n	8003e3c <HAL_FDCAN_ActivateNotification+0x126>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	2220      	movs	r2, #32
 8003e38:	4013      	ands	r3, r2
 8003e3a:	d108      	bne.n	8003e4e <HAL_FDCAN_ActivateNotification+0x138>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	23fc      	movs	r3, #252	; 0xfc
 8003e40:	041b      	lsls	r3, r3, #16
 8003e42:	4013      	ands	r3, r2
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003e44:	d00b      	beq.n	8003e5e <HAL_FDCAN_ActivateNotification+0x148>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	2240      	movs	r2, #64	; 0x40
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d007      	beq.n	8003e5e <HAL_FDCAN_ActivateNotification+0x148>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2102      	movs	r1, #2
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2280      	movs	r2, #128	; 0x80
 8003e62:	4013      	ands	r3, r2
 8003e64:	d009      	beq.n	8003e7a <HAL_FDCAN_ActivateNotification+0x164>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	22dc      	movs	r2, #220	; 0xdc
 8003e6c:	5899      	ldr	r1, [r3, r2]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	21dc      	movs	r1, #220	; 0xdc
 8003e78:	505a      	str	r2, [r3, r1]
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	2380      	movs	r3, #128	; 0x80
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4013      	ands	r3, r2
 8003e82:	d009      	beq.n	8003e98 <HAL_FDCAN_ActivateNotification+0x182>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	22e0      	movs	r2, #224	; 0xe0
 8003e8a:	5899      	ldr	r1, [r3, r2]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	21e0      	movs	r1, #224	; 0xe0
 8003e96:	505a      	str	r2, [r3, r1]
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e006      	b.n	8003eba <HAL_FDCAN_ActivateNotification+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
  }
}
 8003eba:	0018      	movs	r0, r3
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	b006      	add	sp, #24
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b08c      	sub	sp, #48	; 0x30
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ed0:	23e0      	movs	r3, #224	; 0xe0
 8003ed2:	015b      	lsls	r3, r3, #5
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eea:	2207      	movs	r2, #7
 8003eec:	4013      	ands	r3, r2
 8003eee:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef8:	4013      	ands	r3, r2
 8003efa:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f02:	2238      	movs	r2, #56	; 0x38
 8003f04:	4013      	ands	r3, r2
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f10:	4013      	ands	r3, r2
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f1a:	23f1      	movs	r3, #241	; 0xf1
 8003f1c:	041b      	lsls	r3, r3, #16
 8003f1e:	4013      	ands	r3, r2
 8003f20:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f34:	23e0      	movs	r3, #224	; 0xe0
 8003f36:	031b      	lsls	r3, r3, #12
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	4013      	ands	r3, r2
 8003f46:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f56:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	099b      	lsrs	r3, r3, #6
 8003f5c:	001a      	movs	r2, r3
 8003f5e:	2301      	movs	r3, #1
 8003f60:	4013      	ands	r3, r2
 8003f62:	d00d      	beq.n	8003f80 <HAL_FDCAN_IRQHandler+0xbe>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	099b      	lsrs	r3, r3, #6
 8003f68:	001a      	movs	r2, r3
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d007      	beq.n	8003f80 <HAL_FDCAN_IRQHandler+0xbe>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2240      	movs	r2, #64	; 0x40
 8003f76:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f000 f924 	bl	80041c8 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	0a1b      	lsrs	r3, r3, #8
 8003f84:	001a      	movs	r2, r3
 8003f86:	2301      	movs	r3, #1
 8003f88:	4013      	ands	r3, r2
 8003f8a:	d01c      	beq.n	8003fc6 <HAL_FDCAN_IRQHandler+0x104>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	001a      	movs	r2, r3
 8003f92:	2301      	movs	r3, #1
 8003f94:	4013      	ands	r3, r2
 8003f96:	d016      	beq.n	8003fc6 <HAL_FDCAN_IRQHandler+0x104>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	22d8      	movs	r2, #216	; 0xd8
 8003f9e:	589b      	ldr	r3, [r3, r2]
 8003fa0:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	22e0      	movs	r2, #224	; 0xe0
 8003fa8:	589a      	ldr	r2, [r3, r2]
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	4013      	ands	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2280      	movs	r2, #128	; 0x80
 8003fb6:	0052      	lsls	r2, r2, #1
 8003fb8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	0011      	movs	r1, r2
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f000 f8e8 	bl	8004196 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_FDCAN_IRQHandler+0x11e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003fd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0011      	movs	r1, r2
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f000 f8b8 	bl	8004150 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8003fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <HAL_FDCAN_IRQHandler+0x138>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fec:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8003fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	0011      	movs	r1, r2
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	f7fe f963 	bl	80022c0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d009      	beq.n	8004014 <HAL_FDCAN_IRQHandler+0x152>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004006:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0011      	movs	r1, r2
 800400e:	0018      	movs	r0, r3
 8004010:	f000 f8a7 	bl	8004162 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	0a5b      	lsrs	r3, r3, #9
 8004018:	001a      	movs	r2, r3
 800401a:	2301      	movs	r3, #1
 800401c:	4013      	ands	r3, r2
 800401e:	d00e      	beq.n	800403e <HAL_FDCAN_IRQHandler+0x17c>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	0a5b      	lsrs	r3, r3, #9
 8004024:	001a      	movs	r2, r3
 8004026:	2301      	movs	r3, #1
 8004028:	4013      	ands	r3, r2
 800402a:	d008      	beq.n	800403e <HAL_FDCAN_IRQHandler+0x17c>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2280      	movs	r2, #128	; 0x80
 8004032:	0092      	lsls	r2, r2, #2
 8004034:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	0018      	movs	r0, r3
 800403a:	f000 f89b 	bl	8004174 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	09db      	lsrs	r3, r3, #7
 8004042:	001a      	movs	r2, r3
 8004044:	2301      	movs	r3, #1
 8004046:	4013      	ands	r3, r2
 8004048:	d01b      	beq.n	8004082 <HAL_FDCAN_IRQHandler+0x1c0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	09db      	lsrs	r3, r3, #7
 800404e:	001a      	movs	r2, r3
 8004050:	2301      	movs	r3, #1
 8004052:	4013      	ands	r3, r2
 8004054:	d015      	beq.n	8004082 <HAL_FDCAN_IRQHandler+0x1c0>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	22d4      	movs	r2, #212	; 0xd4
 800405c:	589b      	ldr	r3, [r3, r2]
 800405e:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	22dc      	movs	r2, #220	; 0xdc
 8004066:	589a      	ldr	r2, [r3, r2]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4013      	ands	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2280      	movs	r2, #128	; 0x80
 8004074:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004076:	68fa      	ldr	r2, [r7, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	0011      	movs	r1, r2
 800407c:	0018      	movs	r0, r3
 800407e:	f000 f881 	bl	8004184 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	0b5b      	lsrs	r3, r3, #13
 8004086:	001a      	movs	r2, r3
 8004088:	2301      	movs	r3, #1
 800408a:	4013      	ands	r3, r2
 800408c:	d00e      	beq.n	80040ac <HAL_FDCAN_IRQHandler+0x1ea>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	0b5b      	lsrs	r3, r3, #13
 8004092:	001a      	movs	r2, r3
 8004094:	2301      	movs	r3, #1
 8004096:	4013      	ands	r3, r2
 8004098:	d008      	beq.n	80040ac <HAL_FDCAN_IRQHandler+0x1ea>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2280      	movs	r2, #128	; 0x80
 80040a0:	0192      	lsls	r2, r2, #6
 80040a2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	0018      	movs	r0, r3
 80040a8:	f000 f87e 	bl	80041a8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	0bdb      	lsrs	r3, r3, #15
 80040b0:	001a      	movs	r2, r3
 80040b2:	2301      	movs	r3, #1
 80040b4:	4013      	ands	r3, r2
 80040b6:	d00e      	beq.n	80040d6 <HAL_FDCAN_IRQHandler+0x214>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	0bdb      	lsrs	r3, r3, #15
 80040bc:	001a      	movs	r2, r3
 80040be:	2301      	movs	r3, #1
 80040c0:	4013      	ands	r3, r2
 80040c2:	d008      	beq.n	80040d6 <HAL_FDCAN_IRQHandler+0x214>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2280      	movs	r2, #128	; 0x80
 80040ca:	0212      	lsls	r2, r2, #8
 80040cc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	0018      	movs	r0, r3
 80040d2:	f000 f871 	bl	80041b8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	0b9b      	lsrs	r3, r3, #14
 80040da:	001a      	movs	r2, r3
 80040dc:	2301      	movs	r3, #1
 80040de:	4013      	ands	r3, r2
 80040e0:	d010      	beq.n	8004104 <HAL_FDCAN_IRQHandler+0x242>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	0b9b      	lsrs	r3, r3, #14
 80040e6:	001a      	movs	r2, r3
 80040e8:	2301      	movs	r3, #1
 80040ea:	4013      	ands	r3, r2
 80040ec:	d00a      	beq.n	8004104 <HAL_FDCAN_IRQHandler+0x242>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2280      	movs	r2, #128	; 0x80
 80040f4:	01d2      	lsls	r2, r2, #7
 80040f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040fc:	2280      	movs	r2, #128	; 0x80
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d009      	beq.n	800411e <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	69fa      	ldr	r2, [r7, #28]
 8004110:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	0011      	movs	r1, r2
 8004118:	0018      	movs	r0, r3
 800411a:	f000 f865 	bl	80041e8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d009      	beq.n	8004138 <HAL_FDCAN_IRQHandler+0x276>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6a3a      	ldr	r2, [r7, #32]
 800412a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	431a      	orrs	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_FDCAN_IRQHandler+0x286>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	0018      	movs	r0, r3
 8004144:	f000 f848 	bl	80041d8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	46bd      	mov	sp, r7
 800414c:	b00c      	add	sp, #48	; 0x30
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	46bd      	mov	sp, r7
 800415e:	b002      	add	sp, #8
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800416c:	46c0      	nop			; (mov r8, r8)
 800416e:	46bd      	mov	sp, r7
 8004170:	b002      	add	sp, #8
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800417c:	46c0      	nop			; (mov r8, r8)
 800417e:	46bd      	mov	sp, r7
 8004180:	b002      	add	sp, #8
 8004182:	bd80      	pop	{r7, pc}

08004184 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b002      	add	sp, #8
 8004194:	bd80      	pop	{r7, pc}

08004196 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b082      	sub	sp, #8
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80041a0:	46c0      	nop			; (mov r8, r8)
 80041a2:	46bd      	mov	sp, r7
 80041a4:	b002      	add	sp, #8
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80041b0:	46c0      	nop			; (mov r8, r8)
 80041b2:	46bd      	mov	sp, r7
 80041b4:	b002      	add	sp, #8
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b082      	sub	sp, #8
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80041c0:	46c0      	nop			; (mov r8, r8)
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b002      	add	sp, #8
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80041d0:	46c0      	nop			; (mov r8, r8)
 80041d2:	46bd      	mov	sp, r7
 80041d4:	b002      	add	sp, #8
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b002      	add	sp, #8
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80041f2:	46c0      	nop			; (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b002      	add	sp, #8
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004204:	4b2f      	ldr	r3, [pc, #188]	; (80042c4 <FDCAN_CalcultateRamBlockAddresses+0xc8>)
 8004206:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a2e      	ldr	r2, [pc, #184]	; (80042c8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d105      	bne.n	800421e <FDCAN_CalcultateRamBlockAddresses+0x22>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	22d4      	movs	r2, #212	; 0xd4
 8004216:	0092      	lsls	r2, r2, #2
 8004218:	4694      	mov	ip, r2
 800421a:	4463      	add	r3, ip
 800421c:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2280      	movs	r2, #128	; 0x80
 800422a:	589b      	ldr	r3, [r3, r2]
 800422c:	4a27      	ldr	r2, [pc, #156]	; (80042cc <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800422e:	4013      	ands	r3, r2
 8004230:	0019      	movs	r1, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004236:	041a      	lsls	r2, r3, #16
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	2180      	movs	r1, #128	; 0x80
 8004240:	505a      	str	r2, [r3, r1]

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	3370      	adds	r3, #112	; 0x70
 8004246:	001a      	movs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2280      	movs	r2, #128	; 0x80
 8004252:	589b      	ldr	r3, [r3, r2]
 8004254:	4a1e      	ldr	r2, [pc, #120]	; (80042d0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8004256:	4013      	ands	r3, r2
 8004258:	0019      	movs	r1, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	061a      	lsls	r2, r3, #24
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	2180      	movs	r1, #128	; 0x80
 8004268:	505a      	str	r2, [r3, r1]

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	33b0      	adds	r3, #176	; 0xb0
 800426e:	001a      	movs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	3389      	adds	r3, #137	; 0x89
 8004278:	33ff      	adds	r3, #255	; 0xff
 800427a:	001a      	movs	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2298      	movs	r2, #152	; 0x98
 8004284:	0092      	lsls	r2, r2, #2
 8004286:	189a      	adds	r2, r3, r2
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	229e      	movs	r2, #158	; 0x9e
 8004290:	0092      	lsls	r2, r2, #2
 8004292:	189a      	adds	r2, r3, r2
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	e005      	b.n	80042aa <FDCAN_CalcultateRamBlockAddresses+0xae>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	3304      	adds	r3, #4
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	22d4      	movs	r2, #212	; 0xd4
 80042ae:	0092      	lsls	r2, r2, #2
 80042b0:	4694      	mov	ip, r2
 80042b2:	4463      	add	r3, ip
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d3f1      	bcc.n	800429e <FDCAN_CalcultateRamBlockAddresses+0xa2>
  }
}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	46c0      	nop			; (mov r8, r8)
 80042be:	46bd      	mov	sp, r7
 80042c0:	b004      	add	sp, #16
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	4000b400 	.word	0x4000b400
 80042c8:	40006800 	.word	0x40006800
 80042cc:	ffe0ffff 	.word	0xffe0ffff
 80042d0:	f0ffffff 	.word	0xf0ffffff

080042d4 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80042f2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80042fa:	4313      	orrs	r3, r2
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	e00b      	b.n	8004318 <FDCAN_CopyMessageToRAM+0x44>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8004308:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800430e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004310:	2280      	movs	r2, #128	; 0x80
 8004312:	05d2      	lsls	r2, r2, #23
 8004314:	4313      	orrs	r3, r2
 8004316:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004322:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8004328:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800432e:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004334:	4313      	orrs	r3, r2
 8004336:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	0013      	movs	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	189b      	adds	r3, r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	18cb      	adds	r3, r1, r3
 8004348:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	3304      	adds	r3, #4
 8004354:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	3304      	adds	r3, #4
 8004360:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	e020      	b.n	80043aa <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	3303      	adds	r3, #3
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	18d3      	adds	r3, r2, r3
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	3302      	adds	r3, #2
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	18cb      	adds	r3, r1, r3
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004380:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	3301      	adds	r3, #1
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	18cb      	adds	r3, r1, r3
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800438e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	188a      	adds	r2, r1, r2
 8004396:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004398:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	3304      	adds	r3, #4
 80043a2:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	3304      	adds	r3, #4
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	0c1b      	lsrs	r3, r3, #16
 80043b0:	4a05      	ldr	r2, [pc, #20]	; (80043c8 <FDCAN_CopyMessageToRAM+0xf4>)
 80043b2:	5cd3      	ldrb	r3, [r2, r3]
 80043b4:	001a      	movs	r2, r3
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d3d5      	bcc.n	8004368 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80043bc:	46c0      	nop			; (mov r8, r8)
 80043be:	46c0      	nop			; (mov r8, r8)
 80043c0:	46bd      	mov	sp, r7
 80043c2:	b008      	add	sp, #32
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	46c0      	nop			; (mov r8, r8)
 80043c8:	0800a9ec 	.word	0x0800a9ec

080043cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043d6:	2300      	movs	r3, #0
 80043d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043da:	e14d      	b.n	8004678 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2101      	movs	r1, #1
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	4091      	lsls	r1, r2
 80043e6:	000a      	movs	r2, r1
 80043e8:	4013      	ands	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d100      	bne.n	80043f4 <HAL_GPIO_Init+0x28>
 80043f2:	e13e      	b.n	8004672 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2203      	movs	r2, #3
 80043fa:	4013      	ands	r3, r2
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d005      	beq.n	800440c <HAL_GPIO_Init+0x40>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	2203      	movs	r2, #3
 8004406:	4013      	ands	r3, r2
 8004408:	2b02      	cmp	r3, #2
 800440a:	d130      	bne.n	800446e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	2203      	movs	r2, #3
 8004418:	409a      	lsls	r2, r3
 800441a:	0013      	movs	r3, r2
 800441c:	43da      	mvns	r2, r3
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	68da      	ldr	r2, [r3, #12]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	409a      	lsls	r2, r3
 800442e:	0013      	movs	r3, r2
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4313      	orrs	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004442:	2201      	movs	r2, #1
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	409a      	lsls	r2, r3
 8004448:	0013      	movs	r3, r2
 800444a:	43da      	mvns	r2, r3
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	4013      	ands	r3, r2
 8004450:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	091b      	lsrs	r3, r3, #4
 8004458:	2201      	movs	r2, #1
 800445a:	401a      	ands	r2, r3
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	409a      	lsls	r2, r3
 8004460:	0013      	movs	r3, r2
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2203      	movs	r2, #3
 8004474:	4013      	ands	r3, r2
 8004476:	2b03      	cmp	r3, #3
 8004478:	d017      	beq.n	80044aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	2203      	movs	r2, #3
 8004486:	409a      	lsls	r2, r3
 8004488:	0013      	movs	r3, r2
 800448a:	43da      	mvns	r2, r3
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4013      	ands	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	409a      	lsls	r2, r3
 800449c:	0013      	movs	r3, r2
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	693a      	ldr	r2, [r7, #16]
 80044a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2203      	movs	r2, #3
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d123      	bne.n	80044fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	08da      	lsrs	r2, r3, #3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3208      	adds	r2, #8
 80044be:	0092      	lsls	r2, r2, #2
 80044c0:	58d3      	ldr	r3, [r2, r3]
 80044c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2207      	movs	r2, #7
 80044c8:	4013      	ands	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	220f      	movs	r2, #15
 80044ce:	409a      	lsls	r2, r3
 80044d0:	0013      	movs	r3, r2
 80044d2:	43da      	mvns	r2, r3
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	4013      	ands	r3, r2
 80044d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	691a      	ldr	r2, [r3, #16]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2107      	movs	r1, #7
 80044e2:	400b      	ands	r3, r1
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	409a      	lsls	r2, r3
 80044e8:	0013      	movs	r3, r2
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	08da      	lsrs	r2, r3, #3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3208      	adds	r2, #8
 80044f8:	0092      	lsls	r2, r2, #2
 80044fa:	6939      	ldr	r1, [r7, #16]
 80044fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	2203      	movs	r2, #3
 800450a:	409a      	lsls	r2, r3
 800450c:	0013      	movs	r3, r2
 800450e:	43da      	mvns	r2, r3
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	4013      	ands	r3, r2
 8004514:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2203      	movs	r2, #3
 800451c:	401a      	ands	r2, r3
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	409a      	lsls	r2, r3
 8004524:	0013      	movs	r3, r2
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	685a      	ldr	r2, [r3, #4]
 8004536:	23c0      	movs	r3, #192	; 0xc0
 8004538:	029b      	lsls	r3, r3, #10
 800453a:	4013      	ands	r3, r2
 800453c:	d100      	bne.n	8004540 <HAL_GPIO_Init+0x174>
 800453e:	e098      	b.n	8004672 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004540:	4a53      	ldr	r2, [pc, #332]	; (8004690 <HAL_GPIO_Init+0x2c4>)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	089b      	lsrs	r3, r3, #2
 8004546:	3318      	adds	r3, #24
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	589b      	ldr	r3, [r3, r2]
 800454c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	2203      	movs	r2, #3
 8004552:	4013      	ands	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	220f      	movs	r2, #15
 8004558:	409a      	lsls	r2, r3
 800455a:	0013      	movs	r3, r2
 800455c:	43da      	mvns	r2, r3
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4013      	ands	r3, r2
 8004562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	23a0      	movs	r3, #160	; 0xa0
 8004568:	05db      	lsls	r3, r3, #23
 800456a:	429a      	cmp	r2, r3
 800456c:	d019      	beq.n	80045a2 <HAL_GPIO_Init+0x1d6>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a48      	ldr	r2, [pc, #288]	; (8004694 <HAL_GPIO_Init+0x2c8>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d013      	beq.n	800459e <HAL_GPIO_Init+0x1d2>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a47      	ldr	r2, [pc, #284]	; (8004698 <HAL_GPIO_Init+0x2cc>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00d      	beq.n	800459a <HAL_GPIO_Init+0x1ce>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a46      	ldr	r2, [pc, #280]	; (800469c <HAL_GPIO_Init+0x2d0>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d007      	beq.n	8004596 <HAL_GPIO_Init+0x1ca>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a45      	ldr	r2, [pc, #276]	; (80046a0 <HAL_GPIO_Init+0x2d4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d101      	bne.n	8004592 <HAL_GPIO_Init+0x1c6>
 800458e:	2304      	movs	r3, #4
 8004590:	e008      	b.n	80045a4 <HAL_GPIO_Init+0x1d8>
 8004592:	2305      	movs	r3, #5
 8004594:	e006      	b.n	80045a4 <HAL_GPIO_Init+0x1d8>
 8004596:	2303      	movs	r3, #3
 8004598:	e004      	b.n	80045a4 <HAL_GPIO_Init+0x1d8>
 800459a:	2302      	movs	r3, #2
 800459c:	e002      	b.n	80045a4 <HAL_GPIO_Init+0x1d8>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <HAL_GPIO_Init+0x1d8>
 80045a2:	2300      	movs	r3, #0
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	2103      	movs	r1, #3
 80045a8:	400a      	ands	r2, r1
 80045aa:	00d2      	lsls	r2, r2, #3
 80045ac:	4093      	lsls	r3, r2
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80045b4:	4936      	ldr	r1, [pc, #216]	; (8004690 <HAL_GPIO_Init+0x2c4>)
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	089b      	lsrs	r3, r3, #2
 80045ba:	3318      	adds	r3, #24
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045c2:	4b33      	ldr	r3, [pc, #204]	; (8004690 <HAL_GPIO_Init+0x2c4>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	43da      	mvns	r2, r3
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	4013      	ands	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	035b      	lsls	r3, r3, #13
 80045da:	4013      	ands	r3, r2
 80045dc:	d003      	beq.n	80045e6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80045e6:	4b2a      	ldr	r3, [pc, #168]	; (8004690 <HAL_GPIO_Init+0x2c4>)
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80045ec:	4b28      	ldr	r3, [pc, #160]	; (8004690 <HAL_GPIO_Init+0x2c4>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	43da      	mvns	r2, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685a      	ldr	r2, [r3, #4]
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	039b      	lsls	r3, r3, #14
 8004604:	4013      	ands	r3, r2
 8004606:	d003      	beq.n	8004610 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004610:	4b1f      	ldr	r3, [pc, #124]	; (8004690 <HAL_GPIO_Init+0x2c4>)
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004616:	4a1e      	ldr	r2, [pc, #120]	; (8004690 <HAL_GPIO_Init+0x2c4>)
 8004618:	2384      	movs	r3, #132	; 0x84
 800461a:	58d3      	ldr	r3, [r2, r3]
 800461c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	43da      	mvns	r2, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	4013      	ands	r3, r2
 8004626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685a      	ldr	r2, [r3, #4]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	029b      	lsls	r3, r3, #10
 8004630:	4013      	ands	r3, r2
 8004632:	d003      	beq.n	800463c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800463c:	4914      	ldr	r1, [pc, #80]	; (8004690 <HAL_GPIO_Init+0x2c4>)
 800463e:	2284      	movs	r2, #132	; 0x84
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004644:	4a12      	ldr	r2, [pc, #72]	; (8004690 <HAL_GPIO_Init+0x2c4>)
 8004646:	2380      	movs	r3, #128	; 0x80
 8004648:	58d3      	ldr	r3, [r2, r3]
 800464a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	43da      	mvns	r2, r3
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	4013      	ands	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	2380      	movs	r3, #128	; 0x80
 800465c:	025b      	lsls	r3, r3, #9
 800465e:	4013      	ands	r3, r2
 8004660:	d003      	beq.n	800466a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4313      	orrs	r3, r2
 8004668:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800466a:	4909      	ldr	r1, [pc, #36]	; (8004690 <HAL_GPIO_Init+0x2c4>)
 800466c:	2280      	movs	r2, #128	; 0x80
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	3301      	adds	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	40da      	lsrs	r2, r3
 8004680:	1e13      	subs	r3, r2, #0
 8004682:	d000      	beq.n	8004686 <HAL_GPIO_Init+0x2ba>
 8004684:	e6aa      	b.n	80043dc <HAL_GPIO_Init+0x10>
  }
}
 8004686:	46c0      	nop			; (mov r8, r8)
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	46bd      	mov	sp, r7
 800468c:	b006      	add	sp, #24
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40021800 	.word	0x40021800
 8004694:	50000400 	.word	0x50000400
 8004698:	50000800 	.word	0x50000800
 800469c:	50000c00 	.word	0x50000c00
 80046a0:	50001000 	.word	0x50001000

080046a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	0008      	movs	r0, r1
 80046ae:	0011      	movs	r1, r2
 80046b0:	1cbb      	adds	r3, r7, #2
 80046b2:	1c02      	adds	r2, r0, #0
 80046b4:	801a      	strh	r2, [r3, #0]
 80046b6:	1c7b      	adds	r3, r7, #1
 80046b8:	1c0a      	adds	r2, r1, #0
 80046ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046bc:	1c7b      	adds	r3, r7, #1
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80046c4:	1cbb      	adds	r3, r7, #2
 80046c6:	881a      	ldrh	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046cc:	e003      	b.n	80046d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046ce:	1cbb      	adds	r3, r7, #2
 80046d0:	881a      	ldrh	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	46bd      	mov	sp, r7
 80046da:	b002      	add	sp, #8
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80046e8:	4b19      	ldr	r3, [pc, #100]	; (8004750 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a19      	ldr	r2, [pc, #100]	; (8004754 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	0019      	movs	r1, r3
 80046f2:	4b17      	ldr	r3, [pc, #92]	; (8004750 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	429a      	cmp	r2, r3
 8004702:	d11f      	bne.n	8004744 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004704:	4b14      	ldr	r3, [pc, #80]	; (8004758 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	0013      	movs	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	189b      	adds	r3, r3, r2
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	4912      	ldr	r1, [pc, #72]	; (800475c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004712:	0018      	movs	r0, r3
 8004714:	f7fb fd12 	bl	800013c <__udivsi3>
 8004718:	0003      	movs	r3, r0
 800471a:	3301      	adds	r3, #1
 800471c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800471e:	e008      	b.n	8004732 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	3b01      	subs	r3, #1
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	e001      	b.n	8004732 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e009      	b.n	8004746 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004732:	4b07      	ldr	r3, [pc, #28]	; (8004750 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	00db      	lsls	r3, r3, #3
 800473a:	401a      	ands	r2, r3
 800473c:	2380      	movs	r3, #128	; 0x80
 800473e:	00db      	lsls	r3, r3, #3
 8004740:	429a      	cmp	r2, r3
 8004742:	d0ed      	beq.n	8004720 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	0018      	movs	r0, r3
 8004748:	46bd      	mov	sp, r7
 800474a:	b004      	add	sp, #16
 800474c:	bd80      	pop	{r7, pc}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	40007000 	.word	0x40007000
 8004754:	fffff9ff 	.word	0xfffff9ff
 8004758:	20000004 	.word	0x20000004
 800475c:	000f4240 	.word	0x000f4240

08004760 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004764:	4b03      	ldr	r3, [pc, #12]	; (8004774 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	23e0      	movs	r3, #224	; 0xe0
 800476a:	01db      	lsls	r3, r3, #7
 800476c:	4013      	ands	r3, r2
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40021000 	.word	0x40021000

08004778 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d102      	bne.n	800478c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	f000 fb50 	bl	8004e2c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2201      	movs	r2, #1
 8004792:	4013      	ands	r3, r2
 8004794:	d100      	bne.n	8004798 <HAL_RCC_OscConfig+0x20>
 8004796:	e07c      	b.n	8004892 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004798:	4bc3      	ldr	r3, [pc, #780]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2238      	movs	r2, #56	; 0x38
 800479e:	4013      	ands	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a2:	4bc1      	ldr	r3, [pc, #772]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2203      	movs	r2, #3
 80047a8:	4013      	ands	r3, r2
 80047aa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	2b10      	cmp	r3, #16
 80047b0:	d102      	bne.n	80047b8 <HAL_RCC_OscConfig+0x40>
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b03      	cmp	r3, #3
 80047b6:	d002      	beq.n	80047be <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d10b      	bne.n	80047d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047be:	4bba      	ldr	r3, [pc, #744]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	2380      	movs	r3, #128	; 0x80
 80047c4:	029b      	lsls	r3, r3, #10
 80047c6:	4013      	ands	r3, r2
 80047c8:	d062      	beq.n	8004890 <HAL_RCC_OscConfig+0x118>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d15e      	bne.n	8004890 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e32a      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	2380      	movs	r3, #128	; 0x80
 80047dc:	025b      	lsls	r3, r3, #9
 80047de:	429a      	cmp	r2, r3
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_OscConfig+0x7a>
 80047e2:	4bb1      	ldr	r3, [pc, #708]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4bb0      	ldr	r3, [pc, #704]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80047e8:	2180      	movs	r1, #128	; 0x80
 80047ea:	0249      	lsls	r1, r1, #9
 80047ec:	430a      	orrs	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e020      	b.n	8004834 <HAL_RCC_OscConfig+0xbc>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	23a0      	movs	r3, #160	; 0xa0
 80047f8:	02db      	lsls	r3, r3, #11
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d10e      	bne.n	800481c <HAL_RCC_OscConfig+0xa4>
 80047fe:	4baa      	ldr	r3, [pc, #680]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4ba9      	ldr	r3, [pc, #676]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004804:	2180      	movs	r1, #128	; 0x80
 8004806:	02c9      	lsls	r1, r1, #11
 8004808:	430a      	orrs	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
 800480c:	4ba6      	ldr	r3, [pc, #664]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4ba5      	ldr	r3, [pc, #660]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004812:	2180      	movs	r1, #128	; 0x80
 8004814:	0249      	lsls	r1, r1, #9
 8004816:	430a      	orrs	r2, r1
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	e00b      	b.n	8004834 <HAL_RCC_OscConfig+0xbc>
 800481c:	4ba2      	ldr	r3, [pc, #648]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	4ba1      	ldr	r3, [pc, #644]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004822:	49a2      	ldr	r1, [pc, #648]	; (8004aac <HAL_RCC_OscConfig+0x334>)
 8004824:	400a      	ands	r2, r1
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	4b9f      	ldr	r3, [pc, #636]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	4b9e      	ldr	r3, [pc, #632]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 800482e:	49a0      	ldr	r1, [pc, #640]	; (8004ab0 <HAL_RCC_OscConfig+0x338>)
 8004830:	400a      	ands	r2, r1
 8004832:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d014      	beq.n	8004866 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800483c:	f7fe fcd2 	bl	80031e4 <HAL_GetTick>
 8004840:	0003      	movs	r3, r0
 8004842:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004844:	e008      	b.n	8004858 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004846:	f7fe fccd 	bl	80031e4 <HAL_GetTick>
 800484a:	0002      	movs	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	2b64      	cmp	r3, #100	; 0x64
 8004852:	d901      	bls.n	8004858 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e2e9      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004858:	4b93      	ldr	r3, [pc, #588]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	029b      	lsls	r3, r3, #10
 8004860:	4013      	ands	r3, r2
 8004862:	d0f0      	beq.n	8004846 <HAL_RCC_OscConfig+0xce>
 8004864:	e015      	b.n	8004892 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fe fcbd 	bl	80031e4 <HAL_GetTick>
 800486a:	0003      	movs	r3, r0
 800486c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004870:	f7fe fcb8 	bl	80031e4 <HAL_GetTick>
 8004874:	0002      	movs	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b64      	cmp	r3, #100	; 0x64
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e2d4      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004882:	4b89      	ldr	r3, [pc, #548]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	2380      	movs	r3, #128	; 0x80
 8004888:	029b      	lsls	r3, r3, #10
 800488a:	4013      	ands	r3, r2
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0xf8>
 800488e:	e000      	b.n	8004892 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004890:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2202      	movs	r2, #2
 8004898:	4013      	ands	r3, r2
 800489a:	d100      	bne.n	800489e <HAL_RCC_OscConfig+0x126>
 800489c:	e099      	b.n	80049d2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800489e:	4b82      	ldr	r3, [pc, #520]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	2238      	movs	r2, #56	; 0x38
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048a8:	4b7f      	ldr	r3, [pc, #508]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2203      	movs	r2, #3
 80048ae:	4013      	ands	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	2b10      	cmp	r3, #16
 80048b6:	d102      	bne.n	80048be <HAL_RCC_OscConfig+0x146>
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d002      	beq.n	80048c4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d135      	bne.n	8004930 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048c4:	4b78      	ldr	r3, [pc, #480]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	2380      	movs	r3, #128	; 0x80
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	4013      	ands	r3, r2
 80048ce:	d005      	beq.n	80048dc <HAL_RCC_OscConfig+0x164>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e2a7      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048dc:	4b72      	ldr	r3, [pc, #456]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	4a74      	ldr	r2, [pc, #464]	; (8004ab4 <HAL_RCC_OscConfig+0x33c>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	0019      	movs	r1, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	021a      	lsls	r2, r3, #8
 80048ec:	4b6e      	ldr	r3, [pc, #440]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80048ee:	430a      	orrs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d112      	bne.n	800491e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80048f8:	4b6b      	ldr	r3, [pc, #428]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a6e      	ldr	r2, [pc, #440]	; (8004ab8 <HAL_RCC_OscConfig+0x340>)
 80048fe:	4013      	ands	r3, r2
 8004900:	0019      	movs	r1, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	4b68      	ldr	r3, [pc, #416]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004908:	430a      	orrs	r2, r1
 800490a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800490c:	4b66      	ldr	r3, [pc, #408]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	0adb      	lsrs	r3, r3, #11
 8004912:	2207      	movs	r2, #7
 8004914:	4013      	ands	r3, r2
 8004916:	4a69      	ldr	r2, [pc, #420]	; (8004abc <HAL_RCC_OscConfig+0x344>)
 8004918:	40da      	lsrs	r2, r3
 800491a:	4b69      	ldr	r3, [pc, #420]	; (8004ac0 <HAL_RCC_OscConfig+0x348>)
 800491c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800491e:	4b69      	ldr	r3, [pc, #420]	; (8004ac4 <HAL_RCC_OscConfig+0x34c>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	0018      	movs	r0, r3
 8004924:	f7fe fc02 	bl	800312c <HAL_InitTick>
 8004928:	1e03      	subs	r3, r0, #0
 800492a:	d051      	beq.n	80049d0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e27d      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d030      	beq.n	800499a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004938:	4b5b      	ldr	r3, [pc, #364]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a5e      	ldr	r2, [pc, #376]	; (8004ab8 <HAL_RCC_OscConfig+0x340>)
 800493e:	4013      	ands	r3, r2
 8004940:	0019      	movs	r1, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	4b58      	ldr	r3, [pc, #352]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004948:	430a      	orrs	r2, r1
 800494a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800494c:	4b56      	ldr	r3, [pc, #344]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	4b55      	ldr	r3, [pc, #340]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004952:	2180      	movs	r1, #128	; 0x80
 8004954:	0049      	lsls	r1, r1, #1
 8004956:	430a      	orrs	r2, r1
 8004958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495a:	f7fe fc43 	bl	80031e4 <HAL_GetTick>
 800495e:	0003      	movs	r3, r0
 8004960:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004964:	f7fe fc3e 	bl	80031e4 <HAL_GetTick>
 8004968:	0002      	movs	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b02      	cmp	r3, #2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e25a      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004976:	4b4c      	ldr	r3, [pc, #304]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	2380      	movs	r3, #128	; 0x80
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	4013      	ands	r3, r2
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004982:	4b49      	ldr	r3, [pc, #292]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	4a4b      	ldr	r2, [pc, #300]	; (8004ab4 <HAL_RCC_OscConfig+0x33c>)
 8004988:	4013      	ands	r3, r2
 800498a:	0019      	movs	r1, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	021a      	lsls	r2, r3, #8
 8004992:	4b45      	ldr	r3, [pc, #276]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004994:	430a      	orrs	r2, r1
 8004996:	605a      	str	r2, [r3, #4]
 8004998:	e01b      	b.n	80049d2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800499a:	4b43      	ldr	r3, [pc, #268]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	4b42      	ldr	r3, [pc, #264]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80049a0:	4949      	ldr	r1, [pc, #292]	; (8004ac8 <HAL_RCC_OscConfig+0x350>)
 80049a2:	400a      	ands	r2, r1
 80049a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a6:	f7fe fc1d 	bl	80031e4 <HAL_GetTick>
 80049aa:	0003      	movs	r3, r0
 80049ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049b0:	f7fe fc18 	bl	80031e4 <HAL_GetTick>
 80049b4:	0002      	movs	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e234      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80049c2:	4b39      	ldr	r3, [pc, #228]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	2380      	movs	r3, #128	; 0x80
 80049c8:	00db      	lsls	r3, r3, #3
 80049ca:	4013      	ands	r3, r2
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x238>
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2208      	movs	r2, #8
 80049d8:	4013      	ands	r3, r2
 80049da:	d047      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80049dc:	4b32      	ldr	r3, [pc, #200]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2238      	movs	r2, #56	; 0x38
 80049e2:	4013      	ands	r3, r2
 80049e4:	2b18      	cmp	r3, #24
 80049e6:	d10a      	bne.n	80049fe <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80049e8:	4b2f      	ldr	r3, [pc, #188]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 80049ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ec:	2202      	movs	r2, #2
 80049ee:	4013      	ands	r3, r2
 80049f0:	d03c      	beq.n	8004a6c <HAL_RCC_OscConfig+0x2f4>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d138      	bne.n	8004a6c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e216      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d019      	beq.n	8004a3a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004a06:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004a08:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a0a:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fe fbe7 	bl	80031e4 <HAL_GetTick>
 8004a16:	0003      	movs	r3, r0
 8004a18:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a1c:	f7fe fbe2 	bl	80031e4 <HAL_GetTick>
 8004a20:	0002      	movs	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e1fe      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a2e:	4b1e      	ldr	r3, [pc, #120]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a32:	2202      	movs	r2, #2
 8004a34:	4013      	ands	r3, r2
 8004a36:	d0f1      	beq.n	8004a1c <HAL_RCC_OscConfig+0x2a4>
 8004a38:	e018      	b.n	8004a6c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004a3a:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004a3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a3e:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004a40:	2101      	movs	r1, #1
 8004a42:	438a      	bics	r2, r1
 8004a44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a46:	f7fe fbcd 	bl	80031e4 <HAL_GetTick>
 8004a4a:	0003      	movs	r3, r0
 8004a4c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a50:	f7fe fbc8 	bl	80031e4 <HAL_GetTick>
 8004a54:	0002      	movs	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e1e4      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004a62:	4b11      	ldr	r3, [pc, #68]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a66:	2202      	movs	r2, #2
 8004a68:	4013      	ands	r3, r2
 8004a6a:	d1f1      	bne.n	8004a50 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2204      	movs	r2, #4
 8004a72:	4013      	ands	r3, r2
 8004a74:	d100      	bne.n	8004a78 <HAL_RCC_OscConfig+0x300>
 8004a76:	e0c7      	b.n	8004c08 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a78:	231f      	movs	r3, #31
 8004a7a:	18fb      	adds	r3, r7, r3
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	2238      	movs	r2, #56	; 0x38
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b20      	cmp	r3, #32
 8004a8a:	d11f      	bne.n	8004acc <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004a8c:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <HAL_RCC_OscConfig+0x330>)
 8004a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a90:	2202      	movs	r2, #2
 8004a92:	4013      	ands	r3, r2
 8004a94:	d100      	bne.n	8004a98 <HAL_RCC_OscConfig+0x320>
 8004a96:	e0b7      	b.n	8004c08 <HAL_RCC_OscConfig+0x490>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d000      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x32a>
 8004aa0:	e0b2      	b.n	8004c08 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e1c2      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	fffeffff 	.word	0xfffeffff
 8004ab0:	fffbffff 	.word	0xfffbffff
 8004ab4:	ffff80ff 	.word	0xffff80ff
 8004ab8:	ffffc7ff 	.word	0xffffc7ff
 8004abc:	00f42400 	.word	0x00f42400
 8004ac0:	20000004 	.word	0x20000004
 8004ac4:	20000008 	.word	0x20000008
 8004ac8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004acc:	4bb5      	ldr	r3, [pc, #724]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004ace:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	055b      	lsls	r3, r3, #21
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	d101      	bne.n	8004adc <HAL_RCC_OscConfig+0x364>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x366>
 8004adc:	2300      	movs	r3, #0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d011      	beq.n	8004b06 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004ae2:	4bb0      	ldr	r3, [pc, #704]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004ae4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ae6:	4baf      	ldr	r3, [pc, #700]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004ae8:	2180      	movs	r1, #128	; 0x80
 8004aea:	0549      	lsls	r1, r1, #21
 8004aec:	430a      	orrs	r2, r1
 8004aee:	63da      	str	r2, [r3, #60]	; 0x3c
 8004af0:	4bac      	ldr	r3, [pc, #688]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	055b      	lsls	r3, r3, #21
 8004af8:	4013      	ands	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
 8004afc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004afe:	231f      	movs	r3, #31
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	2201      	movs	r2, #1
 8004b04:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b06:	4ba8      	ldr	r3, [pc, #672]	; (8004da8 <HAL_RCC_OscConfig+0x630>)
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	4013      	ands	r3, r2
 8004b10:	d11a      	bne.n	8004b48 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b12:	4ba5      	ldr	r3, [pc, #660]	; (8004da8 <HAL_RCC_OscConfig+0x630>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4ba4      	ldr	r3, [pc, #656]	; (8004da8 <HAL_RCC_OscConfig+0x630>)
 8004b18:	2180      	movs	r1, #128	; 0x80
 8004b1a:	0049      	lsls	r1, r1, #1
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004b20:	f7fe fb60 	bl	80031e4 <HAL_GetTick>
 8004b24:	0003      	movs	r3, r0
 8004b26:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2a:	f7fe fb5b 	bl	80031e4 <HAL_GetTick>
 8004b2e:	0002      	movs	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e177      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b3c:	4b9a      	ldr	r3, [pc, #616]	; (8004da8 <HAL_RCC_OscConfig+0x630>)
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	2380      	movs	r3, #128	; 0x80
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4013      	ands	r3, r2
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCC_OscConfig+0x3e6>
 8004b50:	4b94      	ldr	r3, [pc, #592]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004b52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b54:	4b93      	ldr	r3, [pc, #588]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004b56:	2101      	movs	r1, #1
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b5c:	e01c      	b.n	8004b98 <HAL_RCC_OscConfig+0x420>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b05      	cmp	r3, #5
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCC_OscConfig+0x408>
 8004b66:	4b8f      	ldr	r3, [pc, #572]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004b68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b6a:	4b8e      	ldr	r3, [pc, #568]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004b6c:	2104      	movs	r1, #4
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b72:	4b8c      	ldr	r3, [pc, #560]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004b74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b76:	4b8b      	ldr	r3, [pc, #556]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004b78:	2101      	movs	r1, #1
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b7e:	e00b      	b.n	8004b98 <HAL_RCC_OscConfig+0x420>
 8004b80:	4b88      	ldr	r3, [pc, #544]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004b82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b84:	4b87      	ldr	r3, [pc, #540]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004b86:	2101      	movs	r1, #1
 8004b88:	438a      	bics	r2, r1
 8004b8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b8c:	4b85      	ldr	r3, [pc, #532]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004b8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004b90:	4b84      	ldr	r3, [pc, #528]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004b92:	2104      	movs	r1, #4
 8004b94:	438a      	bics	r2, r1
 8004b96:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d014      	beq.n	8004bca <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba0:	f7fe fb20 	bl	80031e4 <HAL_GetTick>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ba8:	e009      	b.n	8004bbe <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7fe fb1b 	bl	80031e4 <HAL_GetTick>
 8004bae:	0002      	movs	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	4a7d      	ldr	r2, [pc, #500]	; (8004dac <HAL_RCC_OscConfig+0x634>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e136      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bbe:	4b79      	ldr	r3, [pc, #484]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d0f0      	beq.n	8004baa <HAL_RCC_OscConfig+0x432>
 8004bc8:	e013      	b.n	8004bf2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bca:	f7fe fb0b 	bl	80031e4 <HAL_GetTick>
 8004bce:	0003      	movs	r3, r0
 8004bd0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bd2:	e009      	b.n	8004be8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd4:	f7fe fb06 	bl	80031e4 <HAL_GetTick>
 8004bd8:	0002      	movs	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	4a73      	ldr	r2, [pc, #460]	; (8004dac <HAL_RCC_OscConfig+0x634>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e121      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004be8:	4b6e      	ldr	r3, [pc, #440]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bec:	2202      	movs	r2, #2
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004bf2:	231f      	movs	r3, #31
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d105      	bne.n	8004c08 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004bfc:	4b69      	ldr	r3, [pc, #420]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c00:	4b68      	ldr	r3, [pc, #416]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004c02:	496b      	ldr	r1, [pc, #428]	; (8004db0 <HAL_RCC_OscConfig+0x638>)
 8004c04:	400a      	ands	r2, r1
 8004c06:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	4013      	ands	r3, r2
 8004c10:	d039      	beq.n	8004c86 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	69db      	ldr	r3, [r3, #28]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d01b      	beq.n	8004c52 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c1a:	4b62      	ldr	r3, [pc, #392]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	4b61      	ldr	r3, [pc, #388]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004c20:	2180      	movs	r1, #128	; 0x80
 8004c22:	03c9      	lsls	r1, r1, #15
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c28:	f7fe fadc 	bl	80031e4 <HAL_GetTick>
 8004c2c:	0003      	movs	r3, r0
 8004c2e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c32:	f7fe fad7 	bl	80031e4 <HAL_GetTick>
 8004c36:	0002      	movs	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e0f3      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004c44:	4b57      	ldr	r3, [pc, #348]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	041b      	lsls	r3, r3, #16
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x4ba>
 8004c50:	e019      	b.n	8004c86 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c52:	4b54      	ldr	r3, [pc, #336]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	4b53      	ldr	r3, [pc, #332]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004c58:	4956      	ldr	r1, [pc, #344]	; (8004db4 <HAL_RCC_OscConfig+0x63c>)
 8004c5a:	400a      	ands	r2, r1
 8004c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c5e:	f7fe fac1 	bl	80031e4 <HAL_GetTick>
 8004c62:	0003      	movs	r3, r0
 8004c64:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c68:	f7fe fabc 	bl	80031e4 <HAL_GetTick>
 8004c6c:	0002      	movs	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e0d8      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004c7a:	4b4a      	ldr	r3, [pc, #296]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	2380      	movs	r3, #128	; 0x80
 8004c80:	041b      	lsls	r3, r3, #16
 8004c82:	4013      	ands	r3, r2
 8004c84:	d1f0      	bne.n	8004c68 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d100      	bne.n	8004c90 <HAL_RCC_OscConfig+0x518>
 8004c8e:	e0cc      	b.n	8004e2a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c90:	4b44      	ldr	r3, [pc, #272]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	2238      	movs	r2, #56	; 0x38
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d100      	bne.n	8004c9e <HAL_RCC_OscConfig+0x526>
 8004c9c:	e07b      	b.n	8004d96 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d156      	bne.n	8004d54 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca6:	4b3f      	ldr	r3, [pc, #252]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b3e      	ldr	r3, [pc, #248]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004cac:	4942      	ldr	r1, [pc, #264]	; (8004db8 <HAL_RCC_OscConfig+0x640>)
 8004cae:	400a      	ands	r2, r1
 8004cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb2:	f7fe fa97 	bl	80031e4 <HAL_GetTick>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cbc:	f7fe fa92 	bl	80031e4 <HAL_GetTick>
 8004cc0:	0002      	movs	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e0ae      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cce:	4b35      	ldr	r3, [pc, #212]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	2380      	movs	r3, #128	; 0x80
 8004cd4:	049b      	lsls	r3, r3, #18
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d1f0      	bne.n	8004cbc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cda:	4b32      	ldr	r3, [pc, #200]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	4a37      	ldr	r2, [pc, #220]	; (8004dbc <HAL_RCC_OscConfig+0x644>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d00:	431a      	orrs	r2, r3
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	431a      	orrs	r2, r3
 8004d08:	4b26      	ldr	r3, [pc, #152]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004d0a:	430a      	orrs	r2, r1
 8004d0c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d0e:	4b25      	ldr	r3, [pc, #148]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004d14:	2180      	movs	r1, #128	; 0x80
 8004d16:	0449      	lsls	r1, r1, #17
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004d1c:	4b21      	ldr	r3, [pc, #132]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	4b20      	ldr	r3, [pc, #128]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004d22:	2180      	movs	r1, #128	; 0x80
 8004d24:	0549      	lsls	r1, r1, #21
 8004d26:	430a      	orrs	r2, r1
 8004d28:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2a:	f7fe fa5b 	bl	80031e4 <HAL_GetTick>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d34:	f7fe fa56 	bl	80031e4 <HAL_GetTick>
 8004d38:	0002      	movs	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e072      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d46:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	2380      	movs	r3, #128	; 0x80
 8004d4c:	049b      	lsls	r3, r3, #18
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d0f0      	beq.n	8004d34 <HAL_RCC_OscConfig+0x5bc>
 8004d52:	e06a      	b.n	8004e2a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d54:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004d5a:	4917      	ldr	r1, [pc, #92]	; (8004db8 <HAL_RCC_OscConfig+0x640>)
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fe fa40 	bl	80031e4 <HAL_GetTick>
 8004d64:	0003      	movs	r3, r0
 8004d66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6a:	f7fe fa3b 	bl	80031e4 <HAL_GetTick>
 8004d6e:	0002      	movs	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e057      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d7c:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	2380      	movs	r3, #128	; 0x80
 8004d82:	049b      	lsls	r3, r3, #18
 8004d84:	4013      	ands	r3, r2
 8004d86:	d1f0      	bne.n	8004d6a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	4b05      	ldr	r3, [pc, #20]	; (8004da4 <HAL_RCC_OscConfig+0x62c>)
 8004d8e:	490c      	ldr	r1, [pc, #48]	; (8004dc0 <HAL_RCC_OscConfig+0x648>)
 8004d90:	400a      	ands	r2, r1
 8004d92:	60da      	str	r2, [r3, #12]
 8004d94:	e049      	b.n	8004e2a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d112      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e044      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	40021000 	.word	0x40021000
 8004da8:	40007000 	.word	0x40007000
 8004dac:	00001388 	.word	0x00001388
 8004db0:	efffffff 	.word	0xefffffff
 8004db4:	ffbfffff 	.word	0xffbfffff
 8004db8:	feffffff 	.word	0xfeffffff
 8004dbc:	11c1808c 	.word	0x11c1808c
 8004dc0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004dc4:	4b1b      	ldr	r3, [pc, #108]	; (8004e34 <HAL_RCC_OscConfig+0x6bc>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2203      	movs	r2, #3
 8004dce:	401a      	ands	r2, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d126      	bne.n	8004e26 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	2270      	movs	r2, #112	; 0x70
 8004ddc:	401a      	ands	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d11f      	bne.n	8004e26 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	23fe      	movs	r3, #254	; 0xfe
 8004dea:	01db      	lsls	r3, r3, #7
 8004dec:	401a      	ands	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d116      	bne.n	8004e26 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	23f8      	movs	r3, #248	; 0xf8
 8004dfc:	039b      	lsls	r3, r3, #14
 8004dfe:	401a      	ands	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d10e      	bne.n	8004e26 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	23e0      	movs	r3, #224	; 0xe0
 8004e0c:	051b      	lsls	r3, r3, #20
 8004e0e:	401a      	ands	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d106      	bne.n	8004e26 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	0f5b      	lsrs	r3, r3, #29
 8004e1c:	075a      	lsls	r2, r3, #29
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d001      	beq.n	8004e2a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	0018      	movs	r0, r3
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	b008      	add	sp, #32
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000

08004e38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d101      	bne.n	8004e4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0e9      	b.n	8005020 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e4c:	4b76      	ldr	r3, [pc, #472]	; (8005028 <HAL_RCC_ClockConfig+0x1f0>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2207      	movs	r2, #7
 8004e52:	4013      	ands	r3, r2
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d91e      	bls.n	8004e98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5a:	4b73      	ldr	r3, [pc, #460]	; (8005028 <HAL_RCC_ClockConfig+0x1f0>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2207      	movs	r2, #7
 8004e60:	4393      	bics	r3, r2
 8004e62:	0019      	movs	r1, r3
 8004e64:	4b70      	ldr	r3, [pc, #448]	; (8005028 <HAL_RCC_ClockConfig+0x1f0>)
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004e6c:	f7fe f9ba 	bl	80031e4 <HAL_GetTick>
 8004e70:	0003      	movs	r3, r0
 8004e72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e74:	e009      	b.n	8004e8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e76:	f7fe f9b5 	bl	80031e4 <HAL_GetTick>
 8004e7a:	0002      	movs	r2, r0
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	4a6a      	ldr	r2, [pc, #424]	; (800502c <HAL_RCC_ClockConfig+0x1f4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d901      	bls.n	8004e8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e0ca      	b.n	8005020 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004e8a:	4b67      	ldr	r3, [pc, #412]	; (8005028 <HAL_RCC_ClockConfig+0x1f0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2207      	movs	r2, #7
 8004e90:	4013      	ands	r3, r2
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d1ee      	bne.n	8004e76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d015      	beq.n	8004ece <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	d006      	beq.n	8004eba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004eac:	4b60      	ldr	r3, [pc, #384]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	4b5f      	ldr	r3, [pc, #380]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004eb2:	21e0      	movs	r1, #224	; 0xe0
 8004eb4:	01c9      	lsls	r1, r1, #7
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004eba:	4b5d      	ldr	r3, [pc, #372]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	4a5d      	ldr	r2, [pc, #372]	; (8005034 <HAL_RCC_ClockConfig+0x1fc>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	0019      	movs	r1, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	4b59      	ldr	r3, [pc, #356]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d057      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ee0:	4b53      	ldr	r3, [pc, #332]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	2380      	movs	r3, #128	; 0x80
 8004ee6:	029b      	lsls	r3, r3, #10
 8004ee8:	4013      	ands	r3, r2
 8004eea:	d12b      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e097      	b.n	8005020 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d107      	bne.n	8004f08 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef8:	4b4d      	ldr	r3, [pc, #308]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	049b      	lsls	r3, r3, #18
 8004f00:	4013      	ands	r3, r2
 8004f02:	d11f      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e08b      	b.n	8005020 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d107      	bne.n	8004f20 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f10:	4b47      	ldr	r3, [pc, #284]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	2380      	movs	r3, #128	; 0x80
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4013      	ands	r3, r2
 8004f1a:	d113      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e07f      	b.n	8005020 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	d106      	bne.n	8004f36 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f28:	4b41      	ldr	r3, [pc, #260]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d108      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e074      	b.n	8005020 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f36:	4b3e      	ldr	r3, [pc, #248]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004f38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e06d      	b.n	8005020 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f44:	4b3a      	ldr	r3, [pc, #232]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2207      	movs	r2, #7
 8004f4a:	4393      	bics	r3, r2
 8004f4c:	0019      	movs	r1, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	4b37      	ldr	r3, [pc, #220]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004f54:	430a      	orrs	r2, r1
 8004f56:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f58:	f7fe f944 	bl	80031e4 <HAL_GetTick>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f60:	e009      	b.n	8004f76 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f62:	f7fe f93f 	bl	80031e4 <HAL_GetTick>
 8004f66:	0002      	movs	r2, r0
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	4a2f      	ldr	r2, [pc, #188]	; (800502c <HAL_RCC_ClockConfig+0x1f4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e054      	b.n	8005020 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	4b2e      	ldr	r3, [pc, #184]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	2238      	movs	r2, #56	; 0x38
 8004f7c:	401a      	ands	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	00db      	lsls	r3, r3, #3
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d1ec      	bne.n	8004f62 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f88:	4b27      	ldr	r3, [pc, #156]	; (8005028 <HAL_RCC_ClockConfig+0x1f0>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2207      	movs	r2, #7
 8004f8e:	4013      	ands	r3, r2
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d21e      	bcs.n	8004fd4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f96:	4b24      	ldr	r3, [pc, #144]	; (8005028 <HAL_RCC_ClockConfig+0x1f0>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2207      	movs	r2, #7
 8004f9c:	4393      	bics	r3, r2
 8004f9e:	0019      	movs	r1, r3
 8004fa0:	4b21      	ldr	r3, [pc, #132]	; (8005028 <HAL_RCC_ClockConfig+0x1f0>)
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004fa8:	f7fe f91c 	bl	80031e4 <HAL_GetTick>
 8004fac:	0003      	movs	r3, r0
 8004fae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fb0:	e009      	b.n	8004fc6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fb2:	f7fe f917 	bl	80031e4 <HAL_GetTick>
 8004fb6:	0002      	movs	r2, r0
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	4a1b      	ldr	r2, [pc, #108]	; (800502c <HAL_RCC_ClockConfig+0x1f4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e02c      	b.n	8005020 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004fc6:	4b18      	ldr	r3, [pc, #96]	; (8005028 <HAL_RCC_ClockConfig+0x1f0>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2207      	movs	r2, #7
 8004fcc:	4013      	ands	r3, r2
 8004fce:	683a      	ldr	r2, [r7, #0]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d1ee      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2204      	movs	r2, #4
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d009      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004fde:	4b14      	ldr	r3, [pc, #80]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	4a15      	ldr	r2, [pc, #84]	; (8005038 <HAL_RCC_ClockConfig+0x200>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	0019      	movs	r1, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68da      	ldr	r2, [r3, #12]
 8004fec:	4b10      	ldr	r3, [pc, #64]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8004ff2:	f000 f829 	bl	8005048 <HAL_RCC_GetSysClockFreq>
 8004ff6:	0001      	movs	r1, r0
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <HAL_RCC_ClockConfig+0x1f8>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	0a1b      	lsrs	r3, r3, #8
 8004ffe:	220f      	movs	r2, #15
 8005000:	401a      	ands	r2, r3
 8005002:	4b0e      	ldr	r3, [pc, #56]	; (800503c <HAL_RCC_ClockConfig+0x204>)
 8005004:	0092      	lsls	r2, r2, #2
 8005006:	58d3      	ldr	r3, [r2, r3]
 8005008:	221f      	movs	r2, #31
 800500a:	4013      	ands	r3, r2
 800500c:	000a      	movs	r2, r1
 800500e:	40da      	lsrs	r2, r3
 8005010:	4b0b      	ldr	r3, [pc, #44]	; (8005040 <HAL_RCC_ClockConfig+0x208>)
 8005012:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005014:	4b0b      	ldr	r3, [pc, #44]	; (8005044 <HAL_RCC_ClockConfig+0x20c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	0018      	movs	r0, r3
 800501a:	f7fe f887 	bl	800312c <HAL_InitTick>
 800501e:	0003      	movs	r3, r0
}
 8005020:	0018      	movs	r0, r3
 8005022:	46bd      	mov	sp, r7
 8005024:	b004      	add	sp, #16
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40022000 	.word	0x40022000
 800502c:	00001388 	.word	0x00001388
 8005030:	40021000 	.word	0x40021000
 8005034:	fffff0ff 	.word	0xfffff0ff
 8005038:	ffff8fff 	.word	0xffff8fff
 800503c:	0800a98c 	.word	0x0800a98c
 8005040:	20000004 	.word	0x20000004
 8005044:	20000008 	.word	0x20000008

08005048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800504e:	4b3c      	ldr	r3, [pc, #240]	; (8005140 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2238      	movs	r2, #56	; 0x38
 8005054:	4013      	ands	r3, r2
 8005056:	d10f      	bne.n	8005078 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005058:	4b39      	ldr	r3, [pc, #228]	; (8005140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	0adb      	lsrs	r3, r3, #11
 800505e:	2207      	movs	r2, #7
 8005060:	4013      	ands	r3, r2
 8005062:	2201      	movs	r2, #1
 8005064:	409a      	lsls	r2, r3
 8005066:	0013      	movs	r3, r2
 8005068:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800506a:	6839      	ldr	r1, [r7, #0]
 800506c:	4835      	ldr	r0, [pc, #212]	; (8005144 <HAL_RCC_GetSysClockFreq+0xfc>)
 800506e:	f7fb f865 	bl	800013c <__udivsi3>
 8005072:	0003      	movs	r3, r0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	e05d      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005078:	4b31      	ldr	r3, [pc, #196]	; (8005140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2238      	movs	r2, #56	; 0x38
 800507e:	4013      	ands	r3, r2
 8005080:	2b08      	cmp	r3, #8
 8005082:	d102      	bne.n	800508a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005084:	4b30      	ldr	r3, [pc, #192]	; (8005148 <HAL_RCC_GetSysClockFreq+0x100>)
 8005086:	613b      	str	r3, [r7, #16]
 8005088:	e054      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800508a:	4b2d      	ldr	r3, [pc, #180]	; (8005140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	2238      	movs	r2, #56	; 0x38
 8005090:	4013      	ands	r3, r2
 8005092:	2b10      	cmp	r3, #16
 8005094:	d138      	bne.n	8005108 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005096:	4b2a      	ldr	r3, [pc, #168]	; (8005140 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	2203      	movs	r2, #3
 800509c:	4013      	ands	r3, r2
 800509e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050a0:	4b27      	ldr	r3, [pc, #156]	; (8005140 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	091b      	lsrs	r3, r3, #4
 80050a6:	2207      	movs	r2, #7
 80050a8:	4013      	ands	r3, r2
 80050aa:	3301      	adds	r3, #1
 80050ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b03      	cmp	r3, #3
 80050b2:	d10d      	bne.n	80050d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050b4:	68b9      	ldr	r1, [r7, #8]
 80050b6:	4824      	ldr	r0, [pc, #144]	; (8005148 <HAL_RCC_GetSysClockFreq+0x100>)
 80050b8:	f7fb f840 	bl	800013c <__udivsi3>
 80050bc:	0003      	movs	r3, r0
 80050be:	0019      	movs	r1, r3
 80050c0:	4b1f      	ldr	r3, [pc, #124]	; (8005140 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	0a1b      	lsrs	r3, r3, #8
 80050c6:	227f      	movs	r2, #127	; 0x7f
 80050c8:	4013      	ands	r3, r2
 80050ca:	434b      	muls	r3, r1
 80050cc:	617b      	str	r3, [r7, #20]
        break;
 80050ce:	e00d      	b.n	80050ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80050d0:	68b9      	ldr	r1, [r7, #8]
 80050d2:	481c      	ldr	r0, [pc, #112]	; (8005144 <HAL_RCC_GetSysClockFreq+0xfc>)
 80050d4:	f7fb f832 	bl	800013c <__udivsi3>
 80050d8:	0003      	movs	r3, r0
 80050da:	0019      	movs	r1, r3
 80050dc:	4b18      	ldr	r3, [pc, #96]	; (8005140 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	0a1b      	lsrs	r3, r3, #8
 80050e2:	227f      	movs	r2, #127	; 0x7f
 80050e4:	4013      	ands	r3, r2
 80050e6:	434b      	muls	r3, r1
 80050e8:	617b      	str	r3, [r7, #20]
        break;
 80050ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80050ec:	4b14      	ldr	r3, [pc, #80]	; (8005140 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	0f5b      	lsrs	r3, r3, #29
 80050f2:	2207      	movs	r2, #7
 80050f4:	4013      	ands	r3, r2
 80050f6:	3301      	adds	r3, #1
 80050f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	6978      	ldr	r0, [r7, #20]
 80050fe:	f7fb f81d 	bl	800013c <__udivsi3>
 8005102:	0003      	movs	r3, r0
 8005104:	613b      	str	r3, [r7, #16]
 8005106:	e015      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005108:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	2238      	movs	r2, #56	; 0x38
 800510e:	4013      	ands	r3, r2
 8005110:	2b20      	cmp	r3, #32
 8005112:	d103      	bne.n	800511c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005114:	2380      	movs	r3, #128	; 0x80
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	e00b      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800511c:	4b08      	ldr	r3, [pc, #32]	; (8005140 <HAL_RCC_GetSysClockFreq+0xf8>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2238      	movs	r2, #56	; 0x38
 8005122:	4013      	ands	r3, r2
 8005124:	2b18      	cmp	r3, #24
 8005126:	d103      	bne.n	8005130 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005128:	23fa      	movs	r3, #250	; 0xfa
 800512a:	01db      	lsls	r3, r3, #7
 800512c:	613b      	str	r3, [r7, #16]
 800512e:	e001      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005134:	693b      	ldr	r3, [r7, #16]
}
 8005136:	0018      	movs	r0, r3
 8005138:	46bd      	mov	sp, r7
 800513a:	b006      	add	sp, #24
 800513c:	bd80      	pop	{r7, pc}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	40021000 	.word	0x40021000
 8005144:	00f42400 	.word	0x00f42400
 8005148:	007a1200 	.word	0x007a1200

0800514c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005150:	4b02      	ldr	r3, [pc, #8]	; (800515c <HAL_RCC_GetHCLKFreq+0x10>)
 8005152:	681b      	ldr	r3, [r3, #0]
}
 8005154:	0018      	movs	r0, r3
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	20000004 	.word	0x20000004

08005160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005160:	b5b0      	push	{r4, r5, r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005164:	f7ff fff2 	bl	800514c <HAL_RCC_GetHCLKFreq>
 8005168:	0004      	movs	r4, r0
 800516a:	f7ff faf9 	bl	8004760 <LL_RCC_GetAPB1Prescaler>
 800516e:	0003      	movs	r3, r0
 8005170:	0b1a      	lsrs	r2, r3, #12
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005174:	0092      	lsls	r2, r2, #2
 8005176:	58d3      	ldr	r3, [r2, r3]
 8005178:	221f      	movs	r2, #31
 800517a:	4013      	ands	r3, r2
 800517c:	40dc      	lsrs	r4, r3
 800517e:	0023      	movs	r3, r4
}
 8005180:	0018      	movs	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	bdb0      	pop	{r4, r5, r7, pc}
 8005186:	46c0      	nop			; (mov r8, r8)
 8005188:	0800a9cc 	.word	0x0800a9cc

0800518c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005194:	2313      	movs	r3, #19
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	2200      	movs	r2, #0
 800519a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800519c:	2312      	movs	r3, #18
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	2200      	movs	r2, #0
 80051a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	2380      	movs	r3, #128	; 0x80
 80051aa:	029b      	lsls	r3, r3, #10
 80051ac:	4013      	ands	r3, r2
 80051ae:	d100      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80051b0:	e0ad      	b.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051b2:	2011      	movs	r0, #17
 80051b4:	183b      	adds	r3, r7, r0
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051ba:	4b47      	ldr	r3, [pc, #284]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051be:	2380      	movs	r3, #128	; 0x80
 80051c0:	055b      	lsls	r3, r3, #21
 80051c2:	4013      	ands	r3, r2
 80051c4:	d110      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051c6:	4b44      	ldr	r3, [pc, #272]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051ca:	4b43      	ldr	r3, [pc, #268]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051cc:	2180      	movs	r1, #128	; 0x80
 80051ce:	0549      	lsls	r1, r1, #21
 80051d0:	430a      	orrs	r2, r1
 80051d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80051d4:	4b40      	ldr	r3, [pc, #256]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80051d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	055b      	lsls	r3, r3, #21
 80051dc:	4013      	ands	r3, r2
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051e2:	183b      	adds	r3, r7, r0
 80051e4:	2201      	movs	r2, #1
 80051e6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051e8:	4b3c      	ldr	r3, [pc, #240]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	4b3b      	ldr	r3, [pc, #236]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80051ee:	2180      	movs	r1, #128	; 0x80
 80051f0:	0049      	lsls	r1, r1, #1
 80051f2:	430a      	orrs	r2, r1
 80051f4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051f6:	f7fd fff5 	bl	80031e4 <HAL_GetTick>
 80051fa:	0003      	movs	r3, r0
 80051fc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051fe:	e00b      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005200:	f7fd fff0 	bl	80031e4 <HAL_GetTick>
 8005204:	0002      	movs	r2, r0
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d904      	bls.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800520e:	2313      	movs	r3, #19
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	2203      	movs	r2, #3
 8005214:	701a      	strb	r2, [r3, #0]
        break;
 8005216:	e005      	b.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005218:	4b30      	ldr	r3, [pc, #192]	; (80052dc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4013      	ands	r3, r2
 8005222:	d0ed      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005224:	2313      	movs	r3, #19
 8005226:	18fb      	adds	r3, r7, r3
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d15e      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800522e:	4b2a      	ldr	r3, [pc, #168]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005230:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005232:	23c0      	movs	r3, #192	; 0xc0
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4013      	ands	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d019      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	429a      	cmp	r2, r3
 8005248:	d014      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800524a:	4b23      	ldr	r3, [pc, #140]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800524c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524e:	4a24      	ldr	r2, [pc, #144]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8005250:	4013      	ands	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005254:	4b20      	ldr	r3, [pc, #128]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005256:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005258:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800525a:	2180      	movs	r1, #128	; 0x80
 800525c:	0249      	lsls	r1, r1, #9
 800525e:	430a      	orrs	r2, r1
 8005260:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005262:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005264:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005266:	4b1c      	ldr	r3, [pc, #112]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005268:	491e      	ldr	r1, [pc, #120]	; (80052e4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800526a:	400a      	ands	r2, r1
 800526c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800526e:	4b1a      	ldr	r3, [pc, #104]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	2201      	movs	r2, #1
 8005278:	4013      	ands	r3, r2
 800527a:	d016      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800527c:	f7fd ffb2 	bl	80031e4 <HAL_GetTick>
 8005280:	0003      	movs	r3, r0
 8005282:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005284:	e00c      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005286:	f7fd ffad 	bl	80031e4 <HAL_GetTick>
 800528a:	0002      	movs	r2, r0
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d904      	bls.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005296:	2313      	movs	r3, #19
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	2203      	movs	r2, #3
 800529c:	701a      	strb	r2, [r3, #0]
            break;
 800529e:	e004      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052a0:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052a4:	2202      	movs	r2, #2
 80052a6:	4013      	ands	r3, r2
 80052a8:	d0ed      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80052aa:	2313      	movs	r3, #19
 80052ac:	18fb      	adds	r3, r7, r3
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052b8:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80052ba:	4013      	ands	r3, r2
 80052bc:	0019      	movs	r1, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052c2:	4b05      	ldr	r3, [pc, #20]	; (80052d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80052c4:	430a      	orrs	r2, r1
 80052c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80052c8:	e016      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052ca:	2312      	movs	r3, #18
 80052cc:	18fb      	adds	r3, r7, r3
 80052ce:	2213      	movs	r2, #19
 80052d0:	18ba      	adds	r2, r7, r2
 80052d2:	7812      	ldrb	r2, [r2, #0]
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e00f      	b.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80052d8:	40021000 	.word	0x40021000
 80052dc:	40007000 	.word	0x40007000
 80052e0:	fffffcff 	.word	0xfffffcff
 80052e4:	fffeffff 	.word	0xfffeffff
 80052e8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ec:	2312      	movs	r3, #18
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	2213      	movs	r2, #19
 80052f2:	18ba      	adds	r2, r7, r2
 80052f4:	7812      	ldrb	r2, [r2, #0]
 80052f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052f8:	2311      	movs	r3, #17
 80052fa:	18fb      	adds	r3, r7, r3
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d105      	bne.n	800530e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005302:	4bb6      	ldr	r3, [pc, #728]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005304:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005306:	4bb5      	ldr	r3, [pc, #724]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005308:	49b5      	ldr	r1, [pc, #724]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800530a:	400a      	ands	r2, r1
 800530c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2201      	movs	r2, #1
 8005314:	4013      	ands	r3, r2
 8005316:	d009      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005318:	4bb0      	ldr	r3, [pc, #704]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800531a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800531c:	2203      	movs	r2, #3
 800531e:	4393      	bics	r3, r2
 8005320:	0019      	movs	r1, r3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685a      	ldr	r2, [r3, #4]
 8005326:	4bad      	ldr	r3, [pc, #692]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005328:	430a      	orrs	r2, r1
 800532a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2202      	movs	r2, #2
 8005332:	4013      	ands	r3, r2
 8005334:	d009      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005336:	4ba9      	ldr	r3, [pc, #676]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800533a:	220c      	movs	r2, #12
 800533c:	4393      	bics	r3, r2
 800533e:	0019      	movs	r1, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	4ba5      	ldr	r3, [pc, #660]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005346:	430a      	orrs	r2, r1
 8005348:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	2204      	movs	r2, #4
 8005350:	4013      	ands	r3, r2
 8005352:	d009      	beq.n	8005368 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005354:	4ba1      	ldr	r3, [pc, #644]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005358:	2230      	movs	r2, #48	; 0x30
 800535a:	4393      	bics	r3, r2
 800535c:	0019      	movs	r1, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68da      	ldr	r2, [r3, #12]
 8005362:	4b9e      	ldr	r3, [pc, #632]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005364:	430a      	orrs	r2, r1
 8005366:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2210      	movs	r2, #16
 800536e:	4013      	ands	r3, r2
 8005370:	d009      	beq.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005372:	4b9a      	ldr	r3, [pc, #616]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005376:	4a9b      	ldr	r2, [pc, #620]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8005378:	4013      	ands	r3, r2
 800537a:	0019      	movs	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	4b96      	ldr	r3, [pc, #600]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005382:	430a      	orrs	r2, r1
 8005384:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	2380      	movs	r3, #128	; 0x80
 800538c:	015b      	lsls	r3, r3, #5
 800538e:	4013      	ands	r3, r2
 8005390:	d009      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8005392:	4b92      	ldr	r3, [pc, #584]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	4a94      	ldr	r2, [pc, #592]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8005398:	4013      	ands	r3, r2
 800539a:	0019      	movs	r1, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	4b8e      	ldr	r3, [pc, #568]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053a2:	430a      	orrs	r2, r1
 80053a4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	2380      	movs	r3, #128	; 0x80
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4013      	ands	r3, r2
 80053b0:	d009      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053b2:	4b8a      	ldr	r3, [pc, #552]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b6:	4a8d      	ldr	r2, [pc, #564]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80053b8:	4013      	ands	r3, r2
 80053ba:	0019      	movs	r1, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053c0:	4b86      	ldr	r3, [pc, #536]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053c2:	430a      	orrs	r2, r1
 80053c4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	2380      	movs	r3, #128	; 0x80
 80053cc:	00db      	lsls	r3, r3, #3
 80053ce:	4013      	ands	r3, r2
 80053d0:	d009      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053d2:	4b82      	ldr	r3, [pc, #520]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d6:	4a86      	ldr	r2, [pc, #536]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80053d8:	4013      	ands	r3, r2
 80053da:	0019      	movs	r1, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e0:	4b7e      	ldr	r3, [pc, #504]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053e2:	430a      	orrs	r2, r1
 80053e4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2220      	movs	r2, #32
 80053ec:	4013      	ands	r3, r2
 80053ee:	d009      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053f0:	4b7a      	ldr	r3, [pc, #488]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80053f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f4:	4a7f      	ldr	r2, [pc, #508]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80053f6:	4013      	ands	r3, r2
 80053f8:	0019      	movs	r1, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	4b77      	ldr	r3, [pc, #476]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005400:	430a      	orrs	r2, r1
 8005402:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2240      	movs	r2, #64	; 0x40
 800540a:	4013      	ands	r3, r2
 800540c:	d009      	beq.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800540e:	4b73      	ldr	r3, [pc, #460]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	4a79      	ldr	r2, [pc, #484]	; (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8005414:	4013      	ands	r3, r2
 8005416:	0019      	movs	r1, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	4b6f      	ldr	r3, [pc, #444]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800541e:	430a      	orrs	r2, r1
 8005420:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	01db      	lsls	r3, r3, #7
 800542a:	4013      	ands	r3, r2
 800542c:	d015      	beq.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800542e:	4b6b      	ldr	r3, [pc, #428]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	0899      	lsrs	r1, r3, #2
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800543a:	4b68      	ldr	r3, [pc, #416]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800543c:	430a      	orrs	r2, r1
 800543e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005444:	2380      	movs	r3, #128	; 0x80
 8005446:	05db      	lsls	r3, r3, #23
 8005448:	429a      	cmp	r2, r3
 800544a:	d106      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800544c:	4b63      	ldr	r3, [pc, #396]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	4b62      	ldr	r3, [pc, #392]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005452:	2180      	movs	r1, #128	; 0x80
 8005454:	0249      	lsls	r1, r1, #9
 8005456:	430a      	orrs	r2, r1
 8005458:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	2380      	movs	r3, #128	; 0x80
 8005460:	031b      	lsls	r3, r3, #12
 8005462:	4013      	ands	r3, r2
 8005464:	d009      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005466:	4b5d      	ldr	r3, [pc, #372]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546a:	2240      	movs	r2, #64	; 0x40
 800546c:	4393      	bics	r3, r2
 800546e:	0019      	movs	r1, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005474:	4b59      	ldr	r3, [pc, #356]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005476:	430a      	orrs	r2, r1
 8005478:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	2380      	movs	r3, #128	; 0x80
 8005480:	039b      	lsls	r3, r3, #14
 8005482:	4013      	ands	r3, r2
 8005484:	d016      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005486:	4b55      	ldr	r3, [pc, #340]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548a:	4a5c      	ldr	r2, [pc, #368]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800548c:	4013      	ands	r3, r2
 800548e:	0019      	movs	r1, r3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005494:	4b51      	ldr	r3, [pc, #324]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005496:	430a      	orrs	r2, r1
 8005498:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800549e:	2380      	movs	r3, #128	; 0x80
 80054a0:	03db      	lsls	r3, r3, #15
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d106      	bne.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80054a6:	4b4d      	ldr	r3, [pc, #308]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054a8:	68da      	ldr	r2, [r3, #12]
 80054aa:	4b4c      	ldr	r3, [pc, #304]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054ac:	2180      	movs	r1, #128	; 0x80
 80054ae:	0449      	lsls	r1, r1, #17
 80054b0:	430a      	orrs	r2, r1
 80054b2:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	2380      	movs	r3, #128	; 0x80
 80054ba:	03db      	lsls	r3, r3, #15
 80054bc:	4013      	ands	r3, r2
 80054be:	d016      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80054c0:	4b46      	ldr	r3, [pc, #280]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054c4:	4a4e      	ldr	r2, [pc, #312]	; (8005600 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80054c6:	4013      	ands	r3, r2
 80054c8:	0019      	movs	r1, r3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054ce:	4b43      	ldr	r3, [pc, #268]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054d0:	430a      	orrs	r2, r1
 80054d2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054d8:	2380      	movs	r3, #128	; 0x80
 80054da:	045b      	lsls	r3, r3, #17
 80054dc:	429a      	cmp	r2, r3
 80054de:	d106      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80054e0:	4b3e      	ldr	r3, [pc, #248]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054e2:	68da      	ldr	r2, [r3, #12]
 80054e4:	4b3d      	ldr	r3, [pc, #244]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054e6:	2180      	movs	r1, #128	; 0x80
 80054e8:	0449      	lsls	r1, r1, #17
 80054ea:	430a      	orrs	r2, r1
 80054ec:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	2380      	movs	r3, #128	; 0x80
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	4013      	ands	r3, r2
 80054f8:	d014      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80054fa:	4b38      	ldr	r3, [pc, #224]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80054fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fe:	2203      	movs	r2, #3
 8005500:	4393      	bics	r3, r2
 8005502:	0019      	movs	r1, r3
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a1a      	ldr	r2, [r3, #32]
 8005508:	4b34      	ldr	r3, [pc, #208]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800550a:	430a      	orrs	r2, r1
 800550c:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d106      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005516:	4b31      	ldr	r3, [pc, #196]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	4b30      	ldr	r3, [pc, #192]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800551c:	2180      	movs	r1, #128	; 0x80
 800551e:	0249      	lsls	r1, r1, #9
 8005520:	430a      	orrs	r2, r1
 8005522:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	2380      	movs	r3, #128	; 0x80
 800552a:	019b      	lsls	r3, r3, #6
 800552c:	4013      	ands	r3, r2
 800552e:	d014      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005530:	4b2a      	ldr	r3, [pc, #168]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005534:	220c      	movs	r2, #12
 8005536:	4393      	bics	r3, r2
 8005538:	0019      	movs	r1, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800553e:	4b27      	ldr	r3, [pc, #156]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005540:	430a      	orrs	r2, r1
 8005542:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	2b04      	cmp	r3, #4
 800554a:	d106      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800554c:	4b23      	ldr	r3, [pc, #140]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	4b22      	ldr	r3, [pc, #136]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005552:	2180      	movs	r1, #128	; 0x80
 8005554:	0249      	lsls	r1, r1, #9
 8005556:	430a      	orrs	r2, r1
 8005558:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	2380      	movs	r3, #128	; 0x80
 8005560:	045b      	lsls	r3, r3, #17
 8005562:	4013      	ands	r3, r2
 8005564:	d016      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005566:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556a:	4a22      	ldr	r2, [pc, #136]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800556c:	4013      	ands	r3, r2
 800556e:	0019      	movs	r1, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005574:	4b19      	ldr	r3, [pc, #100]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005576:	430a      	orrs	r2, r1
 8005578:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	019b      	lsls	r3, r3, #6
 8005582:	429a      	cmp	r2, r3
 8005584:	d106      	bne.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005586:	4b15      	ldr	r3, [pc, #84]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8005588:	68da      	ldr	r2, [r3, #12]
 800558a:	4b14      	ldr	r3, [pc, #80]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800558c:	2180      	movs	r1, #128	; 0x80
 800558e:	0449      	lsls	r1, r1, #17
 8005590:	430a      	orrs	r2, r1
 8005592:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	2380      	movs	r3, #128	; 0x80
 800559a:	049b      	lsls	r3, r3, #18
 800559c:	4013      	ands	r3, r2
 800559e:	d016      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055a0:	4b0e      	ldr	r3, [pc, #56]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a4:	4a10      	ldr	r2, [pc, #64]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80055a6:	4013      	ands	r3, r2
 80055a8:	0019      	movs	r1, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055ae:	4b0b      	ldr	r3, [pc, #44]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055b0:	430a      	orrs	r2, r1
 80055b2:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055b8:	2380      	movs	r3, #128	; 0x80
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	429a      	cmp	r2, r3
 80055be:	d106      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80055c0:	4b06      	ldr	r3, [pc, #24]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055c2:	68da      	ldr	r2, [r3, #12]
 80055c4:	4b05      	ldr	r3, [pc, #20]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80055c6:	2180      	movs	r1, #128	; 0x80
 80055c8:	0449      	lsls	r1, r1, #17
 80055ca:	430a      	orrs	r2, r1
 80055cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80055ce:	2312      	movs	r3, #18
 80055d0:	18fb      	adds	r3, r7, r3
 80055d2:	781b      	ldrb	r3, [r3, #0]
}
 80055d4:	0018      	movs	r0, r3
 80055d6:	46bd      	mov	sp, r7
 80055d8:	b006      	add	sp, #24
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	40021000 	.word	0x40021000
 80055e0:	efffffff 	.word	0xefffffff
 80055e4:	fffff3ff 	.word	0xfffff3ff
 80055e8:	fffffcff 	.word	0xfffffcff
 80055ec:	fff3ffff 	.word	0xfff3ffff
 80055f0:	ffcfffff 	.word	0xffcfffff
 80055f4:	ffffcfff 	.word	0xffffcfff
 80055f8:	ffff3fff 	.word	0xffff3fff
 80055fc:	ffbfffff 	.word	0xffbfffff
 8005600:	feffffff 	.word	0xfeffffff

08005604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e046      	b.n	80056a4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2288      	movs	r2, #136	; 0x88
 800561a:	589b      	ldr	r3, [r3, r2]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d107      	bne.n	8005630 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2284      	movs	r2, #132	; 0x84
 8005624:	2100      	movs	r1, #0
 8005626:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	0018      	movs	r0, r3
 800562c:	f7fd fbce 	bl	8002dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2288      	movs	r2, #136	; 0x88
 8005634:	2124      	movs	r1, #36	; 0x24
 8005636:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2101      	movs	r1, #1
 8005644:	438a      	bics	r2, r1
 8005646:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	0018      	movs	r0, r3
 800564c:	f000 fc7c 	bl	8005f48 <UART_SetConfig>
 8005650:	0003      	movs	r3, r0
 8005652:	2b01      	cmp	r3, #1
 8005654:	d101      	bne.n	800565a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e024      	b.n	80056a4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	0018      	movs	r0, r3
 8005666:	f000 ffc5 	bl	80065f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	490d      	ldr	r1, [pc, #52]	; (80056ac <HAL_UART_Init+0xa8>)
 8005676:	400a      	ands	r2, r1
 8005678:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689a      	ldr	r2, [r3, #8]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	212a      	movs	r1, #42	; 0x2a
 8005686:	438a      	bics	r2, r1
 8005688:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2101      	movs	r1, #1
 8005696:	430a      	orrs	r2, r1
 8005698:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	0018      	movs	r0, r3
 800569e:	f001 f85d 	bl	800675c <UART_CheckIdleState>
 80056a2:	0003      	movs	r3, r0
}
 80056a4:	0018      	movs	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b002      	add	sp, #8
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	ffffb7ff 	.word	0xffffb7ff

080056b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08a      	sub	sp, #40	; 0x28
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	1dbb      	adds	r3, r7, #6
 80056be:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2288      	movs	r2, #136	; 0x88
 80056c4:	589b      	ldr	r3, [r3, r2]
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d000      	beq.n	80056cc <HAL_UART_Transmit+0x1c>
 80056ca:	e088      	b.n	80057de <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_UART_Transmit+0x2a>
 80056d2:	1dbb      	adds	r3, r7, #6
 80056d4:	881b      	ldrh	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e080      	b.n	80057e0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	2380      	movs	r3, #128	; 0x80
 80056e4:	015b      	lsls	r3, r3, #5
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d109      	bne.n	80056fe <HAL_UART_Transmit+0x4e>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d105      	bne.n	80056fe <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2201      	movs	r2, #1
 80056f6:	4013      	ands	r3, r2
 80056f8:	d001      	beq.n	80056fe <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e070      	b.n	80057e0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2290      	movs	r2, #144	; 0x90
 8005702:	2100      	movs	r1, #0
 8005704:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2288      	movs	r2, #136	; 0x88
 800570a:	2121      	movs	r1, #33	; 0x21
 800570c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800570e:	f7fd fd69 	bl	80031e4 <HAL_GetTick>
 8005712:	0003      	movs	r3, r0
 8005714:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	1dba      	adds	r2, r7, #6
 800571a:	2154      	movs	r1, #84	; 0x54
 800571c:	8812      	ldrh	r2, [r2, #0]
 800571e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	1dba      	adds	r2, r7, #6
 8005724:	2156      	movs	r1, #86	; 0x56
 8005726:	8812      	ldrh	r2, [r2, #0]
 8005728:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	689a      	ldr	r2, [r3, #8]
 800572e:	2380      	movs	r3, #128	; 0x80
 8005730:	015b      	lsls	r3, r3, #5
 8005732:	429a      	cmp	r2, r3
 8005734:	d108      	bne.n	8005748 <HAL_UART_Transmit+0x98>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d104      	bne.n	8005748 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800573e:	2300      	movs	r3, #0
 8005740:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	e003      	b.n	8005750 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800574c:	2300      	movs	r3, #0
 800574e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005750:	e02c      	b.n	80057ac <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	0013      	movs	r3, r2
 800575c:	2200      	movs	r2, #0
 800575e:	2180      	movs	r1, #128	; 0x80
 8005760:	f001 f84a 	bl	80067f8 <UART_WaitOnFlagUntilTimeout>
 8005764:	1e03      	subs	r3, r0, #0
 8005766:	d001      	beq.n	800576c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e039      	b.n	80057e0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10b      	bne.n	800578a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	001a      	movs	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	05d2      	lsls	r2, r2, #23
 800577e:	0dd2      	lsrs	r2, r2, #23
 8005780:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	3302      	adds	r3, #2
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	e007      	b.n	800579a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	781a      	ldrb	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	3301      	adds	r3, #1
 8005798:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2256      	movs	r2, #86	; 0x56
 800579e:	5a9b      	ldrh	r3, [r3, r2]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	3b01      	subs	r3, #1
 80057a4:	b299      	uxth	r1, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2256      	movs	r2, #86	; 0x56
 80057aa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2256      	movs	r2, #86	; 0x56
 80057b0:	5a9b      	ldrh	r3, [r3, r2]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1cc      	bne.n	8005752 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	9300      	str	r3, [sp, #0]
 80057c0:	0013      	movs	r3, r2
 80057c2:	2200      	movs	r2, #0
 80057c4:	2140      	movs	r1, #64	; 0x40
 80057c6:	f001 f817 	bl	80067f8 <UART_WaitOnFlagUntilTimeout>
 80057ca:	1e03      	subs	r3, r0, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80057ce:	2303      	movs	r3, #3
 80057d0:	e006      	b.n	80057e0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2288      	movs	r2, #136	; 0x88
 80057d6:	2120      	movs	r1, #32
 80057d8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80057da:	2300      	movs	r3, #0
 80057dc:	e000      	b.n	80057e0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80057de:	2302      	movs	r3, #2
  }
}
 80057e0:	0018      	movs	r0, r3
 80057e2:	46bd      	mov	sp, r7
 80057e4:	b008      	add	sp, #32
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	1dbb      	adds	r3, r7, #6
 80057f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	228c      	movs	r2, #140	; 0x8c
 80057fa:	589b      	ldr	r3, [r3, r2]
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d14f      	bne.n	80058a0 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_UART_Receive_IT+0x26>
 8005806:	1dbb      	adds	r3, r7, #6
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e047      	b.n	80058a2 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689a      	ldr	r2, [r3, #8]
 8005816:	2380      	movs	r3, #128	; 0x80
 8005818:	015b      	lsls	r3, r3, #5
 800581a:	429a      	cmp	r2, r3
 800581c:	d109      	bne.n	8005832 <HAL_UART_Receive_IT+0x4a>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d105      	bne.n	8005832 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	2201      	movs	r2, #1
 800582a:	4013      	ands	r3, r2
 800582c:	d001      	beq.n	8005832 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800582e:	2301      	movs	r3, #1
 8005830:	e037      	b.n	80058a2 <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1b      	ldr	r2, [pc, #108]	; (80058ac <HAL_UART_Receive_IT+0xc4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d025      	beq.n	800588e <HAL_UART_Receive_IT+0xa6>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1a      	ldr	r2, [pc, #104]	; (80058b0 <HAL_UART_Receive_IT+0xc8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d020      	beq.n	800588e <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	2380      	movs	r3, #128	; 0x80
 8005854:	041b      	lsls	r3, r3, #16
 8005856:	4013      	ands	r3, r2
 8005858:	d019      	beq.n	800588e <HAL_UART_Receive_IT+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800585a:	f3ef 8310 	mrs	r3, PRIMASK
 800585e:	613b      	str	r3, [r7, #16]
  return(result);
 8005860:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	2301      	movs	r3, #1
 8005866:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f383 8810 	msr	PRIMASK, r3
}
 800586e:	46c0      	nop			; (mov r8, r8)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2180      	movs	r1, #128	; 0x80
 800587c:	04c9      	lsls	r1, r1, #19
 800587e:	430a      	orrs	r2, r1
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	f383 8810 	msr	PRIMASK, r3
}
 800588c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800588e:	1dbb      	adds	r3, r7, #6
 8005890:	881a      	ldrh	r2, [r3, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	0018      	movs	r0, r3
 8005898:	f001 f876 	bl	8006988 <UART_Start_Receive_IT>
 800589c:	0003      	movs	r3, r0
 800589e:	e000      	b.n	80058a2 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80058a0:	2302      	movs	r3, #2
  }
}
 80058a2:	0018      	movs	r0, r3
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b008      	add	sp, #32
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	40008000 	.word	0x40008000
 80058b0:	40008400 	.word	0x40008400

080058b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058b4:	b5b0      	push	{r4, r5, r7, lr}
 80058b6:	b0aa      	sub	sp, #168	; 0xa8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	69db      	ldr	r3, [r3, #28]
 80058c2:	22a4      	movs	r2, #164	; 0xa4
 80058c4:	18b9      	adds	r1, r7, r2
 80058c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	20a0      	movs	r0, #160	; 0xa0
 80058d0:	1839      	adds	r1, r7, r0
 80058d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	249c      	movs	r4, #156	; 0x9c
 80058dc:	1939      	adds	r1, r7, r4
 80058de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058e0:	0011      	movs	r1, r2
 80058e2:	18bb      	adds	r3, r7, r2
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4aa2      	ldr	r2, [pc, #648]	; (8005b70 <HAL_UART_IRQHandler+0x2bc>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	2298      	movs	r2, #152	; 0x98
 80058ec:	18bd      	adds	r5, r7, r2
 80058ee:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80058f0:	18bb      	adds	r3, r7, r2
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11a      	bne.n	800592e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058f8:	187b      	adds	r3, r7, r1
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2220      	movs	r2, #32
 80058fe:	4013      	ands	r3, r2
 8005900:	d015      	beq.n	800592e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005902:	183b      	adds	r3, r7, r0
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2220      	movs	r2, #32
 8005908:	4013      	ands	r3, r2
 800590a:	d105      	bne.n	8005918 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800590c:	193b      	adds	r3, r7, r4
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	2380      	movs	r3, #128	; 0x80
 8005912:	055b      	lsls	r3, r3, #21
 8005914:	4013      	ands	r3, r2
 8005916:	d00a      	beq.n	800592e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800591c:	2b00      	cmp	r3, #0
 800591e:	d100      	bne.n	8005922 <HAL_UART_IRQHandler+0x6e>
 8005920:	e2dc      	b.n	8005edc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	0010      	movs	r0, r2
 800592a:	4798      	blx	r3
      }
      return;
 800592c:	e2d6      	b.n	8005edc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800592e:	2398      	movs	r3, #152	; 0x98
 8005930:	18fb      	adds	r3, r7, r3
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d100      	bne.n	800593a <HAL_UART_IRQHandler+0x86>
 8005938:	e122      	b.n	8005b80 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800593a:	239c      	movs	r3, #156	; 0x9c
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a8c      	ldr	r2, [pc, #560]	; (8005b74 <HAL_UART_IRQHandler+0x2c0>)
 8005942:	4013      	ands	r3, r2
 8005944:	d106      	bne.n	8005954 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005946:	23a0      	movs	r3, #160	; 0xa0
 8005948:	18fb      	adds	r3, r7, r3
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a8a      	ldr	r2, [pc, #552]	; (8005b78 <HAL_UART_IRQHandler+0x2c4>)
 800594e:	4013      	ands	r3, r2
 8005950:	d100      	bne.n	8005954 <HAL_UART_IRQHandler+0xa0>
 8005952:	e115      	b.n	8005b80 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005954:	23a4      	movs	r3, #164	; 0xa4
 8005956:	18fb      	adds	r3, r7, r3
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2201      	movs	r2, #1
 800595c:	4013      	ands	r3, r2
 800595e:	d012      	beq.n	8005986 <HAL_UART_IRQHandler+0xd2>
 8005960:	23a0      	movs	r3, #160	; 0xa0
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	2380      	movs	r3, #128	; 0x80
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	4013      	ands	r3, r2
 800596c:	d00b      	beq.n	8005986 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2201      	movs	r2, #1
 8005974:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2290      	movs	r2, #144	; 0x90
 800597a:	589b      	ldr	r3, [r3, r2]
 800597c:	2201      	movs	r2, #1
 800597e:	431a      	orrs	r2, r3
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2190      	movs	r1, #144	; 0x90
 8005984:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005986:	23a4      	movs	r3, #164	; 0xa4
 8005988:	18fb      	adds	r3, r7, r3
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2202      	movs	r2, #2
 800598e:	4013      	ands	r3, r2
 8005990:	d011      	beq.n	80059b6 <HAL_UART_IRQHandler+0x102>
 8005992:	239c      	movs	r3, #156	; 0x9c
 8005994:	18fb      	adds	r3, r7, r3
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2201      	movs	r2, #1
 800599a:	4013      	ands	r3, r2
 800599c:	d00b      	beq.n	80059b6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2202      	movs	r2, #2
 80059a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2290      	movs	r2, #144	; 0x90
 80059aa:	589b      	ldr	r3, [r3, r2]
 80059ac:	2204      	movs	r2, #4
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2190      	movs	r1, #144	; 0x90
 80059b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059b6:	23a4      	movs	r3, #164	; 0xa4
 80059b8:	18fb      	adds	r3, r7, r3
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2204      	movs	r2, #4
 80059be:	4013      	ands	r3, r2
 80059c0:	d011      	beq.n	80059e6 <HAL_UART_IRQHandler+0x132>
 80059c2:	239c      	movs	r3, #156	; 0x9c
 80059c4:	18fb      	adds	r3, r7, r3
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2201      	movs	r2, #1
 80059ca:	4013      	ands	r3, r2
 80059cc:	d00b      	beq.n	80059e6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2204      	movs	r2, #4
 80059d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2290      	movs	r2, #144	; 0x90
 80059da:	589b      	ldr	r3, [r3, r2]
 80059dc:	2202      	movs	r2, #2
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2190      	movs	r1, #144	; 0x90
 80059e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059e6:	23a4      	movs	r3, #164	; 0xa4
 80059e8:	18fb      	adds	r3, r7, r3
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2208      	movs	r2, #8
 80059ee:	4013      	ands	r3, r2
 80059f0:	d017      	beq.n	8005a22 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059f2:	23a0      	movs	r3, #160	; 0xa0
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2220      	movs	r2, #32
 80059fa:	4013      	ands	r3, r2
 80059fc:	d105      	bne.n	8005a0a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80059fe:	239c      	movs	r3, #156	; 0x9c
 8005a00:	18fb      	adds	r3, r7, r3
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a5b      	ldr	r2, [pc, #364]	; (8005b74 <HAL_UART_IRQHandler+0x2c0>)
 8005a06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a08:	d00b      	beq.n	8005a22 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2208      	movs	r2, #8
 8005a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2290      	movs	r2, #144	; 0x90
 8005a16:	589b      	ldr	r3, [r3, r2]
 8005a18:	2208      	movs	r2, #8
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2190      	movs	r1, #144	; 0x90
 8005a20:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a22:	23a4      	movs	r3, #164	; 0xa4
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	2380      	movs	r3, #128	; 0x80
 8005a2a:	011b      	lsls	r3, r3, #4
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	d013      	beq.n	8005a58 <HAL_UART_IRQHandler+0x1a4>
 8005a30:	23a0      	movs	r3, #160	; 0xa0
 8005a32:	18fb      	adds	r3, r7, r3
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	2380      	movs	r3, #128	; 0x80
 8005a38:	04db      	lsls	r3, r3, #19
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	d00c      	beq.n	8005a58 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2280      	movs	r2, #128	; 0x80
 8005a44:	0112      	lsls	r2, r2, #4
 8005a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2290      	movs	r2, #144	; 0x90
 8005a4c:	589b      	ldr	r3, [r3, r2]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	431a      	orrs	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2190      	movs	r1, #144	; 0x90
 8005a56:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2290      	movs	r2, #144	; 0x90
 8005a5c:	589b      	ldr	r3, [r3, r2]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d100      	bne.n	8005a64 <HAL_UART_IRQHandler+0x1b0>
 8005a62:	e23d      	b.n	8005ee0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a64:	23a4      	movs	r3, #164	; 0xa4
 8005a66:	18fb      	adds	r3, r7, r3
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d015      	beq.n	8005a9c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a70:	23a0      	movs	r3, #160	; 0xa0
 8005a72:	18fb      	adds	r3, r7, r3
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2220      	movs	r2, #32
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d106      	bne.n	8005a8a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a7c:	239c      	movs	r3, #156	; 0x9c
 8005a7e:	18fb      	adds	r3, r7, r3
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	2380      	movs	r3, #128	; 0x80
 8005a84:	055b      	lsls	r3, r3, #21
 8005a86:	4013      	ands	r3, r2
 8005a88:	d008      	beq.n	8005a9c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d004      	beq.n	8005a9c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	0010      	movs	r0, r2
 8005a9a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2290      	movs	r2, #144	; 0x90
 8005aa0:	589b      	ldr	r3, [r3, r2]
 8005aa2:	2194      	movs	r1, #148	; 0x94
 8005aa4:	187a      	adds	r2, r7, r1
 8005aa6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2240      	movs	r2, #64	; 0x40
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	2b40      	cmp	r3, #64	; 0x40
 8005ab4:	d004      	beq.n	8005ac0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ab6:	187b      	adds	r3, r7, r1
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2228      	movs	r2, #40	; 0x28
 8005abc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005abe:	d04c      	beq.n	8005b5a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f001 f884 	bl	8006bd0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	2240      	movs	r2, #64	; 0x40
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	2b40      	cmp	r3, #64	; 0x40
 8005ad4:	d13c      	bne.n	8005b50 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8005ada:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005adc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ade:	2090      	movs	r0, #144	; 0x90
 8005ae0:	183a      	adds	r2, r7, r0
 8005ae2:	6013      	str	r3, [r2, #0]
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005aea:	f383 8810 	msr	PRIMASK, r3
}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2140      	movs	r1, #64	; 0x40
 8005afc:	438a      	bics	r2, r1
 8005afe:	609a      	str	r2, [r3, #8]
 8005b00:	183b      	adds	r3, r7, r0
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b08:	f383 8810 	msr	PRIMASK, r3
}
 8005b0c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2280      	movs	r2, #128	; 0x80
 8005b12:	589b      	ldr	r3, [r3, r2]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d016      	beq.n	8005b46 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2280      	movs	r2, #128	; 0x80
 8005b1c:	589b      	ldr	r3, [r3, r2]
 8005b1e:	4a17      	ldr	r2, [pc, #92]	; (8005b7c <HAL_UART_IRQHandler+0x2c8>)
 8005b20:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2280      	movs	r2, #128	; 0x80
 8005b26:	589b      	ldr	r3, [r3, r2]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f7fd fcc7 	bl	80034bc <HAL_DMA_Abort_IT>
 8005b2e:	1e03      	subs	r3, r0, #0
 8005b30:	d01c      	beq.n	8005b6c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2280      	movs	r2, #128	; 0x80
 8005b36:	589b      	ldr	r3, [r3, r2]
 8005b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	2180      	movs	r1, #128	; 0x80
 8005b3e:	5852      	ldr	r2, [r2, r1]
 8005b40:	0010      	movs	r0, r2
 8005b42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b44:	e012      	b.n	8005b6c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	0018      	movs	r0, r3
 8005b4a:	f000 f9e9 	bl	8005f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4e:	e00d      	b.n	8005b6c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	0018      	movs	r0, r3
 8005b54:	f000 f9e4 	bl	8005f20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b58:	e008      	b.n	8005b6c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f000 f9df 	bl	8005f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2290      	movs	r2, #144	; 0x90
 8005b66:	2100      	movs	r1, #0
 8005b68:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005b6a:	e1b9      	b.n	8005ee0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b6c:	46c0      	nop			; (mov r8, r8)
    return;
 8005b6e:	e1b7      	b.n	8005ee0 <HAL_UART_IRQHandler+0x62c>
 8005b70:	0000080f 	.word	0x0000080f
 8005b74:	10000001 	.word	0x10000001
 8005b78:	04000120 	.word	0x04000120
 8005b7c:	08006c9d 	.word	0x08006c9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d000      	beq.n	8005b8a <HAL_UART_IRQHandler+0x2d6>
 8005b88:	e13e      	b.n	8005e08 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b8a:	23a4      	movs	r3, #164	; 0xa4
 8005b8c:	18fb      	adds	r3, r7, r3
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2210      	movs	r2, #16
 8005b92:	4013      	ands	r3, r2
 8005b94:	d100      	bne.n	8005b98 <HAL_UART_IRQHandler+0x2e4>
 8005b96:	e137      	b.n	8005e08 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b98:	23a0      	movs	r3, #160	; 0xa0
 8005b9a:	18fb      	adds	r3, r7, r3
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2210      	movs	r2, #16
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d100      	bne.n	8005ba6 <HAL_UART_IRQHandler+0x2f2>
 8005ba4:	e130      	b.n	8005e08 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2210      	movs	r2, #16
 8005bac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2240      	movs	r2, #64	; 0x40
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	d000      	beq.n	8005bbe <HAL_UART_IRQHandler+0x30a>
 8005bbc:	e0a4      	b.n	8005d08 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2280      	movs	r2, #128	; 0x80
 8005bc2:	589b      	ldr	r3, [r3, r2]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	217e      	movs	r1, #126	; 0x7e
 8005bca:	187b      	adds	r3, r7, r1
 8005bcc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8005bce:	187b      	adds	r3, r7, r1
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d100      	bne.n	8005bd8 <HAL_UART_IRQHandler+0x324>
 8005bd6:	e185      	b.n	8005ee4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	225c      	movs	r2, #92	; 0x5c
 8005bdc:	5a9b      	ldrh	r3, [r3, r2]
 8005bde:	187a      	adds	r2, r7, r1
 8005be0:	8812      	ldrh	r2, [r2, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d300      	bcc.n	8005be8 <HAL_UART_IRQHandler+0x334>
 8005be6:	e17d      	b.n	8005ee4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	187a      	adds	r2, r7, r1
 8005bec:	215e      	movs	r1, #94	; 0x5e
 8005bee:	8812      	ldrh	r2, [r2, #0]
 8005bf0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2280      	movs	r2, #128	; 0x80
 8005bf6:	589b      	ldr	r3, [r3, r2]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d170      	bne.n	8005ce4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c02:	f3ef 8310 	mrs	r3, PRIMASK
 8005c06:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c12:	f383 8810 	msr	PRIMASK, r3
}
 8005c16:	46c0      	nop			; (mov r8, r8)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	49b4      	ldr	r1, [pc, #720]	; (8005ef4 <HAL_UART_IRQHandler+0x640>)
 8005c24:	400a      	ands	r2, r1
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c2a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2e:	f383 8810 	msr	PRIMASK, r3
}
 8005c32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c34:	f3ef 8310 	mrs	r3, PRIMASK
 8005c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3c:	677b      	str	r3, [r7, #116]	; 0x74
 8005c3e:	2301      	movs	r3, #1
 8005c40:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c44:	f383 8810 	msr	PRIMASK, r3
}
 8005c48:	46c0      	nop			; (mov r8, r8)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2101      	movs	r1, #1
 8005c56:	438a      	bics	r2, r1
 8005c58:	609a      	str	r2, [r3, #8]
 8005c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c5c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c60:	f383 8810 	msr	PRIMASK, r3
}
 8005c64:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c66:	f3ef 8310 	mrs	r3, PRIMASK
 8005c6a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8005c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c70:	2301      	movs	r3, #1
 8005c72:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c76:	f383 8810 	msr	PRIMASK, r3
}
 8005c7a:	46c0      	nop			; (mov r8, r8)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689a      	ldr	r2, [r3, #8]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2140      	movs	r1, #64	; 0x40
 8005c88:	438a      	bics	r2, r1
 8005c8a:	609a      	str	r2, [r3, #8]
 8005c8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c8e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c92:	f383 8810 	msr	PRIMASK, r3
}
 8005c96:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	228c      	movs	r2, #140	; 0x8c
 8005c9c:	2120      	movs	r1, #32
 8005c9e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8005caa:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8005cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cb6:	f383 8810 	msr	PRIMASK, r3
}
 8005cba:	46c0      	nop			; (mov r8, r8)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681a      	ldr	r2, [r3, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2110      	movs	r1, #16
 8005cc8:	438a      	bics	r2, r1
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cce:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cd2:	f383 8810 	msr	PRIMASK, r3
}
 8005cd6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2280      	movs	r2, #128	; 0x80
 8005cdc:	589b      	ldr	r3, [r3, r2]
 8005cde:	0018      	movs	r0, r3
 8005ce0:	f7fd fb8c 	bl	80033fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	225c      	movs	r2, #92	; 0x5c
 8005cee:	5a9a      	ldrh	r2, [r3, r2]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	215e      	movs	r1, #94	; 0x5e
 8005cf4:	5a5b      	ldrh	r3, [r3, r1]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	0011      	movs	r1, r2
 8005d00:	0018      	movs	r0, r3
 8005d02:	f000 f915 	bl	8005f30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d06:	e0ed      	b.n	8005ee4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	225c      	movs	r2, #92	; 0x5c
 8005d0c:	5a99      	ldrh	r1, [r3, r2]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	225e      	movs	r2, #94	; 0x5e
 8005d12:	5a9b      	ldrh	r3, [r3, r2]
 8005d14:	b29a      	uxth	r2, r3
 8005d16:	208e      	movs	r0, #142	; 0x8e
 8005d18:	183b      	adds	r3, r7, r0
 8005d1a:	1a8a      	subs	r2, r1, r2
 8005d1c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	225e      	movs	r2, #94	; 0x5e
 8005d22:	5a9b      	ldrh	r3, [r3, r2]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d100      	bne.n	8005d2c <HAL_UART_IRQHandler+0x478>
 8005d2a:	e0dd      	b.n	8005ee8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8005d2c:	183b      	adds	r3, r7, r0
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d100      	bne.n	8005d36 <HAL_UART_IRQHandler+0x482>
 8005d34:	e0d8      	b.n	8005ee8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d36:	f3ef 8310 	mrs	r3, PRIMASK
 8005d3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d3e:	2488      	movs	r4, #136	; 0x88
 8005d40:	193a      	adds	r2, r7, r4
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	2301      	movs	r3, #1
 8005d46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f383 8810 	msr	PRIMASK, r3
}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4967      	ldr	r1, [pc, #412]	; (8005ef8 <HAL_UART_IRQHandler+0x644>)
 8005d5c:	400a      	ands	r2, r1
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	193b      	adds	r3, r7, r4
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f383 8810 	msr	PRIMASK, r3
}
 8005d6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8005d72:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d74:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d76:	2484      	movs	r4, #132	; 0x84
 8005d78:	193a      	adds	r2, r7, r4
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f383 8810 	msr	PRIMASK, r3
}
 8005d86:	46c0      	nop			; (mov r8, r8)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	495a      	ldr	r1, [pc, #360]	; (8005efc <HAL_UART_IRQHandler+0x648>)
 8005d94:	400a      	ands	r2, r1
 8005d96:	609a      	str	r2, [r3, #8]
 8005d98:	193b      	adds	r3, r7, r4
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	f383 8810 	msr	PRIMASK, r3
}
 8005da4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	228c      	movs	r2, #140	; 0x8c
 8005daa:	2120      	movs	r1, #32
 8005dac:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dba:	f3ef 8310 	mrs	r3, PRIMASK
 8005dbe:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc2:	2480      	movs	r4, #128	; 0x80
 8005dc4:	193a      	adds	r2, r7, r4
 8005dc6:	6013      	str	r3, [r2, #0]
 8005dc8:	2301      	movs	r3, #1
 8005dca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	f383 8810 	msr	PRIMASK, r3
}
 8005dd2:	46c0      	nop			; (mov r8, r8)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2110      	movs	r1, #16
 8005de0:	438a      	bics	r2, r1
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	193b      	adds	r3, r7, r4
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dec:	f383 8810 	msr	PRIMASK, r3
}
 8005df0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2202      	movs	r2, #2
 8005df6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005df8:	183b      	adds	r3, r7, r0
 8005dfa:	881a      	ldrh	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	0011      	movs	r1, r2
 8005e00:	0018      	movs	r0, r3
 8005e02:	f000 f895 	bl	8005f30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e06:	e06f      	b.n	8005ee8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e08:	23a4      	movs	r3, #164	; 0xa4
 8005e0a:	18fb      	adds	r3, r7, r3
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	2380      	movs	r3, #128	; 0x80
 8005e10:	035b      	lsls	r3, r3, #13
 8005e12:	4013      	ands	r3, r2
 8005e14:	d010      	beq.n	8005e38 <HAL_UART_IRQHandler+0x584>
 8005e16:	239c      	movs	r3, #156	; 0x9c
 8005e18:	18fb      	adds	r3, r7, r3
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	2380      	movs	r3, #128	; 0x80
 8005e1e:	03db      	lsls	r3, r3, #15
 8005e20:	4013      	ands	r3, r2
 8005e22:	d009      	beq.n	8005e38 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2280      	movs	r2, #128	; 0x80
 8005e2a:	0352      	lsls	r2, r2, #13
 8005e2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f001 fbd7 	bl	80075e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e36:	e05a      	b.n	8005eee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e38:	23a4      	movs	r3, #164	; 0xa4
 8005e3a:	18fb      	adds	r3, r7, r3
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2280      	movs	r2, #128	; 0x80
 8005e40:	4013      	ands	r3, r2
 8005e42:	d016      	beq.n	8005e72 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e44:	23a0      	movs	r3, #160	; 0xa0
 8005e46:	18fb      	adds	r3, r7, r3
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2280      	movs	r2, #128	; 0x80
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	d106      	bne.n	8005e5e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e50:	239c      	movs	r3, #156	; 0x9c
 8005e52:	18fb      	adds	r3, r7, r3
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	2380      	movs	r3, #128	; 0x80
 8005e58:	041b      	lsls	r3, r3, #16
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	d009      	beq.n	8005e72 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d042      	beq.n	8005eec <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	0010      	movs	r0, r2
 8005e6e:	4798      	blx	r3
    }
    return;
 8005e70:	e03c      	b.n	8005eec <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e72:	23a4      	movs	r3, #164	; 0xa4
 8005e74:	18fb      	adds	r3, r7, r3
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2240      	movs	r2, #64	; 0x40
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	d00a      	beq.n	8005e94 <HAL_UART_IRQHandler+0x5e0>
 8005e7e:	23a0      	movs	r3, #160	; 0xa0
 8005e80:	18fb      	adds	r3, r7, r3
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2240      	movs	r2, #64	; 0x40
 8005e86:	4013      	ands	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f000 ff1c 	bl	8006cca <UART_EndTransmit_IT>
    return;
 8005e92:	e02c      	b.n	8005eee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005e94:	23a4      	movs	r3, #164	; 0xa4
 8005e96:	18fb      	adds	r3, r7, r3
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	041b      	lsls	r3, r3, #16
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	d00b      	beq.n	8005eba <HAL_UART_IRQHandler+0x606>
 8005ea2:	23a0      	movs	r3, #160	; 0xa0
 8005ea4:	18fb      	adds	r3, r7, r3
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	2380      	movs	r3, #128	; 0x80
 8005eaa:	05db      	lsls	r3, r3, #23
 8005eac:	4013      	ands	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	0018      	movs	r0, r3
 8005eb4:	f001 fba6 	bl	8007604 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005eb8:	e019      	b.n	8005eee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005eba:	23a4      	movs	r3, #164	; 0xa4
 8005ebc:	18fb      	adds	r3, r7, r3
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	2380      	movs	r3, #128	; 0x80
 8005ec2:	045b      	lsls	r3, r3, #17
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	d012      	beq.n	8005eee <HAL_UART_IRQHandler+0x63a>
 8005ec8:	23a0      	movs	r3, #160	; 0xa0
 8005eca:	18fb      	adds	r3, r7, r3
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	da0d      	bge.n	8005eee <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	0018      	movs	r0, r3
 8005ed6:	f001 fb8d 	bl	80075f4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005eda:	e008      	b.n	8005eee <HAL_UART_IRQHandler+0x63a>
      return;
 8005edc:	46c0      	nop			; (mov r8, r8)
 8005ede:	e006      	b.n	8005eee <HAL_UART_IRQHandler+0x63a>
    return;
 8005ee0:	46c0      	nop			; (mov r8, r8)
 8005ee2:	e004      	b.n	8005eee <HAL_UART_IRQHandler+0x63a>
      return;
 8005ee4:	46c0      	nop			; (mov r8, r8)
 8005ee6:	e002      	b.n	8005eee <HAL_UART_IRQHandler+0x63a>
      return;
 8005ee8:	46c0      	nop			; (mov r8, r8)
 8005eea:	e000      	b.n	8005eee <HAL_UART_IRQHandler+0x63a>
    return;
 8005eec:	46c0      	nop			; (mov r8, r8)
  }
}
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	b02a      	add	sp, #168	; 0xa8
 8005ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ef4:	fffffeff 	.word	0xfffffeff
 8005ef8:	fffffedf 	.word	0xfffffedf
 8005efc:	effffffe 	.word	0xeffffffe

08005f00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f08:	46c0      	nop			; (mov r8, r8)
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	b002      	add	sp, #8
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f18:	46c0      	nop			; (mov r8, r8)
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	b002      	add	sp, #8
 8005f1e:	bd80      	pop	{r7, pc}

08005f20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f28:	46c0      	nop			; (mov r8, r8)
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b002      	add	sp, #8
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	000a      	movs	r2, r1
 8005f3a:	1cbb      	adds	r3, r7, #2
 8005f3c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f3e:	46c0      	nop			; (mov r8, r8)
 8005f40:	46bd      	mov	sp, r7
 8005f42:	b002      	add	sp, #8
 8005f44:	bd80      	pop	{r7, pc}
	...

08005f48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f48:	b5b0      	push	{r4, r5, r7, lr}
 8005f4a:	b090      	sub	sp, #64	; 0x40
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f50:	231a      	movs	r3, #26
 8005f52:	2220      	movs	r2, #32
 8005f54:	189b      	adds	r3, r3, r2
 8005f56:	19db      	adds	r3, r3, r7
 8005f58:	2200      	movs	r2, #0
 8005f5a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	431a      	orrs	r2, r3
 8005f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6e:	69db      	ldr	r3, [r3, #28]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4ac1      	ldr	r2, [pc, #772]	; (8006280 <UART_SetConfig+0x338>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	0019      	movs	r1, r3
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f86:	430b      	orrs	r3, r1
 8005f88:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	4abc      	ldr	r2, [pc, #752]	; (8006284 <UART_SetConfig+0x33c>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	0018      	movs	r0, r3
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	68d9      	ldr	r1, [r3, #12]
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	0003      	movs	r3, r0
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4ab6      	ldr	r2, [pc, #728]	; (8006288 <UART_SetConfig+0x340>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d009      	beq.n	8005fc8 <UART_SetConfig+0x80>
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4ab4      	ldr	r2, [pc, #720]	; (800628c <UART_SetConfig+0x344>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d004      	beq.n	8005fc8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	4ab0      	ldr	r2, [pc, #704]	; (8006290 <UART_SetConfig+0x348>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	0019      	movs	r1, r3
 8005fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe4:	220f      	movs	r2, #15
 8005fe6:	4393      	bics	r3, r2
 8005fe8:	0018      	movs	r0, r3
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	0003      	movs	r3, r0
 8005ff4:	430b      	orrs	r3, r1
 8005ff6:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4aa5      	ldr	r2, [pc, #660]	; (8006294 <UART_SetConfig+0x34c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d131      	bne.n	8006066 <UART_SetConfig+0x11e>
 8006002:	4ba5      	ldr	r3, [pc, #660]	; (8006298 <UART_SetConfig+0x350>)
 8006004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006006:	2203      	movs	r2, #3
 8006008:	4013      	ands	r3, r2
 800600a:	2b03      	cmp	r3, #3
 800600c:	d01d      	beq.n	800604a <UART_SetConfig+0x102>
 800600e:	d823      	bhi.n	8006058 <UART_SetConfig+0x110>
 8006010:	2b02      	cmp	r3, #2
 8006012:	d00c      	beq.n	800602e <UART_SetConfig+0xe6>
 8006014:	d820      	bhi.n	8006058 <UART_SetConfig+0x110>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <UART_SetConfig+0xd8>
 800601a:	2b01      	cmp	r3, #1
 800601c:	d00e      	beq.n	800603c <UART_SetConfig+0xf4>
 800601e:	e01b      	b.n	8006058 <UART_SetConfig+0x110>
 8006020:	231b      	movs	r3, #27
 8006022:	2220      	movs	r2, #32
 8006024:	189b      	adds	r3, r3, r2
 8006026:	19db      	adds	r3, r3, r7
 8006028:	2200      	movs	r2, #0
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	e154      	b.n	80062d8 <UART_SetConfig+0x390>
 800602e:	231b      	movs	r3, #27
 8006030:	2220      	movs	r2, #32
 8006032:	189b      	adds	r3, r3, r2
 8006034:	19db      	adds	r3, r3, r7
 8006036:	2202      	movs	r2, #2
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	e14d      	b.n	80062d8 <UART_SetConfig+0x390>
 800603c:	231b      	movs	r3, #27
 800603e:	2220      	movs	r2, #32
 8006040:	189b      	adds	r3, r3, r2
 8006042:	19db      	adds	r3, r3, r7
 8006044:	2204      	movs	r2, #4
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	e146      	b.n	80062d8 <UART_SetConfig+0x390>
 800604a:	231b      	movs	r3, #27
 800604c:	2220      	movs	r2, #32
 800604e:	189b      	adds	r3, r3, r2
 8006050:	19db      	adds	r3, r3, r7
 8006052:	2208      	movs	r2, #8
 8006054:	701a      	strb	r2, [r3, #0]
 8006056:	e13f      	b.n	80062d8 <UART_SetConfig+0x390>
 8006058:	231b      	movs	r3, #27
 800605a:	2220      	movs	r2, #32
 800605c:	189b      	adds	r3, r3, r2
 800605e:	19db      	adds	r3, r3, r7
 8006060:	2210      	movs	r2, #16
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	e138      	b.n	80062d8 <UART_SetConfig+0x390>
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a8c      	ldr	r2, [pc, #560]	; (800629c <UART_SetConfig+0x354>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d131      	bne.n	80060d4 <UART_SetConfig+0x18c>
 8006070:	4b89      	ldr	r3, [pc, #548]	; (8006298 <UART_SetConfig+0x350>)
 8006072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006074:	220c      	movs	r2, #12
 8006076:	4013      	ands	r3, r2
 8006078:	2b0c      	cmp	r3, #12
 800607a:	d01d      	beq.n	80060b8 <UART_SetConfig+0x170>
 800607c:	d823      	bhi.n	80060c6 <UART_SetConfig+0x17e>
 800607e:	2b08      	cmp	r3, #8
 8006080:	d00c      	beq.n	800609c <UART_SetConfig+0x154>
 8006082:	d820      	bhi.n	80060c6 <UART_SetConfig+0x17e>
 8006084:	2b00      	cmp	r3, #0
 8006086:	d002      	beq.n	800608e <UART_SetConfig+0x146>
 8006088:	2b04      	cmp	r3, #4
 800608a:	d00e      	beq.n	80060aa <UART_SetConfig+0x162>
 800608c:	e01b      	b.n	80060c6 <UART_SetConfig+0x17e>
 800608e:	231b      	movs	r3, #27
 8006090:	2220      	movs	r2, #32
 8006092:	189b      	adds	r3, r3, r2
 8006094:	19db      	adds	r3, r3, r7
 8006096:	2200      	movs	r2, #0
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e11d      	b.n	80062d8 <UART_SetConfig+0x390>
 800609c:	231b      	movs	r3, #27
 800609e:	2220      	movs	r2, #32
 80060a0:	189b      	adds	r3, r3, r2
 80060a2:	19db      	adds	r3, r3, r7
 80060a4:	2202      	movs	r2, #2
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	e116      	b.n	80062d8 <UART_SetConfig+0x390>
 80060aa:	231b      	movs	r3, #27
 80060ac:	2220      	movs	r2, #32
 80060ae:	189b      	adds	r3, r3, r2
 80060b0:	19db      	adds	r3, r3, r7
 80060b2:	2204      	movs	r2, #4
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	e10f      	b.n	80062d8 <UART_SetConfig+0x390>
 80060b8:	231b      	movs	r3, #27
 80060ba:	2220      	movs	r2, #32
 80060bc:	189b      	adds	r3, r3, r2
 80060be:	19db      	adds	r3, r3, r7
 80060c0:	2208      	movs	r2, #8
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	e108      	b.n	80062d8 <UART_SetConfig+0x390>
 80060c6:	231b      	movs	r3, #27
 80060c8:	2220      	movs	r2, #32
 80060ca:	189b      	adds	r3, r3, r2
 80060cc:	19db      	adds	r3, r3, r7
 80060ce:	2210      	movs	r2, #16
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	e101      	b.n	80062d8 <UART_SetConfig+0x390>
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a71      	ldr	r2, [pc, #452]	; (80062a0 <UART_SetConfig+0x358>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d131      	bne.n	8006142 <UART_SetConfig+0x1fa>
 80060de:	4b6e      	ldr	r3, [pc, #440]	; (8006298 <UART_SetConfig+0x350>)
 80060e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e2:	2230      	movs	r2, #48	; 0x30
 80060e4:	4013      	ands	r3, r2
 80060e6:	2b30      	cmp	r3, #48	; 0x30
 80060e8:	d01d      	beq.n	8006126 <UART_SetConfig+0x1de>
 80060ea:	d823      	bhi.n	8006134 <UART_SetConfig+0x1ec>
 80060ec:	2b20      	cmp	r3, #32
 80060ee:	d00c      	beq.n	800610a <UART_SetConfig+0x1c2>
 80060f0:	d820      	bhi.n	8006134 <UART_SetConfig+0x1ec>
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <UART_SetConfig+0x1b4>
 80060f6:	2b10      	cmp	r3, #16
 80060f8:	d00e      	beq.n	8006118 <UART_SetConfig+0x1d0>
 80060fa:	e01b      	b.n	8006134 <UART_SetConfig+0x1ec>
 80060fc:	231b      	movs	r3, #27
 80060fe:	2220      	movs	r2, #32
 8006100:	189b      	adds	r3, r3, r2
 8006102:	19db      	adds	r3, r3, r7
 8006104:	2200      	movs	r2, #0
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e0e6      	b.n	80062d8 <UART_SetConfig+0x390>
 800610a:	231b      	movs	r3, #27
 800610c:	2220      	movs	r2, #32
 800610e:	189b      	adds	r3, r3, r2
 8006110:	19db      	adds	r3, r3, r7
 8006112:	2202      	movs	r2, #2
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e0df      	b.n	80062d8 <UART_SetConfig+0x390>
 8006118:	231b      	movs	r3, #27
 800611a:	2220      	movs	r2, #32
 800611c:	189b      	adds	r3, r3, r2
 800611e:	19db      	adds	r3, r3, r7
 8006120:	2204      	movs	r2, #4
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	e0d8      	b.n	80062d8 <UART_SetConfig+0x390>
 8006126:	231b      	movs	r3, #27
 8006128:	2220      	movs	r2, #32
 800612a:	189b      	adds	r3, r3, r2
 800612c:	19db      	adds	r3, r3, r7
 800612e:	2208      	movs	r2, #8
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	e0d1      	b.n	80062d8 <UART_SetConfig+0x390>
 8006134:	231b      	movs	r3, #27
 8006136:	2220      	movs	r2, #32
 8006138:	189b      	adds	r3, r3, r2
 800613a:	19db      	adds	r3, r3, r7
 800613c:	2210      	movs	r2, #16
 800613e:	701a      	strb	r2, [r3, #0]
 8006140:	e0ca      	b.n	80062d8 <UART_SetConfig+0x390>
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a57      	ldr	r2, [pc, #348]	; (80062a4 <UART_SetConfig+0x35c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d106      	bne.n	800615a <UART_SetConfig+0x212>
 800614c:	231b      	movs	r3, #27
 800614e:	2220      	movs	r2, #32
 8006150:	189b      	adds	r3, r3, r2
 8006152:	19db      	adds	r3, r3, r7
 8006154:	2200      	movs	r2, #0
 8006156:	701a      	strb	r2, [r3, #0]
 8006158:	e0be      	b.n	80062d8 <UART_SetConfig+0x390>
 800615a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a52      	ldr	r2, [pc, #328]	; (80062a8 <UART_SetConfig+0x360>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d106      	bne.n	8006172 <UART_SetConfig+0x22a>
 8006164:	231b      	movs	r3, #27
 8006166:	2220      	movs	r2, #32
 8006168:	189b      	adds	r3, r3, r2
 800616a:	19db      	adds	r3, r3, r7
 800616c:	2200      	movs	r2, #0
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	e0b2      	b.n	80062d8 <UART_SetConfig+0x390>
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a4d      	ldr	r2, [pc, #308]	; (80062ac <UART_SetConfig+0x364>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d106      	bne.n	800618a <UART_SetConfig+0x242>
 800617c:	231b      	movs	r3, #27
 800617e:	2220      	movs	r2, #32
 8006180:	189b      	adds	r3, r3, r2
 8006182:	19db      	adds	r3, r3, r7
 8006184:	2200      	movs	r2, #0
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	e0a6      	b.n	80062d8 <UART_SetConfig+0x390>
 800618a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a3e      	ldr	r2, [pc, #248]	; (8006288 <UART_SetConfig+0x340>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d13e      	bne.n	8006212 <UART_SetConfig+0x2ca>
 8006194:	4b40      	ldr	r3, [pc, #256]	; (8006298 <UART_SetConfig+0x350>)
 8006196:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006198:	23c0      	movs	r3, #192	; 0xc0
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	4013      	ands	r3, r2
 800619e:	22c0      	movs	r2, #192	; 0xc0
 80061a0:	0112      	lsls	r2, r2, #4
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d027      	beq.n	80061f6 <UART_SetConfig+0x2ae>
 80061a6:	22c0      	movs	r2, #192	; 0xc0
 80061a8:	0112      	lsls	r2, r2, #4
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d82a      	bhi.n	8006204 <UART_SetConfig+0x2bc>
 80061ae:	2280      	movs	r2, #128	; 0x80
 80061b0:	0112      	lsls	r2, r2, #4
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d011      	beq.n	80061da <UART_SetConfig+0x292>
 80061b6:	2280      	movs	r2, #128	; 0x80
 80061b8:	0112      	lsls	r2, r2, #4
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d822      	bhi.n	8006204 <UART_SetConfig+0x2bc>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d004      	beq.n	80061cc <UART_SetConfig+0x284>
 80061c2:	2280      	movs	r2, #128	; 0x80
 80061c4:	00d2      	lsls	r2, r2, #3
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00e      	beq.n	80061e8 <UART_SetConfig+0x2a0>
 80061ca:	e01b      	b.n	8006204 <UART_SetConfig+0x2bc>
 80061cc:	231b      	movs	r3, #27
 80061ce:	2220      	movs	r2, #32
 80061d0:	189b      	adds	r3, r3, r2
 80061d2:	19db      	adds	r3, r3, r7
 80061d4:	2200      	movs	r2, #0
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	e07e      	b.n	80062d8 <UART_SetConfig+0x390>
 80061da:	231b      	movs	r3, #27
 80061dc:	2220      	movs	r2, #32
 80061de:	189b      	adds	r3, r3, r2
 80061e0:	19db      	adds	r3, r3, r7
 80061e2:	2202      	movs	r2, #2
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	e077      	b.n	80062d8 <UART_SetConfig+0x390>
 80061e8:	231b      	movs	r3, #27
 80061ea:	2220      	movs	r2, #32
 80061ec:	189b      	adds	r3, r3, r2
 80061ee:	19db      	adds	r3, r3, r7
 80061f0:	2204      	movs	r2, #4
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	e070      	b.n	80062d8 <UART_SetConfig+0x390>
 80061f6:	231b      	movs	r3, #27
 80061f8:	2220      	movs	r2, #32
 80061fa:	189b      	adds	r3, r3, r2
 80061fc:	19db      	adds	r3, r3, r7
 80061fe:	2208      	movs	r2, #8
 8006200:	701a      	strb	r2, [r3, #0]
 8006202:	e069      	b.n	80062d8 <UART_SetConfig+0x390>
 8006204:	231b      	movs	r3, #27
 8006206:	2220      	movs	r2, #32
 8006208:	189b      	adds	r3, r3, r2
 800620a:	19db      	adds	r3, r3, r7
 800620c:	2210      	movs	r2, #16
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	e062      	b.n	80062d8 <UART_SetConfig+0x390>
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a1d      	ldr	r2, [pc, #116]	; (800628c <UART_SetConfig+0x344>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d157      	bne.n	80062cc <UART_SetConfig+0x384>
 800621c:	4b1e      	ldr	r3, [pc, #120]	; (8006298 <UART_SetConfig+0x350>)
 800621e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006220:	23c0      	movs	r3, #192	; 0xc0
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4013      	ands	r3, r2
 8006226:	22c0      	movs	r2, #192	; 0xc0
 8006228:	0092      	lsls	r2, r2, #2
 800622a:	4293      	cmp	r3, r2
 800622c:	d040      	beq.n	80062b0 <UART_SetConfig+0x368>
 800622e:	22c0      	movs	r2, #192	; 0xc0
 8006230:	0092      	lsls	r2, r2, #2
 8006232:	4293      	cmp	r3, r2
 8006234:	d843      	bhi.n	80062be <UART_SetConfig+0x376>
 8006236:	2280      	movs	r2, #128	; 0x80
 8006238:	0092      	lsls	r2, r2, #2
 800623a:	4293      	cmp	r3, r2
 800623c:	d011      	beq.n	8006262 <UART_SetConfig+0x31a>
 800623e:	2280      	movs	r2, #128	; 0x80
 8006240:	0092      	lsls	r2, r2, #2
 8006242:	4293      	cmp	r3, r2
 8006244:	d83b      	bhi.n	80062be <UART_SetConfig+0x376>
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <UART_SetConfig+0x30c>
 800624a:	2280      	movs	r2, #128	; 0x80
 800624c:	0052      	lsls	r2, r2, #1
 800624e:	4293      	cmp	r3, r2
 8006250:	d00e      	beq.n	8006270 <UART_SetConfig+0x328>
 8006252:	e034      	b.n	80062be <UART_SetConfig+0x376>
 8006254:	231b      	movs	r3, #27
 8006256:	2220      	movs	r2, #32
 8006258:	189b      	adds	r3, r3, r2
 800625a:	19db      	adds	r3, r3, r7
 800625c:	2200      	movs	r2, #0
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	e03a      	b.n	80062d8 <UART_SetConfig+0x390>
 8006262:	231b      	movs	r3, #27
 8006264:	2220      	movs	r2, #32
 8006266:	189b      	adds	r3, r3, r2
 8006268:	19db      	adds	r3, r3, r7
 800626a:	2202      	movs	r2, #2
 800626c:	701a      	strb	r2, [r3, #0]
 800626e:	e033      	b.n	80062d8 <UART_SetConfig+0x390>
 8006270:	231b      	movs	r3, #27
 8006272:	2220      	movs	r2, #32
 8006274:	189b      	adds	r3, r3, r2
 8006276:	19db      	adds	r3, r3, r7
 8006278:	2204      	movs	r2, #4
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	e02c      	b.n	80062d8 <UART_SetConfig+0x390>
 800627e:	46c0      	nop			; (mov r8, r8)
 8006280:	cfff69f3 	.word	0xcfff69f3
 8006284:	ffffcfff 	.word	0xffffcfff
 8006288:	40008000 	.word	0x40008000
 800628c:	40008400 	.word	0x40008400
 8006290:	11fff4ff 	.word	0x11fff4ff
 8006294:	40013800 	.word	0x40013800
 8006298:	40021000 	.word	0x40021000
 800629c:	40004400 	.word	0x40004400
 80062a0:	40004800 	.word	0x40004800
 80062a4:	40004c00 	.word	0x40004c00
 80062a8:	40005000 	.word	0x40005000
 80062ac:	40013c00 	.word	0x40013c00
 80062b0:	231b      	movs	r3, #27
 80062b2:	2220      	movs	r2, #32
 80062b4:	189b      	adds	r3, r3, r2
 80062b6:	19db      	adds	r3, r3, r7
 80062b8:	2208      	movs	r2, #8
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	e00c      	b.n	80062d8 <UART_SetConfig+0x390>
 80062be:	231b      	movs	r3, #27
 80062c0:	2220      	movs	r2, #32
 80062c2:	189b      	adds	r3, r3, r2
 80062c4:	19db      	adds	r3, r3, r7
 80062c6:	2210      	movs	r2, #16
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	e005      	b.n	80062d8 <UART_SetConfig+0x390>
 80062cc:	231b      	movs	r3, #27
 80062ce:	2220      	movs	r2, #32
 80062d0:	189b      	adds	r3, r3, r2
 80062d2:	19db      	adds	r3, r3, r7
 80062d4:	2210      	movs	r2, #16
 80062d6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4ac1      	ldr	r2, [pc, #772]	; (80065e4 <UART_SetConfig+0x69c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d005      	beq.n	80062ee <UART_SetConfig+0x3a6>
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4ac0      	ldr	r2, [pc, #768]	; (80065e8 <UART_SetConfig+0x6a0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d000      	beq.n	80062ee <UART_SetConfig+0x3a6>
 80062ec:	e093      	b.n	8006416 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062ee:	231b      	movs	r3, #27
 80062f0:	2220      	movs	r2, #32
 80062f2:	189b      	adds	r3, r3, r2
 80062f4:	19db      	adds	r3, r3, r7
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d015      	beq.n	8006328 <UART_SetConfig+0x3e0>
 80062fc:	dc18      	bgt.n	8006330 <UART_SetConfig+0x3e8>
 80062fe:	2b04      	cmp	r3, #4
 8006300:	d00d      	beq.n	800631e <UART_SetConfig+0x3d6>
 8006302:	dc15      	bgt.n	8006330 <UART_SetConfig+0x3e8>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <UART_SetConfig+0x3c6>
 8006308:	2b02      	cmp	r3, #2
 800630a:	d005      	beq.n	8006318 <UART_SetConfig+0x3d0>
 800630c:	e010      	b.n	8006330 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800630e:	f7fe ff27 	bl	8005160 <HAL_RCC_GetPCLK1Freq>
 8006312:	0003      	movs	r3, r0
 8006314:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006316:	e014      	b.n	8006342 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006318:	4bb4      	ldr	r3, [pc, #720]	; (80065ec <UART_SetConfig+0x6a4>)
 800631a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800631c:	e011      	b.n	8006342 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800631e:	f7fe fe93 	bl	8005048 <HAL_RCC_GetSysClockFreq>
 8006322:	0003      	movs	r3, r0
 8006324:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006326:	e00c      	b.n	8006342 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006328:	2380      	movs	r3, #128	; 0x80
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800632e:	e008      	b.n	8006342 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006334:	231a      	movs	r3, #26
 8006336:	2220      	movs	r2, #32
 8006338:	189b      	adds	r3, r3, r2
 800633a:	19db      	adds	r3, r3, r7
 800633c:	2201      	movs	r2, #1
 800633e:	701a      	strb	r2, [r3, #0]
        break;
 8006340:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006344:	2b00      	cmp	r3, #0
 8006346:	d100      	bne.n	800634a <UART_SetConfig+0x402>
 8006348:	e135      	b.n	80065b6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800634e:	4ba8      	ldr	r3, [pc, #672]	; (80065f0 <UART_SetConfig+0x6a8>)
 8006350:	0052      	lsls	r2, r2, #1
 8006352:	5ad3      	ldrh	r3, [r2, r3]
 8006354:	0019      	movs	r1, r3
 8006356:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006358:	f7f9 fef0 	bl	800013c <__udivsi3>
 800635c:	0003      	movs	r3, r0
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	0013      	movs	r3, r2
 8006366:	005b      	lsls	r3, r3, #1
 8006368:	189b      	adds	r3, r3, r2
 800636a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800636c:	429a      	cmp	r2, r3
 800636e:	d305      	bcc.n	800637c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006378:	429a      	cmp	r2, r3
 800637a:	d906      	bls.n	800638a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 800637c:	231a      	movs	r3, #26
 800637e:	2220      	movs	r2, #32
 8006380:	189b      	adds	r3, r3, r2
 8006382:	19db      	adds	r3, r3, r7
 8006384:	2201      	movs	r2, #1
 8006386:	701a      	strb	r2, [r3, #0]
 8006388:	e044      	b.n	8006414 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800638a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	2300      	movs	r3, #0
 8006390:	61fb      	str	r3, [r7, #28]
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006396:	4b96      	ldr	r3, [pc, #600]	; (80065f0 <UART_SetConfig+0x6a8>)
 8006398:	0052      	lsls	r2, r2, #1
 800639a:	5ad3      	ldrh	r3, [r2, r3]
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	2300      	movs	r3, #0
 80063a0:	617b      	str	r3, [r7, #20]
 80063a2:	693a      	ldr	r2, [r7, #16]
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	69b8      	ldr	r0, [r7, #24]
 80063a8:	69f9      	ldr	r1, [r7, #28]
 80063aa:	f7fa f87b 	bl	80004a4 <__aeabi_uldivmod>
 80063ae:	0002      	movs	r2, r0
 80063b0:	000b      	movs	r3, r1
 80063b2:	0e11      	lsrs	r1, r2, #24
 80063b4:	021d      	lsls	r5, r3, #8
 80063b6:	430d      	orrs	r5, r1
 80063b8:	0214      	lsls	r4, r2, #8
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	085b      	lsrs	r3, r3, #1
 80063c0:	60bb      	str	r3, [r7, #8]
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	68b8      	ldr	r0, [r7, #8]
 80063c8:	68f9      	ldr	r1, [r7, #12]
 80063ca:	1900      	adds	r0, r0, r4
 80063cc:	4169      	adcs	r1, r5
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	2300      	movs	r3, #0
 80063d6:	607b      	str	r3, [r7, #4]
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f7fa f862 	bl	80004a4 <__aeabi_uldivmod>
 80063e0:	0002      	movs	r2, r0
 80063e2:	000b      	movs	r3, r1
 80063e4:	0013      	movs	r3, r2
 80063e6:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ea:	23c0      	movs	r3, #192	; 0xc0
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d309      	bcc.n	8006406 <UART_SetConfig+0x4be>
 80063f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f4:	2380      	movs	r3, #128	; 0x80
 80063f6:	035b      	lsls	r3, r3, #13
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d204      	bcs.n	8006406 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006402:	60da      	str	r2, [r3, #12]
 8006404:	e006      	b.n	8006414 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8006406:	231a      	movs	r3, #26
 8006408:	2220      	movs	r2, #32
 800640a:	189b      	adds	r3, r3, r2
 800640c:	19db      	adds	r3, r3, r7
 800640e:	2201      	movs	r2, #1
 8006410:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8006412:	e0d0      	b.n	80065b6 <UART_SetConfig+0x66e>
 8006414:	e0cf      	b.n	80065b6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	69da      	ldr	r2, [r3, #28]
 800641a:	2380      	movs	r3, #128	; 0x80
 800641c:	021b      	lsls	r3, r3, #8
 800641e:	429a      	cmp	r2, r3
 8006420:	d000      	beq.n	8006424 <UART_SetConfig+0x4dc>
 8006422:	e070      	b.n	8006506 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8006424:	231b      	movs	r3, #27
 8006426:	2220      	movs	r2, #32
 8006428:	189b      	adds	r3, r3, r2
 800642a:	19db      	adds	r3, r3, r7
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b08      	cmp	r3, #8
 8006430:	d015      	beq.n	800645e <UART_SetConfig+0x516>
 8006432:	dc18      	bgt.n	8006466 <UART_SetConfig+0x51e>
 8006434:	2b04      	cmp	r3, #4
 8006436:	d00d      	beq.n	8006454 <UART_SetConfig+0x50c>
 8006438:	dc15      	bgt.n	8006466 <UART_SetConfig+0x51e>
 800643a:	2b00      	cmp	r3, #0
 800643c:	d002      	beq.n	8006444 <UART_SetConfig+0x4fc>
 800643e:	2b02      	cmp	r3, #2
 8006440:	d005      	beq.n	800644e <UART_SetConfig+0x506>
 8006442:	e010      	b.n	8006466 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006444:	f7fe fe8c 	bl	8005160 <HAL_RCC_GetPCLK1Freq>
 8006448:	0003      	movs	r3, r0
 800644a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800644c:	e014      	b.n	8006478 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800644e:	4b67      	ldr	r3, [pc, #412]	; (80065ec <UART_SetConfig+0x6a4>)
 8006450:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006452:	e011      	b.n	8006478 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006454:	f7fe fdf8 	bl	8005048 <HAL_RCC_GetSysClockFreq>
 8006458:	0003      	movs	r3, r0
 800645a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800645c:	e00c      	b.n	8006478 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645e:	2380      	movs	r3, #128	; 0x80
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006464:	e008      	b.n	8006478 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800646a:	231a      	movs	r3, #26
 800646c:	2220      	movs	r2, #32
 800646e:	189b      	adds	r3, r3, r2
 8006470:	19db      	adds	r3, r3, r7
 8006472:	2201      	movs	r2, #1
 8006474:	701a      	strb	r2, [r3, #0]
        break;
 8006476:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800647a:	2b00      	cmp	r3, #0
 800647c:	d100      	bne.n	8006480 <UART_SetConfig+0x538>
 800647e:	e09a      	b.n	80065b6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006484:	4b5a      	ldr	r3, [pc, #360]	; (80065f0 <UART_SetConfig+0x6a8>)
 8006486:	0052      	lsls	r2, r2, #1
 8006488:	5ad3      	ldrh	r3, [r2, r3]
 800648a:	0019      	movs	r1, r3
 800648c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800648e:	f7f9 fe55 	bl	800013c <__udivsi3>
 8006492:	0003      	movs	r3, r0
 8006494:	005a      	lsls	r2, r3, #1
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	085b      	lsrs	r3, r3, #1
 800649c:	18d2      	adds	r2, r2, r3
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	0019      	movs	r1, r3
 80064a4:	0010      	movs	r0, r2
 80064a6:	f7f9 fe49 	bl	800013c <__udivsi3>
 80064aa:	0003      	movs	r3, r0
 80064ac:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b0:	2b0f      	cmp	r3, #15
 80064b2:	d921      	bls.n	80064f8 <UART_SetConfig+0x5b0>
 80064b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064b6:	2380      	movs	r3, #128	; 0x80
 80064b8:	025b      	lsls	r3, r3, #9
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d21c      	bcs.n	80064f8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	200e      	movs	r0, #14
 80064c4:	2420      	movs	r4, #32
 80064c6:	1903      	adds	r3, r0, r4
 80064c8:	19db      	adds	r3, r3, r7
 80064ca:	210f      	movs	r1, #15
 80064cc:	438a      	bics	r2, r1
 80064ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d2:	085b      	lsrs	r3, r3, #1
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	2207      	movs	r2, #7
 80064d8:	4013      	ands	r3, r2
 80064da:	b299      	uxth	r1, r3
 80064dc:	1903      	adds	r3, r0, r4
 80064de:	19db      	adds	r3, r3, r7
 80064e0:	1902      	adds	r2, r0, r4
 80064e2:	19d2      	adds	r2, r2, r7
 80064e4:	8812      	ldrh	r2, [r2, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	1902      	adds	r2, r0, r4
 80064f0:	19d2      	adds	r2, r2, r7
 80064f2:	8812      	ldrh	r2, [r2, #0]
 80064f4:	60da      	str	r2, [r3, #12]
 80064f6:	e05e      	b.n	80065b6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80064f8:	231a      	movs	r3, #26
 80064fa:	2220      	movs	r2, #32
 80064fc:	189b      	adds	r3, r3, r2
 80064fe:	19db      	adds	r3, r3, r7
 8006500:	2201      	movs	r2, #1
 8006502:	701a      	strb	r2, [r3, #0]
 8006504:	e057      	b.n	80065b6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006506:	231b      	movs	r3, #27
 8006508:	2220      	movs	r2, #32
 800650a:	189b      	adds	r3, r3, r2
 800650c:	19db      	adds	r3, r3, r7
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	2b08      	cmp	r3, #8
 8006512:	d015      	beq.n	8006540 <UART_SetConfig+0x5f8>
 8006514:	dc18      	bgt.n	8006548 <UART_SetConfig+0x600>
 8006516:	2b04      	cmp	r3, #4
 8006518:	d00d      	beq.n	8006536 <UART_SetConfig+0x5ee>
 800651a:	dc15      	bgt.n	8006548 <UART_SetConfig+0x600>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d002      	beq.n	8006526 <UART_SetConfig+0x5de>
 8006520:	2b02      	cmp	r3, #2
 8006522:	d005      	beq.n	8006530 <UART_SetConfig+0x5e8>
 8006524:	e010      	b.n	8006548 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006526:	f7fe fe1b 	bl	8005160 <HAL_RCC_GetPCLK1Freq>
 800652a:	0003      	movs	r3, r0
 800652c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800652e:	e014      	b.n	800655a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006530:	4b2e      	ldr	r3, [pc, #184]	; (80065ec <UART_SetConfig+0x6a4>)
 8006532:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006534:	e011      	b.n	800655a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006536:	f7fe fd87 	bl	8005048 <HAL_RCC_GetSysClockFreq>
 800653a:	0003      	movs	r3, r0
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800653e:	e00c      	b.n	800655a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006540:	2380      	movs	r3, #128	; 0x80
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006546:	e008      	b.n	800655a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800654c:	231a      	movs	r3, #26
 800654e:	2220      	movs	r2, #32
 8006550:	189b      	adds	r3, r3, r2
 8006552:	19db      	adds	r3, r3, r7
 8006554:	2201      	movs	r2, #1
 8006556:	701a      	strb	r2, [r3, #0]
        break;
 8006558:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800655a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655c:	2b00      	cmp	r3, #0
 800655e:	d02a      	beq.n	80065b6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006564:	4b22      	ldr	r3, [pc, #136]	; (80065f0 <UART_SetConfig+0x6a8>)
 8006566:	0052      	lsls	r2, r2, #1
 8006568:	5ad3      	ldrh	r3, [r2, r3]
 800656a:	0019      	movs	r1, r3
 800656c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800656e:	f7f9 fde5 	bl	800013c <__udivsi3>
 8006572:	0003      	movs	r3, r0
 8006574:	001a      	movs	r2, r3
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	085b      	lsrs	r3, r3, #1
 800657c:	18d2      	adds	r2, r2, r3
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	0019      	movs	r1, r3
 8006584:	0010      	movs	r0, r2
 8006586:	f7f9 fdd9 	bl	800013c <__udivsi3>
 800658a:	0003      	movs	r3, r0
 800658c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	2b0f      	cmp	r3, #15
 8006592:	d90a      	bls.n	80065aa <UART_SetConfig+0x662>
 8006594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006596:	2380      	movs	r3, #128	; 0x80
 8006598:	025b      	lsls	r3, r3, #9
 800659a:	429a      	cmp	r2, r3
 800659c:	d205      	bcs.n	80065aa <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800659e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60da      	str	r2, [r3, #12]
 80065a8:	e005      	b.n	80065b6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 80065aa:	231a      	movs	r3, #26
 80065ac:	2220      	movs	r2, #32
 80065ae:	189b      	adds	r3, r3, r2
 80065b0:	19db      	adds	r3, r3, r7
 80065b2:	2201      	movs	r2, #1
 80065b4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	226a      	movs	r2, #106	; 0x6a
 80065ba:	2101      	movs	r1, #1
 80065bc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	2268      	movs	r2, #104	; 0x68
 80065c2:	2101      	movs	r1, #1
 80065c4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	2200      	movs	r2, #0
 80065ca:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	2200      	movs	r2, #0
 80065d0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80065d2:	231a      	movs	r3, #26
 80065d4:	2220      	movs	r2, #32
 80065d6:	189b      	adds	r3, r3, r2
 80065d8:	19db      	adds	r3, r3, r7
 80065da:	781b      	ldrb	r3, [r3, #0]
}
 80065dc:	0018      	movs	r0, r3
 80065de:	46bd      	mov	sp, r7
 80065e0:	b010      	add	sp, #64	; 0x40
 80065e2:	bdb0      	pop	{r4, r5, r7, pc}
 80065e4:	40008000 	.word	0x40008000
 80065e8:	40008400 	.word	0x40008400
 80065ec:	00f42400 	.word	0x00f42400
 80065f0:	0800a9fc 	.word	0x0800a9fc

080065f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006600:	2201      	movs	r2, #1
 8006602:	4013      	ands	r3, r2
 8006604:	d00b      	beq.n	800661e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	4a4a      	ldr	r2, [pc, #296]	; (8006738 <UART_AdvFeatureConfig+0x144>)
 800660e:	4013      	ands	r3, r2
 8006610:	0019      	movs	r1, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	2202      	movs	r2, #2
 8006624:	4013      	ands	r3, r2
 8006626:	d00b      	beq.n	8006640 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	4a43      	ldr	r2, [pc, #268]	; (800673c <UART_AdvFeatureConfig+0x148>)
 8006630:	4013      	ands	r3, r2
 8006632:	0019      	movs	r1, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006644:	2204      	movs	r2, #4
 8006646:	4013      	ands	r3, r2
 8006648:	d00b      	beq.n	8006662 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	4a3b      	ldr	r2, [pc, #236]	; (8006740 <UART_AdvFeatureConfig+0x14c>)
 8006652:	4013      	ands	r3, r2
 8006654:	0019      	movs	r1, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006666:	2208      	movs	r2, #8
 8006668:	4013      	ands	r3, r2
 800666a:	d00b      	beq.n	8006684 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	4a34      	ldr	r2, [pc, #208]	; (8006744 <UART_AdvFeatureConfig+0x150>)
 8006674:	4013      	ands	r3, r2
 8006676:	0019      	movs	r1, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006688:	2210      	movs	r2, #16
 800668a:	4013      	ands	r3, r2
 800668c:	d00b      	beq.n	80066a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	689b      	ldr	r3, [r3, #8]
 8006694:	4a2c      	ldr	r2, [pc, #176]	; (8006748 <UART_AdvFeatureConfig+0x154>)
 8006696:	4013      	ands	r3, r2
 8006698:	0019      	movs	r1, r3
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	2220      	movs	r2, #32
 80066ac:	4013      	ands	r3, r2
 80066ae:	d00b      	beq.n	80066c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	4a25      	ldr	r2, [pc, #148]	; (800674c <UART_AdvFeatureConfig+0x158>)
 80066b8:	4013      	ands	r3, r2
 80066ba:	0019      	movs	r1, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	430a      	orrs	r2, r1
 80066c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066cc:	2240      	movs	r2, #64	; 0x40
 80066ce:	4013      	ands	r3, r2
 80066d0:	d01d      	beq.n	800670e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	4a1d      	ldr	r2, [pc, #116]	; (8006750 <UART_AdvFeatureConfig+0x15c>)
 80066da:	4013      	ands	r3, r2
 80066dc:	0019      	movs	r1, r3
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ee:	2380      	movs	r3, #128	; 0x80
 80066f0:	035b      	lsls	r3, r3, #13
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d10b      	bne.n	800670e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	4a15      	ldr	r2, [pc, #84]	; (8006754 <UART_AdvFeatureConfig+0x160>)
 80066fe:	4013      	ands	r3, r2
 8006700:	0019      	movs	r1, r3
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	430a      	orrs	r2, r1
 800670c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006712:	2280      	movs	r2, #128	; 0x80
 8006714:	4013      	ands	r3, r2
 8006716:	d00b      	beq.n	8006730 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	4a0e      	ldr	r2, [pc, #56]	; (8006758 <UART_AdvFeatureConfig+0x164>)
 8006720:	4013      	ands	r3, r2
 8006722:	0019      	movs	r1, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	430a      	orrs	r2, r1
 800672e:	605a      	str	r2, [r3, #4]
  }
}
 8006730:	46c0      	nop			; (mov r8, r8)
 8006732:	46bd      	mov	sp, r7
 8006734:	b002      	add	sp, #8
 8006736:	bd80      	pop	{r7, pc}
 8006738:	fffdffff 	.word	0xfffdffff
 800673c:	fffeffff 	.word	0xfffeffff
 8006740:	fffbffff 	.word	0xfffbffff
 8006744:	ffff7fff 	.word	0xffff7fff
 8006748:	ffffefff 	.word	0xffffefff
 800674c:	ffffdfff 	.word	0xffffdfff
 8006750:	ffefffff 	.word	0xffefffff
 8006754:	ff9fffff 	.word	0xff9fffff
 8006758:	fff7ffff 	.word	0xfff7ffff

0800675c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af02      	add	r7, sp, #8
 8006762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2290      	movs	r2, #144	; 0x90
 8006768:	2100      	movs	r1, #0
 800676a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800676c:	f7fc fd3a 	bl	80031e4 <HAL_GetTick>
 8006770:	0003      	movs	r3, r0
 8006772:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2208      	movs	r2, #8
 800677c:	4013      	ands	r3, r2
 800677e:	2b08      	cmp	r3, #8
 8006780:	d10c      	bne.n	800679c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2280      	movs	r2, #128	; 0x80
 8006786:	0391      	lsls	r1, r2, #14
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	4a1a      	ldr	r2, [pc, #104]	; (80067f4 <UART_CheckIdleState+0x98>)
 800678c:	9200      	str	r2, [sp, #0]
 800678e:	2200      	movs	r2, #0
 8006790:	f000 f832 	bl	80067f8 <UART_WaitOnFlagUntilTimeout>
 8006794:	1e03      	subs	r3, r0, #0
 8006796:	d001      	beq.n	800679c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e026      	b.n	80067ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2204      	movs	r2, #4
 80067a4:	4013      	ands	r3, r2
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d10c      	bne.n	80067c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2280      	movs	r2, #128	; 0x80
 80067ae:	03d1      	lsls	r1, r2, #15
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4a10      	ldr	r2, [pc, #64]	; (80067f4 <UART_CheckIdleState+0x98>)
 80067b4:	9200      	str	r2, [sp, #0]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f000 f81e 	bl	80067f8 <UART_WaitOnFlagUntilTimeout>
 80067bc:	1e03      	subs	r3, r0, #0
 80067be:	d001      	beq.n	80067c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e012      	b.n	80067ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2288      	movs	r2, #136	; 0x88
 80067c8:	2120      	movs	r1, #32
 80067ca:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	228c      	movs	r2, #140	; 0x8c
 80067d0:	2120      	movs	r1, #32
 80067d2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2284      	movs	r2, #132	; 0x84
 80067e4:	2100      	movs	r1, #0
 80067e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	0018      	movs	r0, r3
 80067ec:	46bd      	mov	sp, r7
 80067ee:	b004      	add	sp, #16
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	46c0      	nop			; (mov r8, r8)
 80067f4:	01ffffff 	.word	0x01ffffff

080067f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b094      	sub	sp, #80	; 0x50
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	603b      	str	r3, [r7, #0]
 8006804:	1dfb      	adds	r3, r7, #7
 8006806:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006808:	e0a7      	b.n	800695a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800680a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800680c:	3301      	adds	r3, #1
 800680e:	d100      	bne.n	8006812 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006810:	e0a3      	b.n	800695a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006812:	f7fc fce7 	bl	80031e4 <HAL_GetTick>
 8006816:	0002      	movs	r2, r0
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800681e:	429a      	cmp	r2, r3
 8006820:	d302      	bcc.n	8006828 <UART_WaitOnFlagUntilTimeout+0x30>
 8006822:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006824:	2b00      	cmp	r3, #0
 8006826:	d13f      	bne.n	80068a8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006828:	f3ef 8310 	mrs	r3, PRIMASK
 800682c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800682e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006830:	647b      	str	r3, [r7, #68]	; 0x44
 8006832:	2301      	movs	r3, #1
 8006834:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006838:	f383 8810 	msr	PRIMASK, r3
}
 800683c:	46c0      	nop			; (mov r8, r8)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	494e      	ldr	r1, [pc, #312]	; (8006984 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800684a:	400a      	ands	r2, r1
 800684c:	601a      	str	r2, [r3, #0]
 800684e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006850:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006854:	f383 8810 	msr	PRIMASK, r3
}
 8006858:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800685a:	f3ef 8310 	mrs	r3, PRIMASK
 800685e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006862:	643b      	str	r3, [r7, #64]	; 0x40
 8006864:	2301      	movs	r3, #1
 8006866:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686a:	f383 8810 	msr	PRIMASK, r3
}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2101      	movs	r1, #1
 800687c:	438a      	bics	r2, r1
 800687e:	609a      	str	r2, [r3, #8]
 8006880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006884:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006886:	f383 8810 	msr	PRIMASK, r3
}
 800688a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2288      	movs	r2, #136	; 0x88
 8006890:	2120      	movs	r1, #32
 8006892:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	228c      	movs	r2, #140	; 0x8c
 8006898:	2120      	movs	r1, #32
 800689a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2284      	movs	r2, #132	; 0x84
 80068a0:	2100      	movs	r1, #0
 80068a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e069      	b.n	800697c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2204      	movs	r2, #4
 80068b0:	4013      	ands	r3, r2
 80068b2:	d052      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	69da      	ldr	r2, [r3, #28]
 80068ba:	2380      	movs	r3, #128	; 0x80
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	401a      	ands	r2, r3
 80068c0:	2380      	movs	r3, #128	; 0x80
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d148      	bne.n	800695a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2280      	movs	r2, #128	; 0x80
 80068ce:	0112      	lsls	r2, r2, #4
 80068d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068d2:	f3ef 8310 	mrs	r3, PRIMASK
 80068d6:	613b      	str	r3, [r7, #16]
  return(result);
 80068d8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80068da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068dc:	2301      	movs	r3, #1
 80068de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f383 8810 	msr	PRIMASK, r3
}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4924      	ldr	r1, [pc, #144]	; (8006984 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80068f4:	400a      	ands	r2, r1
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	f383 8810 	msr	PRIMASK, r3
}
 8006902:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006904:	f3ef 8310 	mrs	r3, PRIMASK
 8006908:	61fb      	str	r3, [r7, #28]
  return(result);
 800690a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690c:	64bb      	str	r3, [r7, #72]	; 0x48
 800690e:	2301      	movs	r3, #1
 8006910:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006912:	6a3b      	ldr	r3, [r7, #32]
 8006914:	f383 8810 	msr	PRIMASK, r3
}
 8006918:	46c0      	nop			; (mov r8, r8)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689a      	ldr	r2, [r3, #8]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2101      	movs	r1, #1
 8006926:	438a      	bics	r2, r1
 8006928:	609a      	str	r2, [r3, #8]
 800692a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800692c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	f383 8810 	msr	PRIMASK, r3
}
 8006934:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2288      	movs	r2, #136	; 0x88
 800693a:	2120      	movs	r1, #32
 800693c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	228c      	movs	r2, #140	; 0x8c
 8006942:	2120      	movs	r1, #32
 8006944:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2290      	movs	r2, #144	; 0x90
 800694a:	2120      	movs	r1, #32
 800694c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2284      	movs	r2, #132	; 0x84
 8006952:	2100      	movs	r1, #0
 8006954:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e010      	b.n	800697c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	4013      	ands	r3, r2
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	425a      	negs	r2, r3
 800696a:	4153      	adcs	r3, r2
 800696c:	b2db      	uxtb	r3, r3
 800696e:	001a      	movs	r2, r3
 8006970:	1dfb      	adds	r3, r7, #7
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	429a      	cmp	r2, r3
 8006976:	d100      	bne.n	800697a <UART_WaitOnFlagUntilTimeout+0x182>
 8006978:	e747      	b.n	800680a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	0018      	movs	r0, r3
 800697e:	46bd      	mov	sp, r7
 8006980:	b014      	add	sp, #80	; 0x50
 8006982:	bd80      	pop	{r7, pc}
 8006984:	fffffe5f 	.word	0xfffffe5f

08006988 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b098      	sub	sp, #96	; 0x60
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	1dbb      	adds	r3, r7, #6
 8006994:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	1dba      	adds	r2, r7, #6
 80069a0:	215c      	movs	r1, #92	; 0x5c
 80069a2:	8812      	ldrh	r2, [r2, #0]
 80069a4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1dba      	adds	r2, r7, #6
 80069aa:	215e      	movs	r1, #94	; 0x5e
 80069ac:	8812      	ldrh	r2, [r2, #0]
 80069ae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	689a      	ldr	r2, [r3, #8]
 80069ba:	2380      	movs	r3, #128	; 0x80
 80069bc:	015b      	lsls	r3, r3, #5
 80069be:	429a      	cmp	r2, r3
 80069c0:	d10d      	bne.n	80069de <UART_Start_Receive_IT+0x56>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d104      	bne.n	80069d4 <UART_Start_Receive_IT+0x4c>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2260      	movs	r2, #96	; 0x60
 80069ce:	497b      	ldr	r1, [pc, #492]	; (8006bbc <UART_Start_Receive_IT+0x234>)
 80069d0:	5299      	strh	r1, [r3, r2]
 80069d2:	e02e      	b.n	8006a32 <UART_Start_Receive_IT+0xaa>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2260      	movs	r2, #96	; 0x60
 80069d8:	21ff      	movs	r1, #255	; 0xff
 80069da:	5299      	strh	r1, [r3, r2]
 80069dc:	e029      	b.n	8006a32 <UART_Start_Receive_IT+0xaa>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10d      	bne.n	8006a02 <UART_Start_Receive_IT+0x7a>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d104      	bne.n	80069f8 <UART_Start_Receive_IT+0x70>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2260      	movs	r2, #96	; 0x60
 80069f2:	21ff      	movs	r1, #255	; 0xff
 80069f4:	5299      	strh	r1, [r3, r2]
 80069f6:	e01c      	b.n	8006a32 <UART_Start_Receive_IT+0xaa>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2260      	movs	r2, #96	; 0x60
 80069fc:	217f      	movs	r1, #127	; 0x7f
 80069fe:	5299      	strh	r1, [r3, r2]
 8006a00:	e017      	b.n	8006a32 <UART_Start_Receive_IT+0xaa>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	2380      	movs	r3, #128	; 0x80
 8006a08:	055b      	lsls	r3, r3, #21
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d10d      	bne.n	8006a2a <UART_Start_Receive_IT+0xa2>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	691b      	ldr	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d104      	bne.n	8006a20 <UART_Start_Receive_IT+0x98>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2260      	movs	r2, #96	; 0x60
 8006a1a:	217f      	movs	r1, #127	; 0x7f
 8006a1c:	5299      	strh	r1, [r3, r2]
 8006a1e:	e008      	b.n	8006a32 <UART_Start_Receive_IT+0xaa>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2260      	movs	r2, #96	; 0x60
 8006a24:	213f      	movs	r1, #63	; 0x3f
 8006a26:	5299      	strh	r1, [r3, r2]
 8006a28:	e003      	b.n	8006a32 <UART_Start_Receive_IT+0xaa>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2260      	movs	r2, #96	; 0x60
 8006a2e:	2100      	movs	r1, #0
 8006a30:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2290      	movs	r2, #144	; 0x90
 8006a36:	2100      	movs	r1, #0
 8006a38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	228c      	movs	r2, #140	; 0x8c
 8006a3e:	2122      	movs	r1, #34	; 0x22
 8006a40:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a42:	f3ef 8310 	mrs	r3, PRIMASK
 8006a46:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8006a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a52:	f383 8810 	msr	PRIMASK, r3
}
 8006a56:	46c0      	nop			; (mov r8, r8)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2101      	movs	r1, #1
 8006a64:	430a      	orrs	r2, r1
 8006a66:	609a      	str	r2, [r3, #8]
 8006a68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a6a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a6e:	f383 8810 	msr	PRIMASK, r3
}
 8006a72:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006a78:	2380      	movs	r3, #128	; 0x80
 8006a7a:	059b      	lsls	r3, r3, #22
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d150      	bne.n	8006b22 <UART_Start_Receive_IT+0x19a>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2268      	movs	r2, #104	; 0x68
 8006a84:	5a9b      	ldrh	r3, [r3, r2]
 8006a86:	1dba      	adds	r2, r7, #6
 8006a88:	8812      	ldrh	r2, [r2, #0]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d349      	bcc.n	8006b22 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	689a      	ldr	r2, [r3, #8]
 8006a92:	2380      	movs	r3, #128	; 0x80
 8006a94:	015b      	lsls	r3, r3, #5
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d107      	bne.n	8006aaa <UART_Start_Receive_IT+0x122>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d103      	bne.n	8006aaa <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	4a46      	ldr	r2, [pc, #280]	; (8006bc0 <UART_Start_Receive_IT+0x238>)
 8006aa6:	675a      	str	r2, [r3, #116]	; 0x74
 8006aa8:	e002      	b.n	8006ab0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	4a45      	ldr	r2, [pc, #276]	; (8006bc4 <UART_Start_Receive_IT+0x23c>)
 8006aae:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d019      	beq.n	8006aec <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8006abc:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ac0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac8:	f383 8810 	msr	PRIMASK, r3
}
 8006acc:	46c0      	nop			; (mov r8, r8)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2180      	movs	r1, #128	; 0x80
 8006ada:	0049      	lsls	r1, r1, #1
 8006adc:	430a      	orrs	r2, r1
 8006ade:	601a      	str	r2, [r3, #0]
 8006ae0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae6:	f383 8810 	msr	PRIMASK, r3
}
 8006aea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aec:	f3ef 8310 	mrs	r3, PRIMASK
 8006af0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006af4:	657b      	str	r3, [r7, #84]	; 0x54
 8006af6:	2301      	movs	r3, #1
 8006af8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afc:	f383 8810 	msr	PRIMASK, r3
}
 8006b00:	46c0      	nop			; (mov r8, r8)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	689a      	ldr	r2, [r3, #8]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2180      	movs	r1, #128	; 0x80
 8006b0e:	0549      	lsls	r1, r1, #21
 8006b10:	430a      	orrs	r2, r1
 8006b12:	609a      	str	r2, [r3, #8]
 8006b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b16:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1a:	f383 8810 	msr	PRIMASK, r3
}
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	e047      	b.n	8006bb2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	2380      	movs	r3, #128	; 0x80
 8006b28:	015b      	lsls	r3, r3, #5
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d107      	bne.n	8006b3e <UART_Start_Receive_IT+0x1b6>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d103      	bne.n	8006b3e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4a23      	ldr	r2, [pc, #140]	; (8006bc8 <UART_Start_Receive_IT+0x240>)
 8006b3a:	675a      	str	r2, [r3, #116]	; 0x74
 8006b3c:	e002      	b.n	8006b44 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	4a22      	ldr	r2, [pc, #136]	; (8006bcc <UART_Start_Receive_IT+0x244>)
 8006b42:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d019      	beq.n	8006b80 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b50:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b52:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b56:	2301      	movs	r3, #1
 8006b58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	f383 8810 	msr	PRIMASK, r3
}
 8006b60:	46c0      	nop			; (mov r8, r8)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2190      	movs	r1, #144	; 0x90
 8006b6e:	0049      	lsls	r1, r1, #1
 8006b70:	430a      	orrs	r2, r1
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	f383 8810 	msr	PRIMASK, r3
}
 8006b7e:	e018      	b.n	8006bb2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b80:	f3ef 8310 	mrs	r3, PRIMASK
 8006b84:	613b      	str	r3, [r7, #16]
  return(result);
 8006b86:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b88:	653b      	str	r3, [r7, #80]	; 0x50
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f383 8810 	msr	PRIMASK, r3
}
 8006b94:	46c0      	nop			; (mov r8, r8)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2120      	movs	r1, #32
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ba8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	f383 8810 	msr	PRIMASK, r3
}
 8006bb0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	b018      	add	sp, #96	; 0x60
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	000001ff 	.word	0x000001ff
 8006bc0:	080072f9 	.word	0x080072f9
 8006bc4:	0800700d 	.word	0x0800700d
 8006bc8:	08006e99 	.word	0x08006e99
 8006bcc:	08006d25 	.word	0x08006d25

08006bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b08e      	sub	sp, #56	; 0x38
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8006bdc:	617b      	str	r3, [r7, #20]
  return(result);
 8006bde:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006be0:	637b      	str	r3, [r7, #52]	; 0x34
 8006be2:	2301      	movs	r3, #1
 8006be4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	f383 8810 	msr	PRIMASK, r3
}
 8006bec:	46c0      	nop			; (mov r8, r8)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4926      	ldr	r1, [pc, #152]	; (8006c94 <UART_EndRxTransfer+0xc4>)
 8006bfa:	400a      	ands	r2, r1
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	f383 8810 	msr	PRIMASK, r3
}
 8006c08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c0e:	623b      	str	r3, [r7, #32]
  return(result);
 8006c10:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c12:	633b      	str	r3, [r7, #48]	; 0x30
 8006c14:	2301      	movs	r3, #1
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	f383 8810 	msr	PRIMASK, r3
}
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	491b      	ldr	r1, [pc, #108]	; (8006c98 <UART_EndRxTransfer+0xc8>)
 8006c2c:	400a      	ands	r2, r1
 8006c2e:	609a      	str	r2, [r3, #8]
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c36:	f383 8810 	msr	PRIMASK, r3
}
 8006c3a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d118      	bne.n	8006c76 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c44:	f3ef 8310 	mrs	r3, PRIMASK
 8006c48:	60bb      	str	r3, [r7, #8]
  return(result);
 8006c4a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c4e:	2301      	movs	r3, #1
 8006c50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f383 8810 	msr	PRIMASK, r3
}
 8006c58:	46c0      	nop			; (mov r8, r8)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2110      	movs	r1, #16
 8006c66:	438a      	bics	r2, r1
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f383 8810 	msr	PRIMASK, r3
}
 8006c74:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	228c      	movs	r2, #140	; 0x8c
 8006c7a:	2120      	movs	r1, #32
 8006c7c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c8a:	46c0      	nop			; (mov r8, r8)
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	b00e      	add	sp, #56	; 0x38
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	46c0      	nop			; (mov r8, r8)
 8006c94:	fffffedf 	.word	0xfffffedf
 8006c98:	effffffe 	.word	0xeffffffe

08006c9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	225e      	movs	r2, #94	; 0x5e
 8006cae:	2100      	movs	r1, #0
 8006cb0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2256      	movs	r2, #86	; 0x56
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	f7ff f92f 	bl	8005f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc2:	46c0      	nop			; (mov r8, r8)
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	b004      	add	sp, #16
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cca:	b580      	push	{r7, lr}
 8006ccc:	b086      	sub	sp, #24
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8006cd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cda:	617b      	str	r3, [r7, #20]
 8006cdc:	2301      	movs	r3, #1
 8006cde:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f383 8810 	msr	PRIMASK, r3
}
 8006ce6:	46c0      	nop			; (mov r8, r8)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2140      	movs	r1, #64	; 0x40
 8006cf4:	438a      	bics	r2, r1
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f383 8810 	msr	PRIMASK, r3
}
 8006d02:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2288      	movs	r2, #136	; 0x88
 8006d08:	2120      	movs	r1, #32
 8006d0a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	0018      	movs	r0, r3
 8006d16:	f7ff f8f3 	bl	8005f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d1a:	46c0      	nop			; (mov r8, r8)
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	b006      	add	sp, #24
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b090      	sub	sp, #64	; 0x40
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d2c:	203e      	movs	r0, #62	; 0x3e
 8006d2e:	183b      	adds	r3, r7, r0
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	2160      	movs	r1, #96	; 0x60
 8006d34:	5a52      	ldrh	r2, [r2, r1]
 8006d36:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	228c      	movs	r2, #140	; 0x8c
 8006d3c:	589b      	ldr	r3, [r3, r2]
 8006d3e:	2b22      	cmp	r3, #34	; 0x22
 8006d40:	d000      	beq.n	8006d44 <UART_RxISR_8BIT+0x20>
 8006d42:	e09a      	b.n	8006e7a <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d4a:	213c      	movs	r1, #60	; 0x3c
 8006d4c:	187b      	adds	r3, r7, r1
 8006d4e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d50:	187b      	adds	r3, r7, r1
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	183b      	adds	r3, r7, r0
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	b2d9      	uxtb	r1, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d60:	400a      	ands	r2, r1
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	225e      	movs	r2, #94	; 0x5e
 8006d74:	5a9b      	ldrh	r3, [r3, r2]
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b299      	uxth	r1, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	225e      	movs	r2, #94	; 0x5e
 8006d80:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	225e      	movs	r2, #94	; 0x5e
 8006d86:	5a9b      	ldrh	r3, [r3, r2]
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d000      	beq.n	8006d90 <UART_RxISR_8BIT+0x6c>
 8006d8e:	e07c      	b.n	8006e8a <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d90:	f3ef 8310 	mrs	r3, PRIMASK
 8006d94:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d96:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d98:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	f383 8810 	msr	PRIMASK, r3
}
 8006da4:	46c0      	nop			; (mov r8, r8)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4938      	ldr	r1, [pc, #224]	; (8006e94 <UART_RxISR_8BIT+0x170>)
 8006db2:	400a      	ands	r2, r1
 8006db4:	601a      	str	r2, [r3, #0]
 8006db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	f383 8810 	msr	PRIMASK, r3
}
 8006dc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dca:	637b      	str	r3, [r7, #52]	; 0x34
 8006dcc:	2301      	movs	r3, #1
 8006dce:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd2:	f383 8810 	msr	PRIMASK, r3
}
 8006dd6:	46c0      	nop			; (mov r8, r8)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2101      	movs	r1, #1
 8006de4:	438a      	bics	r2, r1
 8006de6:	609a      	str	r2, [r3, #8]
 8006de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	f383 8810 	msr	PRIMASK, r3
}
 8006df2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	228c      	movs	r2, #140	; 0x8c
 8006df8:	2120      	movs	r1, #32
 8006dfa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d12f      	bne.n	8006e70 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e16:	f3ef 8310 	mrs	r3, PRIMASK
 8006e1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e1c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e1e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e20:	2301      	movs	r3, #1
 8006e22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f383 8810 	msr	PRIMASK, r3
}
 8006e2a:	46c0      	nop			; (mov r8, r8)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2110      	movs	r1, #16
 8006e38:	438a      	bics	r2, r1
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f383 8810 	msr	PRIMASK, r3
}
 8006e46:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	69db      	ldr	r3, [r3, #28]
 8006e4e:	2210      	movs	r2, #16
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b10      	cmp	r3, #16
 8006e54:	d103      	bne.n	8006e5e <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2210      	movs	r2, #16
 8006e5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	225c      	movs	r2, #92	; 0x5c
 8006e62:	5a9a      	ldrh	r2, [r3, r2]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	0011      	movs	r1, r2
 8006e68:	0018      	movs	r0, r3
 8006e6a:	f7ff f861 	bl	8005f30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e6e:	e00c      	b.n	8006e8a <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	0018      	movs	r0, r3
 8006e74:	f7ff f84c 	bl	8005f10 <HAL_UART_RxCpltCallback>
}
 8006e78:	e007      	b.n	8006e8a <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	699a      	ldr	r2, [r3, #24]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2108      	movs	r1, #8
 8006e86:	430a      	orrs	r2, r1
 8006e88:	619a      	str	r2, [r3, #24]
}
 8006e8a:	46c0      	nop			; (mov r8, r8)
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	b010      	add	sp, #64	; 0x40
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	fffffedf 	.word	0xfffffedf

08006e98 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b090      	sub	sp, #64	; 0x40
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ea0:	203e      	movs	r0, #62	; 0x3e
 8006ea2:	183b      	adds	r3, r7, r0
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	2160      	movs	r1, #96	; 0x60
 8006ea8:	5a52      	ldrh	r2, [r2, r1]
 8006eaa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	228c      	movs	r2, #140	; 0x8c
 8006eb0:	589b      	ldr	r3, [r3, r2]
 8006eb2:	2b22      	cmp	r3, #34	; 0x22
 8006eb4:	d000      	beq.n	8006eb8 <UART_RxISR_16BIT+0x20>
 8006eb6:	e09a      	b.n	8006fee <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ebe:	213c      	movs	r1, #60	; 0x3c
 8006ec0:	187b      	adds	r3, r7, r1
 8006ec2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8006eca:	187b      	adds	r3, r7, r1
 8006ecc:	183a      	adds	r2, r7, r0
 8006ece:	881b      	ldrh	r3, [r3, #0]
 8006ed0:	8812      	ldrh	r2, [r2, #0]
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	b29a      	uxth	r2, r3
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ede:	1c9a      	adds	r2, r3, #2
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	225e      	movs	r2, #94	; 0x5e
 8006ee8:	5a9b      	ldrh	r3, [r3, r2]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b299      	uxth	r1, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	225e      	movs	r2, #94	; 0x5e
 8006ef4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	225e      	movs	r2, #94	; 0x5e
 8006efa:	5a9b      	ldrh	r3, [r3, r2]
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d000      	beq.n	8006f04 <UART_RxISR_16BIT+0x6c>
 8006f02:	e07c      	b.n	8006ffe <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f04:	f3ef 8310 	mrs	r3, PRIMASK
 8006f08:	617b      	str	r3, [r7, #20]
  return(result);
 8006f0a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f0e:	2301      	movs	r3, #1
 8006f10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f383 8810 	msr	PRIMASK, r3
}
 8006f18:	46c0      	nop			; (mov r8, r8)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4938      	ldr	r1, [pc, #224]	; (8007008 <UART_RxISR_16BIT+0x170>)
 8006f26:	400a      	ands	r2, r1
 8006f28:	601a      	str	r2, [r3, #0]
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	f383 8810 	msr	PRIMASK, r3
}
 8006f34:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f36:	f3ef 8310 	mrs	r3, PRIMASK
 8006f3a:	623b      	str	r3, [r7, #32]
  return(result);
 8006f3c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f3e:	633b      	str	r3, [r7, #48]	; 0x30
 8006f40:	2301      	movs	r3, #1
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	f383 8810 	msr	PRIMASK, r3
}
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2101      	movs	r1, #1
 8006f58:	438a      	bics	r2, r1
 8006f5a:	609a      	str	r2, [r3, #8]
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	f383 8810 	msr	PRIMASK, r3
}
 8006f66:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	228c      	movs	r2, #140	; 0x8c
 8006f6c:	2120      	movs	r1, #32
 8006f6e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d12f      	bne.n	8006fe4 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f90:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f94:	2301      	movs	r3, #1
 8006f96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f383 8810 	msr	PRIMASK, r3
}
 8006f9e:	46c0      	nop			; (mov r8, r8)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2110      	movs	r1, #16
 8006fac:	438a      	bics	r2, r1
 8006fae:	601a      	str	r2, [r3, #0]
 8006fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	f383 8810 	msr	PRIMASK, r3
}
 8006fba:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	69db      	ldr	r3, [r3, #28]
 8006fc2:	2210      	movs	r2, #16
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	2b10      	cmp	r3, #16
 8006fc8:	d103      	bne.n	8006fd2 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2210      	movs	r2, #16
 8006fd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	225c      	movs	r2, #92	; 0x5c
 8006fd6:	5a9a      	ldrh	r2, [r3, r2]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	0011      	movs	r1, r2
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f7fe ffa7 	bl	8005f30 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006fe2:	e00c      	b.n	8006ffe <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f7fe ff92 	bl	8005f10 <HAL_UART_RxCpltCallback>
}
 8006fec:	e007      	b.n	8006ffe <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699a      	ldr	r2, [r3, #24]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2108      	movs	r1, #8
 8006ffa:	430a      	orrs	r2, r1
 8006ffc:	619a      	str	r2, [r3, #24]
}
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	46bd      	mov	sp, r7
 8007002:	b010      	add	sp, #64	; 0x40
 8007004:	bd80      	pop	{r7, pc}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	fffffedf 	.word	0xfffffedf

0800700c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b09c      	sub	sp, #112	; 0x70
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007014:	236a      	movs	r3, #106	; 0x6a
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	2160      	movs	r1, #96	; 0x60
 800701c:	5a52      	ldrh	r2, [r2, r1]
 800701e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	228c      	movs	r2, #140	; 0x8c
 800703c:	589b      	ldr	r3, [r3, r2]
 800703e:	2b22      	cmp	r3, #34	; 0x22
 8007040:	d000      	beq.n	8007044 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007042:	e144      	b.n	80072ce <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007044:	235e      	movs	r3, #94	; 0x5e
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	2168      	movs	r1, #104	; 0x68
 800704c:	5a52      	ldrh	r2, [r2, r1]
 800704e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007050:	e0eb      	b.n	800722a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007058:	215c      	movs	r1, #92	; 0x5c
 800705a:	187b      	adds	r3, r7, r1
 800705c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800705e:	187b      	adds	r3, r7, r1
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	236a      	movs	r3, #106	; 0x6a
 8007066:	18fb      	adds	r3, r7, r3
 8007068:	881b      	ldrh	r3, [r3, #0]
 800706a:	b2d9      	uxtb	r1, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007070:	400a      	ands	r2, r1
 8007072:	b2d2      	uxtb	r2, r2
 8007074:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707a:	1c5a      	adds	r2, r3, #1
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	225e      	movs	r2, #94	; 0x5e
 8007084:	5a9b      	ldrh	r3, [r3, r2]
 8007086:	b29b      	uxth	r3, r3
 8007088:	3b01      	subs	r3, #1
 800708a:	b299      	uxth	r1, r3
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	225e      	movs	r2, #94	; 0x5e
 8007090:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69db      	ldr	r3, [r3, #28]
 8007098:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800709a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709c:	2207      	movs	r2, #7
 800709e:	4013      	ands	r3, r2
 80070a0:	d049      	beq.n	8007136 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070a4:	2201      	movs	r2, #1
 80070a6:	4013      	ands	r3, r2
 80070a8:	d010      	beq.n	80070cc <UART_RxISR_8BIT_FIFOEN+0xc0>
 80070aa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80070ac:	2380      	movs	r3, #128	; 0x80
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	4013      	ands	r3, r2
 80070b2:	d00b      	beq.n	80070cc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2201      	movs	r2, #1
 80070ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2290      	movs	r2, #144	; 0x90
 80070c0:	589b      	ldr	r3, [r3, r2]
 80070c2:	2201      	movs	r2, #1
 80070c4:	431a      	orrs	r2, r3
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2190      	movs	r1, #144	; 0x90
 80070ca:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ce:	2202      	movs	r2, #2
 80070d0:	4013      	ands	r3, r2
 80070d2:	d00f      	beq.n	80070f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80070d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070d6:	2201      	movs	r2, #1
 80070d8:	4013      	ands	r3, r2
 80070da:	d00b      	beq.n	80070f4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2202      	movs	r2, #2
 80070e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2290      	movs	r2, #144	; 0x90
 80070e8:	589b      	ldr	r3, [r3, r2]
 80070ea:	2204      	movs	r2, #4
 80070ec:	431a      	orrs	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2190      	movs	r1, #144	; 0x90
 80070f2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070f6:	2204      	movs	r2, #4
 80070f8:	4013      	ands	r3, r2
 80070fa:	d00f      	beq.n	800711c <UART_RxISR_8BIT_FIFOEN+0x110>
 80070fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070fe:	2201      	movs	r2, #1
 8007100:	4013      	ands	r3, r2
 8007102:	d00b      	beq.n	800711c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2204      	movs	r2, #4
 800710a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2290      	movs	r2, #144	; 0x90
 8007110:	589b      	ldr	r3, [r3, r2]
 8007112:	2202      	movs	r2, #2
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2190      	movs	r1, #144	; 0x90
 800711a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2290      	movs	r2, #144	; 0x90
 8007120:	589b      	ldr	r3, [r3, r2]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d007      	beq.n	8007136 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	0018      	movs	r0, r3
 800712a:	f7fe fef9 	bl	8005f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2290      	movs	r2, #144	; 0x90
 8007132:	2100      	movs	r1, #0
 8007134:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	225e      	movs	r2, #94	; 0x5e
 800713a:	5a9b      	ldrh	r3, [r3, r2]
 800713c:	b29b      	uxth	r3, r3
 800713e:	2b00      	cmp	r3, #0
 8007140:	d173      	bne.n	800722a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007142:	f3ef 8310 	mrs	r3, PRIMASK
 8007146:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800714a:	65bb      	str	r3, [r7, #88]	; 0x58
 800714c:	2301      	movs	r3, #1
 800714e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007152:	f383 8810 	msr	PRIMASK, r3
}
 8007156:	46c0      	nop			; (mov r8, r8)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4961      	ldr	r1, [pc, #388]	; (80072e8 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8007164:	400a      	ands	r2, r1
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800716a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716e:	f383 8810 	msr	PRIMASK, r3
}
 8007172:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007174:	f3ef 8310 	mrs	r3, PRIMASK
 8007178:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800717a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800717c:	657b      	str	r3, [r7, #84]	; 0x54
 800717e:	2301      	movs	r3, #1
 8007180:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007184:	f383 8810 	msr	PRIMASK, r3
}
 8007188:	46c0      	nop			; (mov r8, r8)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4955      	ldr	r1, [pc, #340]	; (80072ec <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8007196:	400a      	ands	r2, r1
 8007198:	609a      	str	r2, [r3, #8]
 800719a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800719c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800719e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071a0:	f383 8810 	msr	PRIMASK, r3
}
 80071a4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	228c      	movs	r2, #140	; 0x8c
 80071aa:	2120      	movs	r1, #32
 80071ac:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d12f      	bne.n	8007222 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071c8:	f3ef 8310 	mrs	r3, PRIMASK
 80071cc:	623b      	str	r3, [r7, #32]
  return(result);
 80071ce:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d0:	653b      	str	r3, [r7, #80]	; 0x50
 80071d2:	2301      	movs	r3, #1
 80071d4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	f383 8810 	msr	PRIMASK, r3
}
 80071dc:	46c0      	nop			; (mov r8, r8)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2110      	movs	r1, #16
 80071ea:	438a      	bics	r2, r1
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	f383 8810 	msr	PRIMASK, r3
}
 80071f8:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	2210      	movs	r2, #16
 8007202:	4013      	ands	r3, r2
 8007204:	2b10      	cmp	r3, #16
 8007206:	d103      	bne.n	8007210 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2210      	movs	r2, #16
 800720e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	225c      	movs	r2, #92	; 0x5c
 8007214:	5a9a      	ldrh	r2, [r3, r2]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	0011      	movs	r1, r2
 800721a:	0018      	movs	r0, r3
 800721c:	f7fe fe88 	bl	8005f30 <HAL_UARTEx_RxEventCallback>
 8007220:	e003      	b.n	800722a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	0018      	movs	r0, r3
 8007226:	f7fe fe73 	bl	8005f10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800722a:	235e      	movs	r3, #94	; 0x5e
 800722c:	18fb      	adds	r3, r7, r3
 800722e:	881b      	ldrh	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d004      	beq.n	800723e <UART_RxISR_8BIT_FIFOEN+0x232>
 8007234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007236:	2220      	movs	r2, #32
 8007238:	4013      	ands	r3, r2
 800723a:	d000      	beq.n	800723e <UART_RxISR_8BIT_FIFOEN+0x232>
 800723c:	e709      	b.n	8007052 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800723e:	204e      	movs	r0, #78	; 0x4e
 8007240:	183b      	adds	r3, r7, r0
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	215e      	movs	r1, #94	; 0x5e
 8007246:	5a52      	ldrh	r2, [r2, r1]
 8007248:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800724a:	0001      	movs	r1, r0
 800724c:	187b      	adds	r3, r7, r1
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d044      	beq.n	80072de <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2268      	movs	r2, #104	; 0x68
 8007258:	5a9b      	ldrh	r3, [r3, r2]
 800725a:	187a      	adds	r2, r7, r1
 800725c:	8812      	ldrh	r2, [r2, #0]
 800725e:	429a      	cmp	r2, r3
 8007260:	d23d      	bcs.n	80072de <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007262:	f3ef 8310 	mrs	r3, PRIMASK
 8007266:	60bb      	str	r3, [r7, #8]
  return(result);
 8007268:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800726a:	64bb      	str	r3, [r7, #72]	; 0x48
 800726c:	2301      	movs	r3, #1
 800726e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f383 8810 	msr	PRIMASK, r3
}
 8007276:	46c0      	nop			; (mov r8, r8)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	491b      	ldr	r1, [pc, #108]	; (80072f0 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8007284:	400a      	ands	r2, r1
 8007286:	609a      	str	r2, [r3, #8]
 8007288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800728a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f383 8810 	msr	PRIMASK, r3
}
 8007292:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8007298:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800729a:	f3ef 8310 	mrs	r3, PRIMASK
 800729e:	617b      	str	r3, [r7, #20]
  return(result);
 80072a0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072a2:	647b      	str	r3, [r7, #68]	; 0x44
 80072a4:	2301      	movs	r3, #1
 80072a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	f383 8810 	msr	PRIMASK, r3
}
 80072ae:	46c0      	nop			; (mov r8, r8)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2120      	movs	r1, #32
 80072bc:	430a      	orrs	r2, r1
 80072be:	601a      	str	r2, [r3, #0]
 80072c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f383 8810 	msr	PRIMASK, r3
}
 80072ca:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072cc:	e007      	b.n	80072de <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	699a      	ldr	r2, [r3, #24]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2108      	movs	r1, #8
 80072da:	430a      	orrs	r2, r1
 80072dc:	619a      	str	r2, [r3, #24]
}
 80072de:	46c0      	nop			; (mov r8, r8)
 80072e0:	46bd      	mov	sp, r7
 80072e2:	b01c      	add	sp, #112	; 0x70
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	46c0      	nop			; (mov r8, r8)
 80072e8:	fffffeff 	.word	0xfffffeff
 80072ec:	effffffe 	.word	0xeffffffe
 80072f0:	efffffff 	.word	0xefffffff
 80072f4:	08006d25 	.word	0x08006d25

080072f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b09e      	sub	sp, #120	; 0x78
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007300:	2372      	movs	r3, #114	; 0x72
 8007302:	18fb      	adds	r3, r7, r3
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	2160      	movs	r1, #96	; 0x60
 8007308:	5a52      	ldrh	r2, [r2, r1]
 800730a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	228c      	movs	r2, #140	; 0x8c
 8007328:	589b      	ldr	r3, [r3, r2]
 800732a:	2b22      	cmp	r3, #34	; 0x22
 800732c:	d000      	beq.n	8007330 <UART_RxISR_16BIT_FIFOEN+0x38>
 800732e:	e144      	b.n	80075ba <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007330:	2366      	movs	r3, #102	; 0x66
 8007332:	18fb      	adds	r3, r7, r3
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	2168      	movs	r1, #104	; 0x68
 8007338:	5a52      	ldrh	r2, [r2, r1]
 800733a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800733c:	e0eb      	b.n	8007516 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007344:	2164      	movs	r1, #100	; 0x64
 8007346:	187b      	adds	r3, r7, r1
 8007348:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800734e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8007350:	187b      	adds	r3, r7, r1
 8007352:	2272      	movs	r2, #114	; 0x72
 8007354:	18ba      	adds	r2, r7, r2
 8007356:	881b      	ldrh	r3, [r3, #0]
 8007358:	8812      	ldrh	r2, [r2, #0]
 800735a:	4013      	ands	r3, r2
 800735c:	b29a      	uxth	r2, r3
 800735e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007360:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007366:	1c9a      	adds	r2, r3, #2
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	225e      	movs	r2, #94	; 0x5e
 8007370:	5a9b      	ldrh	r3, [r3, r2]
 8007372:	b29b      	uxth	r3, r3
 8007374:	3b01      	subs	r3, #1
 8007376:	b299      	uxth	r1, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	225e      	movs	r2, #94	; 0x5e
 800737c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	69db      	ldr	r3, [r3, #28]
 8007384:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007386:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007388:	2207      	movs	r2, #7
 800738a:	4013      	ands	r3, r2
 800738c:	d049      	beq.n	8007422 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800738e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007390:	2201      	movs	r2, #1
 8007392:	4013      	ands	r3, r2
 8007394:	d010      	beq.n	80073b8 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8007396:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007398:	2380      	movs	r3, #128	; 0x80
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	4013      	ands	r3, r2
 800739e:	d00b      	beq.n	80073b8 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2201      	movs	r2, #1
 80073a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2290      	movs	r2, #144	; 0x90
 80073ac:	589b      	ldr	r3, [r3, r2]
 80073ae:	2201      	movs	r2, #1
 80073b0:	431a      	orrs	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2190      	movs	r1, #144	; 0x90
 80073b6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ba:	2202      	movs	r2, #2
 80073bc:	4013      	ands	r3, r2
 80073be:	d00f      	beq.n	80073e0 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80073c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073c2:	2201      	movs	r2, #1
 80073c4:	4013      	ands	r3, r2
 80073c6:	d00b      	beq.n	80073e0 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2202      	movs	r2, #2
 80073ce:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2290      	movs	r2, #144	; 0x90
 80073d4:	589b      	ldr	r3, [r3, r2]
 80073d6:	2204      	movs	r2, #4
 80073d8:	431a      	orrs	r2, r3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2190      	movs	r1, #144	; 0x90
 80073de:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073e2:	2204      	movs	r2, #4
 80073e4:	4013      	ands	r3, r2
 80073e6:	d00f      	beq.n	8007408 <UART_RxISR_16BIT_FIFOEN+0x110>
 80073e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073ea:	2201      	movs	r2, #1
 80073ec:	4013      	ands	r3, r2
 80073ee:	d00b      	beq.n	8007408 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2204      	movs	r2, #4
 80073f6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2290      	movs	r2, #144	; 0x90
 80073fc:	589b      	ldr	r3, [r3, r2]
 80073fe:	2202      	movs	r2, #2
 8007400:	431a      	orrs	r2, r3
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2190      	movs	r1, #144	; 0x90
 8007406:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2290      	movs	r2, #144	; 0x90
 800740c:	589b      	ldr	r3, [r3, r2]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d007      	beq.n	8007422 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	0018      	movs	r0, r3
 8007416:	f7fe fd83 	bl	8005f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2290      	movs	r2, #144	; 0x90
 800741e:	2100      	movs	r1, #0
 8007420:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	225e      	movs	r2, #94	; 0x5e
 8007426:	5a9b      	ldrh	r3, [r3, r2]
 8007428:	b29b      	uxth	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d173      	bne.n	8007516 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800742e:	f3ef 8310 	mrs	r3, PRIMASK
 8007432:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007436:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007438:	2301      	movs	r3, #1
 800743a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800743c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800743e:	f383 8810 	msr	PRIMASK, r3
}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4961      	ldr	r1, [pc, #388]	; (80075d4 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8007450:	400a      	ands	r2, r1
 8007452:	601a      	str	r2, [r3, #0]
 8007454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007456:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745a:	f383 8810 	msr	PRIMASK, r3
}
 800745e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007460:	f3ef 8310 	mrs	r3, PRIMASK
 8007464:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007468:	65bb      	str	r3, [r7, #88]	; 0x58
 800746a:	2301      	movs	r3, #1
 800746c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800746e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007470:	f383 8810 	msr	PRIMASK, r3
}
 8007474:	46c0      	nop			; (mov r8, r8)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689a      	ldr	r2, [r3, #8]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4955      	ldr	r1, [pc, #340]	; (80075d8 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8007482:	400a      	ands	r2, r1
 8007484:	609a      	str	r2, [r3, #8]
 8007486:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007488:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800748a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800748c:	f383 8810 	msr	PRIMASK, r3
}
 8007490:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	228c      	movs	r2, #140	; 0x8c
 8007496:	2120      	movs	r1, #32
 8007498:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2200      	movs	r2, #0
 800749e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d12f      	bne.n	800750e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b4:	f3ef 8310 	mrs	r3, PRIMASK
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80074ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074bc:	657b      	str	r3, [r7, #84]	; 0x54
 80074be:	2301      	movs	r3, #1
 80074c0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c4:	f383 8810 	msr	PRIMASK, r3
}
 80074c8:	46c0      	nop			; (mov r8, r8)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2110      	movs	r1, #16
 80074d6:	438a      	bics	r2, r1
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e0:	f383 8810 	msr	PRIMASK, r3
}
 80074e4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	2210      	movs	r2, #16
 80074ee:	4013      	ands	r3, r2
 80074f0:	2b10      	cmp	r3, #16
 80074f2:	d103      	bne.n	80074fc <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2210      	movs	r2, #16
 80074fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	225c      	movs	r2, #92	; 0x5c
 8007500:	5a9a      	ldrh	r2, [r3, r2]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	0011      	movs	r1, r2
 8007506:	0018      	movs	r0, r3
 8007508:	f7fe fd12 	bl	8005f30 <HAL_UARTEx_RxEventCallback>
 800750c:	e003      	b.n	8007516 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	0018      	movs	r0, r3
 8007512:	f7fe fcfd 	bl	8005f10 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007516:	2366      	movs	r3, #102	; 0x66
 8007518:	18fb      	adds	r3, r7, r3
 800751a:	881b      	ldrh	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d004      	beq.n	800752a <UART_RxISR_16BIT_FIFOEN+0x232>
 8007520:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007522:	2220      	movs	r2, #32
 8007524:	4013      	ands	r3, r2
 8007526:	d000      	beq.n	800752a <UART_RxISR_16BIT_FIFOEN+0x232>
 8007528:	e709      	b.n	800733e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800752a:	2052      	movs	r0, #82	; 0x52
 800752c:	183b      	adds	r3, r7, r0
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	215e      	movs	r1, #94	; 0x5e
 8007532:	5a52      	ldrh	r2, [r2, r1]
 8007534:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007536:	0001      	movs	r1, r0
 8007538:	187b      	adds	r3, r7, r1
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d044      	beq.n	80075ca <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2268      	movs	r2, #104	; 0x68
 8007544:	5a9b      	ldrh	r3, [r3, r2]
 8007546:	187a      	adds	r2, r7, r1
 8007548:	8812      	ldrh	r2, [r2, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d23d      	bcs.n	80075ca <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800754e:	f3ef 8310 	mrs	r3, PRIMASK
 8007552:	60fb      	str	r3, [r7, #12]
  return(result);
 8007554:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007556:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007558:	2301      	movs	r3, #1
 800755a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	f383 8810 	msr	PRIMASK, r3
}
 8007562:	46c0      	nop			; (mov r8, r8)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	689a      	ldr	r2, [r3, #8]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	491b      	ldr	r1, [pc, #108]	; (80075dc <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8007570:	400a      	ands	r2, r1
 8007572:	609a      	str	r2, [r3, #8]
 8007574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007576:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f383 8810 	msr	PRIMASK, r3
}
 800757e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a17      	ldr	r2, [pc, #92]	; (80075e0 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8007584:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007586:	f3ef 8310 	mrs	r3, PRIMASK
 800758a:	61bb      	str	r3, [r7, #24]
  return(result);
 800758c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800758e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007590:	2301      	movs	r3, #1
 8007592:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	f383 8810 	msr	PRIMASK, r3
}
 800759a:	46c0      	nop			; (mov r8, r8)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2120      	movs	r1, #32
 80075a8:	430a      	orrs	r2, r1
 80075aa:	601a      	str	r2, [r3, #0]
 80075ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075ae:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	f383 8810 	msr	PRIMASK, r3
}
 80075b6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80075b8:	e007      	b.n	80075ca <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	699a      	ldr	r2, [r3, #24]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2108      	movs	r1, #8
 80075c6:	430a      	orrs	r2, r1
 80075c8:	619a      	str	r2, [r3, #24]
}
 80075ca:	46c0      	nop			; (mov r8, r8)
 80075cc:	46bd      	mov	sp, r7
 80075ce:	b01e      	add	sp, #120	; 0x78
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	46c0      	nop			; (mov r8, r8)
 80075d4:	fffffeff 	.word	0xfffffeff
 80075d8:	effffffe 	.word	0xeffffffe
 80075dc:	efffffff 	.word	0xefffffff
 80075e0:	08006e99 	.word	0x08006e99

080075e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80075ec:	46c0      	nop			; (mov r8, r8)
 80075ee:	46bd      	mov	sp, r7
 80075f0:	b002      	add	sp, #8
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80075fc:	46c0      	nop			; (mov r8, r8)
 80075fe:	46bd      	mov	sp, r7
 8007600:	b002      	add	sp, #8
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800760c:	46c0      	nop			; (mov r8, r8)
 800760e:	46bd      	mov	sp, r7
 8007610:	b002      	add	sp, #8
 8007612:	bd80      	pop	{r7, pc}

08007614 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2284      	movs	r2, #132	; 0x84
 8007620:	5c9b      	ldrb	r3, [r3, r2]
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <HAL_UARTEx_DisableFifoMode+0x16>
 8007626:	2302      	movs	r3, #2
 8007628:	e027      	b.n	800767a <HAL_UARTEx_DisableFifoMode+0x66>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2284      	movs	r2, #132	; 0x84
 800762e:	2101      	movs	r1, #1
 8007630:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2288      	movs	r2, #136	; 0x88
 8007636:	2124      	movs	r1, #36	; 0x24
 8007638:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2101      	movs	r1, #1
 800764e:	438a      	bics	r2, r1
 8007650:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4a0b      	ldr	r2, [pc, #44]	; (8007684 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007656:	4013      	ands	r3, r2
 8007658:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2288      	movs	r2, #136	; 0x88
 800766c:	2120      	movs	r1, #32
 800766e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2284      	movs	r2, #132	; 0x84
 8007674:	2100      	movs	r1, #0
 8007676:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	0018      	movs	r0, r3
 800767c:	46bd      	mov	sp, r7
 800767e:	b004      	add	sp, #16
 8007680:	bd80      	pop	{r7, pc}
 8007682:	46c0      	nop			; (mov r8, r8)
 8007684:	dfffffff 	.word	0xdfffffff

08007688 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2284      	movs	r2, #132	; 0x84
 8007696:	5c9b      	ldrb	r3, [r3, r2]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d101      	bne.n	80076a0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800769c:	2302      	movs	r3, #2
 800769e:	e02e      	b.n	80076fe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2284      	movs	r2, #132	; 0x84
 80076a4:	2101      	movs	r1, #1
 80076a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2288      	movs	r2, #136	; 0x88
 80076ac:	2124      	movs	r1, #36	; 0x24
 80076ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2101      	movs	r1, #1
 80076c4:	438a      	bics	r2, r1
 80076c6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	08d9      	lsrs	r1, r3, #3
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	430a      	orrs	r2, r1
 80076da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	0018      	movs	r0, r3
 80076e0:	f000 f854 	bl	800778c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2288      	movs	r2, #136	; 0x88
 80076f0:	2120      	movs	r1, #32
 80076f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2284      	movs	r2, #132	; 0x84
 80076f8:	2100      	movs	r1, #0
 80076fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80076fc:	2300      	movs	r3, #0
}
 80076fe:	0018      	movs	r0, r3
 8007700:	46bd      	mov	sp, r7
 8007702:	b004      	add	sp, #16
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2284      	movs	r2, #132	; 0x84
 8007716:	5c9b      	ldrb	r3, [r3, r2]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800771c:	2302      	movs	r3, #2
 800771e:	e02f      	b.n	8007780 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2284      	movs	r2, #132	; 0x84
 8007724:	2101      	movs	r1, #1
 8007726:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2288      	movs	r2, #136	; 0x88
 800772c:	2124      	movs	r1, #36	; 0x24
 800772e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681a      	ldr	r2, [r3, #0]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	2101      	movs	r1, #1
 8007744:	438a      	bics	r2, r1
 8007746:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	4a0e      	ldr	r2, [pc, #56]	; (8007788 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007750:	4013      	ands	r3, r2
 8007752:	0019      	movs	r1, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	430a      	orrs	r2, r1
 800775c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	0018      	movs	r0, r3
 8007762:	f000 f813 	bl	800778c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	68fa      	ldr	r2, [r7, #12]
 800776c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2288      	movs	r2, #136	; 0x88
 8007772:	2120      	movs	r1, #32
 8007774:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2284      	movs	r2, #132	; 0x84
 800777a:	2100      	movs	r1, #0
 800777c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	0018      	movs	r0, r3
 8007782:	46bd      	mov	sp, r7
 8007784:	b004      	add	sp, #16
 8007786:	bd80      	pop	{r7, pc}
 8007788:	f1ffffff 	.word	0xf1ffffff

0800778c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800778c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007798:	2b00      	cmp	r3, #0
 800779a:	d108      	bne.n	80077ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	226a      	movs	r2, #106	; 0x6a
 80077a0:	2101      	movs	r1, #1
 80077a2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2268      	movs	r2, #104	; 0x68
 80077a8:	2101      	movs	r1, #1
 80077aa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80077ac:	e043      	b.n	8007836 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80077ae:	260f      	movs	r6, #15
 80077b0:	19bb      	adds	r3, r7, r6
 80077b2:	2208      	movs	r2, #8
 80077b4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80077b6:	200e      	movs	r0, #14
 80077b8:	183b      	adds	r3, r7, r0
 80077ba:	2208      	movs	r2, #8
 80077bc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	0e5b      	lsrs	r3, r3, #25
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	240d      	movs	r4, #13
 80077ca:	193b      	adds	r3, r7, r4
 80077cc:	2107      	movs	r1, #7
 80077ce:	400a      	ands	r2, r1
 80077d0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	0f5b      	lsrs	r3, r3, #29
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	250c      	movs	r5, #12
 80077de:	197b      	adds	r3, r7, r5
 80077e0:	2107      	movs	r1, #7
 80077e2:	400a      	ands	r2, r1
 80077e4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077e6:	183b      	adds	r3, r7, r0
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	197a      	adds	r2, r7, r5
 80077ec:	7812      	ldrb	r2, [r2, #0]
 80077ee:	4914      	ldr	r1, [pc, #80]	; (8007840 <UARTEx_SetNbDataToProcess+0xb4>)
 80077f0:	5c8a      	ldrb	r2, [r1, r2]
 80077f2:	435a      	muls	r2, r3
 80077f4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80077f6:	197b      	adds	r3, r7, r5
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	4a12      	ldr	r2, [pc, #72]	; (8007844 <UARTEx_SetNbDataToProcess+0xb8>)
 80077fc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077fe:	0019      	movs	r1, r3
 8007800:	f7f8 fd26 	bl	8000250 <__divsi3>
 8007804:	0003      	movs	r3, r0
 8007806:	b299      	uxth	r1, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	226a      	movs	r2, #106	; 0x6a
 800780c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800780e:	19bb      	adds	r3, r7, r6
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	193a      	adds	r2, r7, r4
 8007814:	7812      	ldrb	r2, [r2, #0]
 8007816:	490a      	ldr	r1, [pc, #40]	; (8007840 <UARTEx_SetNbDataToProcess+0xb4>)
 8007818:	5c8a      	ldrb	r2, [r1, r2]
 800781a:	435a      	muls	r2, r3
 800781c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800781e:	193b      	adds	r3, r7, r4
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	4a08      	ldr	r2, [pc, #32]	; (8007844 <UARTEx_SetNbDataToProcess+0xb8>)
 8007824:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007826:	0019      	movs	r1, r3
 8007828:	f7f8 fd12 	bl	8000250 <__divsi3>
 800782c:	0003      	movs	r3, r0
 800782e:	b299      	uxth	r1, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2268      	movs	r2, #104	; 0x68
 8007834:	5299      	strh	r1, [r3, r2]
}
 8007836:	46c0      	nop			; (mov r8, r8)
 8007838:	46bd      	mov	sp, r7
 800783a:	b005      	add	sp, #20
 800783c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800783e:	46c0      	nop			; (mov r8, r8)
 8007840:	0800aa14 	.word	0x0800aa14
 8007844:	0800aa1c 	.word	0x0800aa1c

08007848 <__errno>:
 8007848:	4b01      	ldr	r3, [pc, #4]	; (8007850 <__errno+0x8>)
 800784a:	6818      	ldr	r0, [r3, #0]
 800784c:	4770      	bx	lr
 800784e:	46c0      	nop			; (mov r8, r8)
 8007850:	20000010 	.word	0x20000010

08007854 <__libc_init_array>:
 8007854:	b570      	push	{r4, r5, r6, lr}
 8007856:	2600      	movs	r6, #0
 8007858:	4d0c      	ldr	r5, [pc, #48]	; (800788c <__libc_init_array+0x38>)
 800785a:	4c0d      	ldr	r4, [pc, #52]	; (8007890 <__libc_init_array+0x3c>)
 800785c:	1b64      	subs	r4, r4, r5
 800785e:	10a4      	asrs	r4, r4, #2
 8007860:	42a6      	cmp	r6, r4
 8007862:	d109      	bne.n	8007878 <__libc_init_array+0x24>
 8007864:	2600      	movs	r6, #0
 8007866:	f002 ffbb 	bl	800a7e0 <_init>
 800786a:	4d0a      	ldr	r5, [pc, #40]	; (8007894 <__libc_init_array+0x40>)
 800786c:	4c0a      	ldr	r4, [pc, #40]	; (8007898 <__libc_init_array+0x44>)
 800786e:	1b64      	subs	r4, r4, r5
 8007870:	10a4      	asrs	r4, r4, #2
 8007872:	42a6      	cmp	r6, r4
 8007874:	d105      	bne.n	8007882 <__libc_init_array+0x2e>
 8007876:	bd70      	pop	{r4, r5, r6, pc}
 8007878:	00b3      	lsls	r3, r6, #2
 800787a:	58eb      	ldr	r3, [r5, r3]
 800787c:	4798      	blx	r3
 800787e:	3601      	adds	r6, #1
 8007880:	e7ee      	b.n	8007860 <__libc_init_array+0xc>
 8007882:	00b3      	lsls	r3, r6, #2
 8007884:	58eb      	ldr	r3, [r5, r3]
 8007886:	4798      	blx	r3
 8007888:	3601      	adds	r6, #1
 800788a:	e7f2      	b.n	8007872 <__libc_init_array+0x1e>
 800788c:	0800ae04 	.word	0x0800ae04
 8007890:	0800ae04 	.word	0x0800ae04
 8007894:	0800ae04 	.word	0x0800ae04
 8007898:	0800ae08 	.word	0x0800ae08

0800789c <memset>:
 800789c:	0003      	movs	r3, r0
 800789e:	1882      	adds	r2, r0, r2
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d100      	bne.n	80078a6 <memset+0xa>
 80078a4:	4770      	bx	lr
 80078a6:	7019      	strb	r1, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	e7f9      	b.n	80078a0 <memset+0x4>

080078ac <__cvt>:
 80078ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078ae:	001e      	movs	r6, r3
 80078b0:	2300      	movs	r3, #0
 80078b2:	0014      	movs	r4, r2
 80078b4:	b08b      	sub	sp, #44	; 0x2c
 80078b6:	429e      	cmp	r6, r3
 80078b8:	da04      	bge.n	80078c4 <__cvt+0x18>
 80078ba:	2180      	movs	r1, #128	; 0x80
 80078bc:	0609      	lsls	r1, r1, #24
 80078be:	1873      	adds	r3, r6, r1
 80078c0:	001e      	movs	r6, r3
 80078c2:	232d      	movs	r3, #45	; 0x2d
 80078c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078c6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80078c8:	7013      	strb	r3, [r2, #0]
 80078ca:	2320      	movs	r3, #32
 80078cc:	2203      	movs	r2, #3
 80078ce:	439f      	bics	r7, r3
 80078d0:	2f46      	cmp	r7, #70	; 0x46
 80078d2:	d007      	beq.n	80078e4 <__cvt+0x38>
 80078d4:	003b      	movs	r3, r7
 80078d6:	3b45      	subs	r3, #69	; 0x45
 80078d8:	4259      	negs	r1, r3
 80078da:	414b      	adcs	r3, r1
 80078dc:	9910      	ldr	r1, [sp, #64]	; 0x40
 80078de:	3a01      	subs	r2, #1
 80078e0:	18cb      	adds	r3, r1, r3
 80078e2:	9310      	str	r3, [sp, #64]	; 0x40
 80078e4:	ab09      	add	r3, sp, #36	; 0x24
 80078e6:	9304      	str	r3, [sp, #16]
 80078e8:	ab08      	add	r3, sp, #32
 80078ea:	9303      	str	r3, [sp, #12]
 80078ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078ee:	9200      	str	r2, [sp, #0]
 80078f0:	9302      	str	r3, [sp, #8]
 80078f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078f4:	0022      	movs	r2, r4
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	0033      	movs	r3, r6
 80078fa:	f000 fcf1 	bl	80082e0 <_dtoa_r>
 80078fe:	0005      	movs	r5, r0
 8007900:	2f47      	cmp	r7, #71	; 0x47
 8007902:	d102      	bne.n	800790a <__cvt+0x5e>
 8007904:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007906:	07db      	lsls	r3, r3, #31
 8007908:	d528      	bpl.n	800795c <__cvt+0xb0>
 800790a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800790c:	18eb      	adds	r3, r5, r3
 800790e:	9307      	str	r3, [sp, #28]
 8007910:	2f46      	cmp	r7, #70	; 0x46
 8007912:	d114      	bne.n	800793e <__cvt+0x92>
 8007914:	782b      	ldrb	r3, [r5, #0]
 8007916:	2b30      	cmp	r3, #48	; 0x30
 8007918:	d10c      	bne.n	8007934 <__cvt+0x88>
 800791a:	2200      	movs	r2, #0
 800791c:	2300      	movs	r3, #0
 800791e:	0020      	movs	r0, r4
 8007920:	0031      	movs	r1, r6
 8007922:	f7f8 fd91 	bl	8000448 <__aeabi_dcmpeq>
 8007926:	2800      	cmp	r0, #0
 8007928:	d104      	bne.n	8007934 <__cvt+0x88>
 800792a:	2301      	movs	r3, #1
 800792c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800792e:	1a9b      	subs	r3, r3, r2
 8007930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007936:	9a07      	ldr	r2, [sp, #28]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	18d3      	adds	r3, r2, r3
 800793c:	9307      	str	r3, [sp, #28]
 800793e:	2200      	movs	r2, #0
 8007940:	2300      	movs	r3, #0
 8007942:	0020      	movs	r0, r4
 8007944:	0031      	movs	r1, r6
 8007946:	f7f8 fd7f 	bl	8000448 <__aeabi_dcmpeq>
 800794a:	2800      	cmp	r0, #0
 800794c:	d001      	beq.n	8007952 <__cvt+0xa6>
 800794e:	9b07      	ldr	r3, [sp, #28]
 8007950:	9309      	str	r3, [sp, #36]	; 0x24
 8007952:	2230      	movs	r2, #48	; 0x30
 8007954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007956:	9907      	ldr	r1, [sp, #28]
 8007958:	428b      	cmp	r3, r1
 800795a:	d306      	bcc.n	800796a <__cvt+0xbe>
 800795c:	0028      	movs	r0, r5
 800795e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007960:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007962:	1b5b      	subs	r3, r3, r5
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	b00b      	add	sp, #44	; 0x2c
 8007968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800796a:	1c59      	adds	r1, r3, #1
 800796c:	9109      	str	r1, [sp, #36]	; 0x24
 800796e:	701a      	strb	r2, [r3, #0]
 8007970:	e7f0      	b.n	8007954 <__cvt+0xa8>

08007972 <__exponent>:
 8007972:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007974:	1c83      	adds	r3, r0, #2
 8007976:	b087      	sub	sp, #28
 8007978:	9303      	str	r3, [sp, #12]
 800797a:	0005      	movs	r5, r0
 800797c:	000c      	movs	r4, r1
 800797e:	232b      	movs	r3, #43	; 0x2b
 8007980:	7002      	strb	r2, [r0, #0]
 8007982:	2900      	cmp	r1, #0
 8007984:	da01      	bge.n	800798a <__exponent+0x18>
 8007986:	424c      	negs	r4, r1
 8007988:	3302      	adds	r3, #2
 800798a:	706b      	strb	r3, [r5, #1]
 800798c:	2c09      	cmp	r4, #9
 800798e:	dd31      	ble.n	80079f4 <__exponent+0x82>
 8007990:	270a      	movs	r7, #10
 8007992:	ab04      	add	r3, sp, #16
 8007994:	1dde      	adds	r6, r3, #7
 8007996:	0020      	movs	r0, r4
 8007998:	0039      	movs	r1, r7
 800799a:	9601      	str	r6, [sp, #4]
 800799c:	f7f8 fd3e 	bl	800041c <__aeabi_idivmod>
 80079a0:	3e01      	subs	r6, #1
 80079a2:	3130      	adds	r1, #48	; 0x30
 80079a4:	0020      	movs	r0, r4
 80079a6:	7031      	strb	r1, [r6, #0]
 80079a8:	0039      	movs	r1, r7
 80079aa:	9402      	str	r4, [sp, #8]
 80079ac:	f7f8 fc50 	bl	8000250 <__divsi3>
 80079b0:	9b02      	ldr	r3, [sp, #8]
 80079b2:	0004      	movs	r4, r0
 80079b4:	2b63      	cmp	r3, #99	; 0x63
 80079b6:	dcee      	bgt.n	8007996 <__exponent+0x24>
 80079b8:	9b01      	ldr	r3, [sp, #4]
 80079ba:	3430      	adds	r4, #48	; 0x30
 80079bc:	1e9a      	subs	r2, r3, #2
 80079be:	0013      	movs	r3, r2
 80079c0:	9903      	ldr	r1, [sp, #12]
 80079c2:	7014      	strb	r4, [r2, #0]
 80079c4:	a804      	add	r0, sp, #16
 80079c6:	3007      	adds	r0, #7
 80079c8:	4298      	cmp	r0, r3
 80079ca:	d80e      	bhi.n	80079ea <__exponent+0x78>
 80079cc:	ab04      	add	r3, sp, #16
 80079ce:	3307      	adds	r3, #7
 80079d0:	2000      	movs	r0, #0
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d804      	bhi.n	80079e0 <__exponent+0x6e>
 80079d6:	ab04      	add	r3, sp, #16
 80079d8:	3009      	adds	r0, #9
 80079da:	18c0      	adds	r0, r0, r3
 80079dc:	9b01      	ldr	r3, [sp, #4]
 80079de:	1ac0      	subs	r0, r0, r3
 80079e0:	9b03      	ldr	r3, [sp, #12]
 80079e2:	1818      	adds	r0, r3, r0
 80079e4:	1b40      	subs	r0, r0, r5
 80079e6:	b007      	add	sp, #28
 80079e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ea:	7818      	ldrb	r0, [r3, #0]
 80079ec:	3301      	adds	r3, #1
 80079ee:	7008      	strb	r0, [r1, #0]
 80079f0:	3101      	adds	r1, #1
 80079f2:	e7e7      	b.n	80079c4 <__exponent+0x52>
 80079f4:	2330      	movs	r3, #48	; 0x30
 80079f6:	18e4      	adds	r4, r4, r3
 80079f8:	70ab      	strb	r3, [r5, #2]
 80079fa:	1d28      	adds	r0, r5, #4
 80079fc:	70ec      	strb	r4, [r5, #3]
 80079fe:	e7f1      	b.n	80079e4 <__exponent+0x72>

08007a00 <_printf_float>:
 8007a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a02:	b095      	sub	sp, #84	; 0x54
 8007a04:	000c      	movs	r4, r1
 8007a06:	9209      	str	r2, [sp, #36]	; 0x24
 8007a08:	001e      	movs	r6, r3
 8007a0a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8007a0c:	0007      	movs	r7, r0
 8007a0e:	f001 fa81 	bl	8008f14 <_localeconv_r>
 8007a12:	6803      	ldr	r3, [r0, #0]
 8007a14:	0018      	movs	r0, r3
 8007a16:	930c      	str	r3, [sp, #48]	; 0x30
 8007a18:	f7f8 fb74 	bl	8000104 <strlen>
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	9312      	str	r3, [sp, #72]	; 0x48
 8007a20:	7e23      	ldrb	r3, [r4, #24]
 8007a22:	2207      	movs	r2, #7
 8007a24:	930a      	str	r3, [sp, #40]	; 0x28
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	900e      	str	r0, [sp, #56]	; 0x38
 8007a2a:	930d      	str	r3, [sp, #52]	; 0x34
 8007a2c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007a2e:	682b      	ldr	r3, [r5, #0]
 8007a30:	05c9      	lsls	r1, r1, #23
 8007a32:	d547      	bpl.n	8007ac4 <_printf_float+0xc4>
 8007a34:	189b      	adds	r3, r3, r2
 8007a36:	4393      	bics	r3, r2
 8007a38:	001a      	movs	r2, r3
 8007a3a:	3208      	adds	r2, #8
 8007a3c:	602a      	str	r2, [r5, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	64a2      	str	r2, [r4, #72]	; 0x48
 8007a44:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007a46:	2201      	movs	r2, #1
 8007a48:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8007a4a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8007a4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a4e:	006b      	lsls	r3, r5, #1
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a54:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a56:	4ba7      	ldr	r3, [pc, #668]	; (8007cf4 <_printf_float+0x2f4>)
 8007a58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a5a:	4252      	negs	r2, r2
 8007a5c:	f7fa fb4a 	bl	80020f4 <__aeabi_dcmpun>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d131      	bne.n	8007ac8 <_printf_float+0xc8>
 8007a64:	2201      	movs	r2, #1
 8007a66:	4ba3      	ldr	r3, [pc, #652]	; (8007cf4 <_printf_float+0x2f4>)
 8007a68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007a6c:	4252      	negs	r2, r2
 8007a6e:	f7f8 fcfb 	bl	8000468 <__aeabi_dcmple>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	d128      	bne.n	8007ac8 <_printf_float+0xc8>
 8007a76:	2200      	movs	r2, #0
 8007a78:	2300      	movs	r3, #0
 8007a7a:	0029      	movs	r1, r5
 8007a7c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007a7e:	f7f8 fce9 	bl	8000454 <__aeabi_dcmplt>
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d003      	beq.n	8007a8e <_printf_float+0x8e>
 8007a86:	0023      	movs	r3, r4
 8007a88:	222d      	movs	r2, #45	; 0x2d
 8007a8a:	3343      	adds	r3, #67	; 0x43
 8007a8c:	701a      	strb	r2, [r3, #0]
 8007a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a90:	4d99      	ldr	r5, [pc, #612]	; (8007cf8 <_printf_float+0x2f8>)
 8007a92:	2b47      	cmp	r3, #71	; 0x47
 8007a94:	d900      	bls.n	8007a98 <_printf_float+0x98>
 8007a96:	4d99      	ldr	r5, [pc, #612]	; (8007cfc <_printf_float+0x2fc>)
 8007a98:	2303      	movs	r3, #3
 8007a9a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a9c:	6123      	str	r3, [r4, #16]
 8007a9e:	3301      	adds	r3, #1
 8007aa0:	439a      	bics	r2, r3
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	6022      	str	r2, [r4, #0]
 8007aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aaa:	0021      	movs	r1, r4
 8007aac:	0038      	movs	r0, r7
 8007aae:	9600      	str	r6, [sp, #0]
 8007ab0:	aa13      	add	r2, sp, #76	; 0x4c
 8007ab2:	f000 f9e7 	bl	8007e84 <_printf_common>
 8007ab6:	1c43      	adds	r3, r0, #1
 8007ab8:	d000      	beq.n	8007abc <_printf_float+0xbc>
 8007aba:	e0a2      	b.n	8007c02 <_printf_float+0x202>
 8007abc:	2001      	movs	r0, #1
 8007abe:	4240      	negs	r0, r0
 8007ac0:	b015      	add	sp, #84	; 0x54
 8007ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ac4:	3307      	adds	r3, #7
 8007ac6:	e7b6      	b.n	8007a36 <_printf_float+0x36>
 8007ac8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007aca:	002b      	movs	r3, r5
 8007acc:	0010      	movs	r0, r2
 8007ace:	0029      	movs	r1, r5
 8007ad0:	f7fa fb10 	bl	80020f4 <__aeabi_dcmpun>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d00b      	beq.n	8007af0 <_printf_float+0xf0>
 8007ad8:	2d00      	cmp	r5, #0
 8007ada:	da03      	bge.n	8007ae4 <_printf_float+0xe4>
 8007adc:	0023      	movs	r3, r4
 8007ade:	222d      	movs	r2, #45	; 0x2d
 8007ae0:	3343      	adds	r3, #67	; 0x43
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ae6:	4d86      	ldr	r5, [pc, #536]	; (8007d00 <_printf_float+0x300>)
 8007ae8:	2b47      	cmp	r3, #71	; 0x47
 8007aea:	d9d5      	bls.n	8007a98 <_printf_float+0x98>
 8007aec:	4d85      	ldr	r5, [pc, #532]	; (8007d04 <_printf_float+0x304>)
 8007aee:	e7d3      	b.n	8007a98 <_printf_float+0x98>
 8007af0:	2220      	movs	r2, #32
 8007af2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007af4:	6863      	ldr	r3, [r4, #4]
 8007af6:	4391      	bics	r1, r2
 8007af8:	910f      	str	r1, [sp, #60]	; 0x3c
 8007afa:	1c5a      	adds	r2, r3, #1
 8007afc:	d149      	bne.n	8007b92 <_printf_float+0x192>
 8007afe:	3307      	adds	r3, #7
 8007b00:	6063      	str	r3, [r4, #4]
 8007b02:	2380      	movs	r3, #128	; 0x80
 8007b04:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	9206      	str	r2, [sp, #24]
 8007b0e:	aa12      	add	r2, sp, #72	; 0x48
 8007b10:	9205      	str	r2, [sp, #20]
 8007b12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b14:	a908      	add	r1, sp, #32
 8007b16:	9204      	str	r2, [sp, #16]
 8007b18:	aa11      	add	r2, sp, #68	; 0x44
 8007b1a:	9203      	str	r2, [sp, #12]
 8007b1c:	2223      	movs	r2, #35	; 0x23
 8007b1e:	6023      	str	r3, [r4, #0]
 8007b20:	9301      	str	r3, [sp, #4]
 8007b22:	6863      	ldr	r3, [r4, #4]
 8007b24:	1852      	adds	r2, r2, r1
 8007b26:	9202      	str	r2, [sp, #8]
 8007b28:	9300      	str	r3, [sp, #0]
 8007b2a:	0038      	movs	r0, r7
 8007b2c:	002b      	movs	r3, r5
 8007b2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007b30:	f7ff febc 	bl	80078ac <__cvt>
 8007b34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b36:	0005      	movs	r5, r0
 8007b38:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007b3a:	2b47      	cmp	r3, #71	; 0x47
 8007b3c:	d108      	bne.n	8007b50 <_printf_float+0x150>
 8007b3e:	1ccb      	adds	r3, r1, #3
 8007b40:	db02      	blt.n	8007b48 <_printf_float+0x148>
 8007b42:	6863      	ldr	r3, [r4, #4]
 8007b44:	4299      	cmp	r1, r3
 8007b46:	dd48      	ble.n	8007bda <_printf_float+0x1da>
 8007b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b4a:	3b02      	subs	r3, #2
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8007b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b52:	2b65      	cmp	r3, #101	; 0x65
 8007b54:	d824      	bhi.n	8007ba0 <_printf_float+0x1a0>
 8007b56:	0020      	movs	r0, r4
 8007b58:	001a      	movs	r2, r3
 8007b5a:	3901      	subs	r1, #1
 8007b5c:	3050      	adds	r0, #80	; 0x50
 8007b5e:	9111      	str	r1, [sp, #68]	; 0x44
 8007b60:	f7ff ff07 	bl	8007972 <__exponent>
 8007b64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007b66:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b68:	1813      	adds	r3, r2, r0
 8007b6a:	6123      	str	r3, [r4, #16]
 8007b6c:	2a01      	cmp	r2, #1
 8007b6e:	dc02      	bgt.n	8007b76 <_printf_float+0x176>
 8007b70:	6822      	ldr	r2, [r4, #0]
 8007b72:	07d2      	lsls	r2, r2, #31
 8007b74:	d501      	bpl.n	8007b7a <_printf_float+0x17a>
 8007b76:	3301      	adds	r3, #1
 8007b78:	6123      	str	r3, [r4, #16]
 8007b7a:	2323      	movs	r3, #35	; 0x23
 8007b7c:	aa08      	add	r2, sp, #32
 8007b7e:	189b      	adds	r3, r3, r2
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d100      	bne.n	8007b88 <_printf_float+0x188>
 8007b86:	e78f      	b.n	8007aa8 <_printf_float+0xa8>
 8007b88:	0023      	movs	r3, r4
 8007b8a:	222d      	movs	r2, #45	; 0x2d
 8007b8c:	3343      	adds	r3, #67	; 0x43
 8007b8e:	701a      	strb	r2, [r3, #0]
 8007b90:	e78a      	b.n	8007aa8 <_printf_float+0xa8>
 8007b92:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b94:	2a47      	cmp	r2, #71	; 0x47
 8007b96:	d1b4      	bne.n	8007b02 <_printf_float+0x102>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1b2      	bne.n	8007b02 <_printf_float+0x102>
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	e7af      	b.n	8007b00 <_printf_float+0x100>
 8007ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ba2:	2b66      	cmp	r3, #102	; 0x66
 8007ba4:	d11b      	bne.n	8007bde <_printf_float+0x1de>
 8007ba6:	6863      	ldr	r3, [r4, #4]
 8007ba8:	2900      	cmp	r1, #0
 8007baa:	dd0d      	ble.n	8007bc8 <_printf_float+0x1c8>
 8007bac:	6121      	str	r1, [r4, #16]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d102      	bne.n	8007bb8 <_printf_float+0x1b8>
 8007bb2:	6822      	ldr	r2, [r4, #0]
 8007bb4:	07d2      	lsls	r2, r2, #31
 8007bb6:	d502      	bpl.n	8007bbe <_printf_float+0x1be>
 8007bb8:	3301      	adds	r3, #1
 8007bba:	1859      	adds	r1, r3, r1
 8007bbc:	6121      	str	r1, [r4, #16]
 8007bbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007bc0:	65a3      	str	r3, [r4, #88]	; 0x58
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bc6:	e7d8      	b.n	8007b7a <_printf_float+0x17a>
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d103      	bne.n	8007bd4 <_printf_float+0x1d4>
 8007bcc:	2201      	movs	r2, #1
 8007bce:	6821      	ldr	r1, [r4, #0]
 8007bd0:	4211      	tst	r1, r2
 8007bd2:	d000      	beq.n	8007bd6 <_printf_float+0x1d6>
 8007bd4:	1c9a      	adds	r2, r3, #2
 8007bd6:	6122      	str	r2, [r4, #16]
 8007bd8:	e7f1      	b.n	8007bbe <_printf_float+0x1be>
 8007bda:	2367      	movs	r3, #103	; 0x67
 8007bdc:	930a      	str	r3, [sp, #40]	; 0x28
 8007bde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007be0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007be2:	4293      	cmp	r3, r2
 8007be4:	db06      	blt.n	8007bf4 <_printf_float+0x1f4>
 8007be6:	6822      	ldr	r2, [r4, #0]
 8007be8:	6123      	str	r3, [r4, #16]
 8007bea:	07d2      	lsls	r2, r2, #31
 8007bec:	d5e7      	bpl.n	8007bbe <_printf_float+0x1be>
 8007bee:	3301      	adds	r3, #1
 8007bf0:	6123      	str	r3, [r4, #16]
 8007bf2:	e7e4      	b.n	8007bbe <_printf_float+0x1be>
 8007bf4:	2101      	movs	r1, #1
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	dc01      	bgt.n	8007bfe <_printf_float+0x1fe>
 8007bfa:	1849      	adds	r1, r1, r1
 8007bfc:	1ac9      	subs	r1, r1, r3
 8007bfe:	1852      	adds	r2, r2, r1
 8007c00:	e7e9      	b.n	8007bd6 <_printf_float+0x1d6>
 8007c02:	6822      	ldr	r2, [r4, #0]
 8007c04:	0553      	lsls	r3, r2, #21
 8007c06:	d407      	bmi.n	8007c18 <_printf_float+0x218>
 8007c08:	6923      	ldr	r3, [r4, #16]
 8007c0a:	002a      	movs	r2, r5
 8007c0c:	0038      	movs	r0, r7
 8007c0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c10:	47b0      	blx	r6
 8007c12:	1c43      	adds	r3, r0, #1
 8007c14:	d128      	bne.n	8007c68 <_printf_float+0x268>
 8007c16:	e751      	b.n	8007abc <_printf_float+0xbc>
 8007c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c1a:	2b65      	cmp	r3, #101	; 0x65
 8007c1c:	d800      	bhi.n	8007c20 <_printf_float+0x220>
 8007c1e:	e0e1      	b.n	8007de4 <_printf_float+0x3e4>
 8007c20:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007c22:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007c24:	2200      	movs	r2, #0
 8007c26:	2300      	movs	r3, #0
 8007c28:	f7f8 fc0e 	bl	8000448 <__aeabi_dcmpeq>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d031      	beq.n	8007c94 <_printf_float+0x294>
 8007c30:	2301      	movs	r3, #1
 8007c32:	0038      	movs	r0, r7
 8007c34:	4a34      	ldr	r2, [pc, #208]	; (8007d08 <_printf_float+0x308>)
 8007c36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c38:	47b0      	blx	r6
 8007c3a:	1c43      	adds	r3, r0, #1
 8007c3c:	d100      	bne.n	8007c40 <_printf_float+0x240>
 8007c3e:	e73d      	b.n	8007abc <_printf_float+0xbc>
 8007c40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c42:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c44:	4293      	cmp	r3, r2
 8007c46:	db02      	blt.n	8007c4e <_printf_float+0x24e>
 8007c48:	6823      	ldr	r3, [r4, #0]
 8007c4a:	07db      	lsls	r3, r3, #31
 8007c4c:	d50c      	bpl.n	8007c68 <_printf_float+0x268>
 8007c4e:	0038      	movs	r0, r7
 8007c50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c56:	47b0      	blx	r6
 8007c58:	2500      	movs	r5, #0
 8007c5a:	1c43      	adds	r3, r0, #1
 8007c5c:	d100      	bne.n	8007c60 <_printf_float+0x260>
 8007c5e:	e72d      	b.n	8007abc <_printf_float+0xbc>
 8007c60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c62:	3b01      	subs	r3, #1
 8007c64:	42ab      	cmp	r3, r5
 8007c66:	dc0a      	bgt.n	8007c7e <_printf_float+0x27e>
 8007c68:	6823      	ldr	r3, [r4, #0]
 8007c6a:	079b      	lsls	r3, r3, #30
 8007c6c:	d500      	bpl.n	8007c70 <_printf_float+0x270>
 8007c6e:	e106      	b.n	8007e7e <_printf_float+0x47e>
 8007c70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c72:	68e0      	ldr	r0, [r4, #12]
 8007c74:	4298      	cmp	r0, r3
 8007c76:	db00      	blt.n	8007c7a <_printf_float+0x27a>
 8007c78:	e722      	b.n	8007ac0 <_printf_float+0xc0>
 8007c7a:	0018      	movs	r0, r3
 8007c7c:	e720      	b.n	8007ac0 <_printf_float+0xc0>
 8007c7e:	0022      	movs	r2, r4
 8007c80:	2301      	movs	r3, #1
 8007c82:	0038      	movs	r0, r7
 8007c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c86:	321a      	adds	r2, #26
 8007c88:	47b0      	blx	r6
 8007c8a:	1c43      	adds	r3, r0, #1
 8007c8c:	d100      	bne.n	8007c90 <_printf_float+0x290>
 8007c8e:	e715      	b.n	8007abc <_printf_float+0xbc>
 8007c90:	3501      	adds	r5, #1
 8007c92:	e7e5      	b.n	8007c60 <_printf_float+0x260>
 8007c94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	dc38      	bgt.n	8007d0c <_printf_float+0x30c>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	0038      	movs	r0, r7
 8007c9e:	4a1a      	ldr	r2, [pc, #104]	; (8007d08 <_printf_float+0x308>)
 8007ca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ca2:	47b0      	blx	r6
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	d100      	bne.n	8007caa <_printf_float+0x2aa>
 8007ca8:	e708      	b.n	8007abc <_printf_float+0xbc>
 8007caa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	d102      	bne.n	8007cb8 <_printf_float+0x2b8>
 8007cb2:	6823      	ldr	r3, [r4, #0]
 8007cb4:	07db      	lsls	r3, r3, #31
 8007cb6:	d5d7      	bpl.n	8007c68 <_printf_float+0x268>
 8007cb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007cba:	0038      	movs	r0, r7
 8007cbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cc0:	47b0      	blx	r6
 8007cc2:	1c43      	adds	r3, r0, #1
 8007cc4:	d100      	bne.n	8007cc8 <_printf_float+0x2c8>
 8007cc6:	e6f9      	b.n	8007abc <_printf_float+0xbc>
 8007cc8:	2300      	movs	r3, #0
 8007cca:	930a      	str	r3, [sp, #40]	; 0x28
 8007ccc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007cce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cd0:	425b      	negs	r3, r3
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	dc01      	bgt.n	8007cda <_printf_float+0x2da>
 8007cd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007cd8:	e797      	b.n	8007c0a <_printf_float+0x20a>
 8007cda:	0022      	movs	r2, r4
 8007cdc:	2301      	movs	r3, #1
 8007cde:	0038      	movs	r0, r7
 8007ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ce2:	321a      	adds	r2, #26
 8007ce4:	47b0      	blx	r6
 8007ce6:	1c43      	adds	r3, r0, #1
 8007ce8:	d100      	bne.n	8007cec <_printf_float+0x2ec>
 8007cea:	e6e7      	b.n	8007abc <_printf_float+0xbc>
 8007cec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cee:	3301      	adds	r3, #1
 8007cf0:	e7eb      	b.n	8007cca <_printf_float+0x2ca>
 8007cf2:	46c0      	nop			; (mov r8, r8)
 8007cf4:	7fefffff 	.word	0x7fefffff
 8007cf8:	0800aa28 	.word	0x0800aa28
 8007cfc:	0800aa2c 	.word	0x0800aa2c
 8007d00:	0800aa30 	.word	0x0800aa30
 8007d04:	0800aa34 	.word	0x0800aa34
 8007d08:	0800aa38 	.word	0x0800aa38
 8007d0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d0e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d10:	920a      	str	r2, [sp, #40]	; 0x28
 8007d12:	429a      	cmp	r2, r3
 8007d14:	dd00      	ble.n	8007d18 <_printf_float+0x318>
 8007d16:	930a      	str	r3, [sp, #40]	; 0x28
 8007d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	dc3c      	bgt.n	8007d98 <_printf_float+0x398>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	930d      	str	r3, [sp, #52]	; 0x34
 8007d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d24:	43db      	mvns	r3, r3
 8007d26:	17db      	asrs	r3, r3, #31
 8007d28:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d32:	4013      	ands	r3, r2
 8007d34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	dc34      	bgt.n	8007da8 <_printf_float+0x3a8>
 8007d3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007d40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d42:	4293      	cmp	r3, r2
 8007d44:	db3d      	blt.n	8007dc2 <_printf_float+0x3c2>
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	07db      	lsls	r3, r3, #31
 8007d4a:	d43a      	bmi.n	8007dc2 <_printf_float+0x3c2>
 8007d4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007d4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d50:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	1a52      	subs	r2, r2, r1
 8007d56:	920a      	str	r2, [sp, #40]	; 0x28
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	dd00      	ble.n	8007d5e <_printf_float+0x35e>
 8007d5c:	930a      	str	r3, [sp, #40]	; 0x28
 8007d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	dc36      	bgt.n	8007dd2 <_printf_float+0x3d2>
 8007d64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d66:	2500      	movs	r5, #0
 8007d68:	43db      	mvns	r3, r3
 8007d6a:	17db      	asrs	r3, r3, #31
 8007d6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007d70:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007d74:	1a9b      	subs	r3, r3, r2
 8007d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d78:	400a      	ands	r2, r1
 8007d7a:	1a9b      	subs	r3, r3, r2
 8007d7c:	42ab      	cmp	r3, r5
 8007d7e:	dc00      	bgt.n	8007d82 <_printf_float+0x382>
 8007d80:	e772      	b.n	8007c68 <_printf_float+0x268>
 8007d82:	0022      	movs	r2, r4
 8007d84:	2301      	movs	r3, #1
 8007d86:	0038      	movs	r0, r7
 8007d88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d8a:	321a      	adds	r2, #26
 8007d8c:	47b0      	blx	r6
 8007d8e:	1c43      	adds	r3, r0, #1
 8007d90:	d100      	bne.n	8007d94 <_printf_float+0x394>
 8007d92:	e693      	b.n	8007abc <_printf_float+0xbc>
 8007d94:	3501      	adds	r5, #1
 8007d96:	e7ea      	b.n	8007d6e <_printf_float+0x36e>
 8007d98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d9a:	002a      	movs	r2, r5
 8007d9c:	0038      	movs	r0, r7
 8007d9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007da0:	47b0      	blx	r6
 8007da2:	1c43      	adds	r3, r0, #1
 8007da4:	d1bb      	bne.n	8007d1e <_printf_float+0x31e>
 8007da6:	e689      	b.n	8007abc <_printf_float+0xbc>
 8007da8:	0022      	movs	r2, r4
 8007daa:	2301      	movs	r3, #1
 8007dac:	0038      	movs	r0, r7
 8007dae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007db0:	321a      	adds	r2, #26
 8007db2:	47b0      	blx	r6
 8007db4:	1c43      	adds	r3, r0, #1
 8007db6:	d100      	bne.n	8007dba <_printf_float+0x3ba>
 8007db8:	e680      	b.n	8007abc <_printf_float+0xbc>
 8007dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	930d      	str	r3, [sp, #52]	; 0x34
 8007dc0:	e7b3      	b.n	8007d2a <_printf_float+0x32a>
 8007dc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dc4:	0038      	movs	r0, r7
 8007dc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007dc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dca:	47b0      	blx	r6
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	d1bd      	bne.n	8007d4c <_printf_float+0x34c>
 8007dd0:	e674      	b.n	8007abc <_printf_float+0xbc>
 8007dd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007dd4:	0038      	movs	r0, r7
 8007dd6:	18ea      	adds	r2, r5, r3
 8007dd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ddc:	47b0      	blx	r6
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d1c0      	bne.n	8007d64 <_printf_float+0x364>
 8007de2:	e66b      	b.n	8007abc <_printf_float+0xbc>
 8007de4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	dc02      	bgt.n	8007df0 <_printf_float+0x3f0>
 8007dea:	2301      	movs	r3, #1
 8007dec:	421a      	tst	r2, r3
 8007dee:	d034      	beq.n	8007e5a <_printf_float+0x45a>
 8007df0:	2301      	movs	r3, #1
 8007df2:	002a      	movs	r2, r5
 8007df4:	0038      	movs	r0, r7
 8007df6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007df8:	47b0      	blx	r6
 8007dfa:	1c43      	adds	r3, r0, #1
 8007dfc:	d100      	bne.n	8007e00 <_printf_float+0x400>
 8007dfe:	e65d      	b.n	8007abc <_printf_float+0xbc>
 8007e00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e02:	0038      	movs	r0, r7
 8007e04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007e06:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e08:	47b0      	blx	r6
 8007e0a:	1c43      	adds	r3, r0, #1
 8007e0c:	d100      	bne.n	8007e10 <_printf_float+0x410>
 8007e0e:	e655      	b.n	8007abc <_printf_float+0xbc>
 8007e10:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8007e12:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8007e14:	2200      	movs	r2, #0
 8007e16:	2300      	movs	r3, #0
 8007e18:	f7f8 fb16 	bl	8000448 <__aeabi_dcmpeq>
 8007e1c:	2800      	cmp	r0, #0
 8007e1e:	d11a      	bne.n	8007e56 <_printf_float+0x456>
 8007e20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e22:	1c6a      	adds	r2, r5, #1
 8007e24:	3b01      	subs	r3, #1
 8007e26:	0038      	movs	r0, r7
 8007e28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e2a:	47b0      	blx	r6
 8007e2c:	1c43      	adds	r3, r0, #1
 8007e2e:	d10e      	bne.n	8007e4e <_printf_float+0x44e>
 8007e30:	e644      	b.n	8007abc <_printf_float+0xbc>
 8007e32:	0022      	movs	r2, r4
 8007e34:	2301      	movs	r3, #1
 8007e36:	0038      	movs	r0, r7
 8007e38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e3a:	321a      	adds	r2, #26
 8007e3c:	47b0      	blx	r6
 8007e3e:	1c43      	adds	r3, r0, #1
 8007e40:	d100      	bne.n	8007e44 <_printf_float+0x444>
 8007e42:	e63b      	b.n	8007abc <_printf_float+0xbc>
 8007e44:	3501      	adds	r5, #1
 8007e46:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	42ab      	cmp	r3, r5
 8007e4c:	dcf1      	bgt.n	8007e32 <_printf_float+0x432>
 8007e4e:	0022      	movs	r2, r4
 8007e50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e52:	3250      	adds	r2, #80	; 0x50
 8007e54:	e6da      	b.n	8007c0c <_printf_float+0x20c>
 8007e56:	2500      	movs	r5, #0
 8007e58:	e7f5      	b.n	8007e46 <_printf_float+0x446>
 8007e5a:	002a      	movs	r2, r5
 8007e5c:	e7e3      	b.n	8007e26 <_printf_float+0x426>
 8007e5e:	0022      	movs	r2, r4
 8007e60:	2301      	movs	r3, #1
 8007e62:	0038      	movs	r0, r7
 8007e64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e66:	3219      	adds	r2, #25
 8007e68:	47b0      	blx	r6
 8007e6a:	1c43      	adds	r3, r0, #1
 8007e6c:	d100      	bne.n	8007e70 <_printf_float+0x470>
 8007e6e:	e625      	b.n	8007abc <_printf_float+0xbc>
 8007e70:	3501      	adds	r5, #1
 8007e72:	68e3      	ldr	r3, [r4, #12]
 8007e74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e76:	1a9b      	subs	r3, r3, r2
 8007e78:	42ab      	cmp	r3, r5
 8007e7a:	dcf0      	bgt.n	8007e5e <_printf_float+0x45e>
 8007e7c:	e6f8      	b.n	8007c70 <_printf_float+0x270>
 8007e7e:	2500      	movs	r5, #0
 8007e80:	e7f7      	b.n	8007e72 <_printf_float+0x472>
 8007e82:	46c0      	nop			; (mov r8, r8)

08007e84 <_printf_common>:
 8007e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007e86:	0015      	movs	r5, r2
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	688a      	ldr	r2, [r1, #8]
 8007e8c:	690b      	ldr	r3, [r1, #16]
 8007e8e:	000c      	movs	r4, r1
 8007e90:	9000      	str	r0, [sp, #0]
 8007e92:	4293      	cmp	r3, r2
 8007e94:	da00      	bge.n	8007e98 <_printf_common+0x14>
 8007e96:	0013      	movs	r3, r2
 8007e98:	0022      	movs	r2, r4
 8007e9a:	602b      	str	r3, [r5, #0]
 8007e9c:	3243      	adds	r2, #67	; 0x43
 8007e9e:	7812      	ldrb	r2, [r2, #0]
 8007ea0:	2a00      	cmp	r2, #0
 8007ea2:	d001      	beq.n	8007ea8 <_printf_common+0x24>
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	602b      	str	r3, [r5, #0]
 8007ea8:	6823      	ldr	r3, [r4, #0]
 8007eaa:	069b      	lsls	r3, r3, #26
 8007eac:	d502      	bpl.n	8007eb4 <_printf_common+0x30>
 8007eae:	682b      	ldr	r3, [r5, #0]
 8007eb0:	3302      	adds	r3, #2
 8007eb2:	602b      	str	r3, [r5, #0]
 8007eb4:	6822      	ldr	r2, [r4, #0]
 8007eb6:	2306      	movs	r3, #6
 8007eb8:	0017      	movs	r7, r2
 8007eba:	401f      	ands	r7, r3
 8007ebc:	421a      	tst	r2, r3
 8007ebe:	d027      	beq.n	8007f10 <_printf_common+0x8c>
 8007ec0:	0023      	movs	r3, r4
 8007ec2:	3343      	adds	r3, #67	; 0x43
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	1e5a      	subs	r2, r3, #1
 8007ec8:	4193      	sbcs	r3, r2
 8007eca:	6822      	ldr	r2, [r4, #0]
 8007ecc:	0692      	lsls	r2, r2, #26
 8007ece:	d430      	bmi.n	8007f32 <_printf_common+0xae>
 8007ed0:	0022      	movs	r2, r4
 8007ed2:	9901      	ldr	r1, [sp, #4]
 8007ed4:	9800      	ldr	r0, [sp, #0]
 8007ed6:	9e08      	ldr	r6, [sp, #32]
 8007ed8:	3243      	adds	r2, #67	; 0x43
 8007eda:	47b0      	blx	r6
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	d025      	beq.n	8007f2c <_printf_common+0xa8>
 8007ee0:	2306      	movs	r3, #6
 8007ee2:	6820      	ldr	r0, [r4, #0]
 8007ee4:	682a      	ldr	r2, [r5, #0]
 8007ee6:	68e1      	ldr	r1, [r4, #12]
 8007ee8:	2500      	movs	r5, #0
 8007eea:	4003      	ands	r3, r0
 8007eec:	2b04      	cmp	r3, #4
 8007eee:	d103      	bne.n	8007ef8 <_printf_common+0x74>
 8007ef0:	1a8d      	subs	r5, r1, r2
 8007ef2:	43eb      	mvns	r3, r5
 8007ef4:	17db      	asrs	r3, r3, #31
 8007ef6:	401d      	ands	r5, r3
 8007ef8:	68a3      	ldr	r3, [r4, #8]
 8007efa:	6922      	ldr	r2, [r4, #16]
 8007efc:	4293      	cmp	r3, r2
 8007efe:	dd01      	ble.n	8007f04 <_printf_common+0x80>
 8007f00:	1a9b      	subs	r3, r3, r2
 8007f02:	18ed      	adds	r5, r5, r3
 8007f04:	2700      	movs	r7, #0
 8007f06:	42bd      	cmp	r5, r7
 8007f08:	d120      	bne.n	8007f4c <_printf_common+0xc8>
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	e010      	b.n	8007f30 <_printf_common+0xac>
 8007f0e:	3701      	adds	r7, #1
 8007f10:	68e3      	ldr	r3, [r4, #12]
 8007f12:	682a      	ldr	r2, [r5, #0]
 8007f14:	1a9b      	subs	r3, r3, r2
 8007f16:	42bb      	cmp	r3, r7
 8007f18:	ddd2      	ble.n	8007ec0 <_printf_common+0x3c>
 8007f1a:	0022      	movs	r2, r4
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	9901      	ldr	r1, [sp, #4]
 8007f20:	9800      	ldr	r0, [sp, #0]
 8007f22:	9e08      	ldr	r6, [sp, #32]
 8007f24:	3219      	adds	r2, #25
 8007f26:	47b0      	blx	r6
 8007f28:	1c43      	adds	r3, r0, #1
 8007f2a:	d1f0      	bne.n	8007f0e <_printf_common+0x8a>
 8007f2c:	2001      	movs	r0, #1
 8007f2e:	4240      	negs	r0, r0
 8007f30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f32:	2030      	movs	r0, #48	; 0x30
 8007f34:	18e1      	adds	r1, r4, r3
 8007f36:	3143      	adds	r1, #67	; 0x43
 8007f38:	7008      	strb	r0, [r1, #0]
 8007f3a:	0021      	movs	r1, r4
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	3145      	adds	r1, #69	; 0x45
 8007f40:	7809      	ldrb	r1, [r1, #0]
 8007f42:	18a2      	adds	r2, r4, r2
 8007f44:	3243      	adds	r2, #67	; 0x43
 8007f46:	3302      	adds	r3, #2
 8007f48:	7011      	strb	r1, [r2, #0]
 8007f4a:	e7c1      	b.n	8007ed0 <_printf_common+0x4c>
 8007f4c:	0022      	movs	r2, r4
 8007f4e:	2301      	movs	r3, #1
 8007f50:	9901      	ldr	r1, [sp, #4]
 8007f52:	9800      	ldr	r0, [sp, #0]
 8007f54:	9e08      	ldr	r6, [sp, #32]
 8007f56:	321a      	adds	r2, #26
 8007f58:	47b0      	blx	r6
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d0e6      	beq.n	8007f2c <_printf_common+0xa8>
 8007f5e:	3701      	adds	r7, #1
 8007f60:	e7d1      	b.n	8007f06 <_printf_common+0x82>
	...

08007f64 <_printf_i>:
 8007f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f66:	b08b      	sub	sp, #44	; 0x2c
 8007f68:	9206      	str	r2, [sp, #24]
 8007f6a:	000a      	movs	r2, r1
 8007f6c:	3243      	adds	r2, #67	; 0x43
 8007f6e:	9307      	str	r3, [sp, #28]
 8007f70:	9005      	str	r0, [sp, #20]
 8007f72:	9204      	str	r2, [sp, #16]
 8007f74:	7e0a      	ldrb	r2, [r1, #24]
 8007f76:	000c      	movs	r4, r1
 8007f78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f7a:	2a78      	cmp	r2, #120	; 0x78
 8007f7c:	d807      	bhi.n	8007f8e <_printf_i+0x2a>
 8007f7e:	2a62      	cmp	r2, #98	; 0x62
 8007f80:	d809      	bhi.n	8007f96 <_printf_i+0x32>
 8007f82:	2a00      	cmp	r2, #0
 8007f84:	d100      	bne.n	8007f88 <_printf_i+0x24>
 8007f86:	e0c1      	b.n	800810c <_printf_i+0x1a8>
 8007f88:	2a58      	cmp	r2, #88	; 0x58
 8007f8a:	d100      	bne.n	8007f8e <_printf_i+0x2a>
 8007f8c:	e08c      	b.n	80080a8 <_printf_i+0x144>
 8007f8e:	0026      	movs	r6, r4
 8007f90:	3642      	adds	r6, #66	; 0x42
 8007f92:	7032      	strb	r2, [r6, #0]
 8007f94:	e022      	b.n	8007fdc <_printf_i+0x78>
 8007f96:	0010      	movs	r0, r2
 8007f98:	3863      	subs	r0, #99	; 0x63
 8007f9a:	2815      	cmp	r0, #21
 8007f9c:	d8f7      	bhi.n	8007f8e <_printf_i+0x2a>
 8007f9e:	f7f8 f8c3 	bl	8000128 <__gnu_thumb1_case_shi>
 8007fa2:	0016      	.short	0x0016
 8007fa4:	fff6001f 	.word	0xfff6001f
 8007fa8:	fff6fff6 	.word	0xfff6fff6
 8007fac:	001ffff6 	.word	0x001ffff6
 8007fb0:	fff6fff6 	.word	0xfff6fff6
 8007fb4:	fff6fff6 	.word	0xfff6fff6
 8007fb8:	003600a8 	.word	0x003600a8
 8007fbc:	fff6009a 	.word	0xfff6009a
 8007fc0:	00b9fff6 	.word	0x00b9fff6
 8007fc4:	0036fff6 	.word	0x0036fff6
 8007fc8:	fff6fff6 	.word	0xfff6fff6
 8007fcc:	009e      	.short	0x009e
 8007fce:	0026      	movs	r6, r4
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	3642      	adds	r6, #66	; 0x42
 8007fd4:	1d11      	adds	r1, r2, #4
 8007fd6:	6019      	str	r1, [r3, #0]
 8007fd8:	6813      	ldr	r3, [r2, #0]
 8007fda:	7033      	strb	r3, [r6, #0]
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e0a7      	b.n	8008130 <_printf_i+0x1cc>
 8007fe0:	6808      	ldr	r0, [r1, #0]
 8007fe2:	6819      	ldr	r1, [r3, #0]
 8007fe4:	1d0a      	adds	r2, r1, #4
 8007fe6:	0605      	lsls	r5, r0, #24
 8007fe8:	d50b      	bpl.n	8008002 <_printf_i+0x9e>
 8007fea:	680d      	ldr	r5, [r1, #0]
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	2d00      	cmp	r5, #0
 8007ff0:	da03      	bge.n	8007ffa <_printf_i+0x96>
 8007ff2:	232d      	movs	r3, #45	; 0x2d
 8007ff4:	9a04      	ldr	r2, [sp, #16]
 8007ff6:	426d      	negs	r5, r5
 8007ff8:	7013      	strb	r3, [r2, #0]
 8007ffa:	4b61      	ldr	r3, [pc, #388]	; (8008180 <_printf_i+0x21c>)
 8007ffc:	270a      	movs	r7, #10
 8007ffe:	9303      	str	r3, [sp, #12]
 8008000:	e01b      	b.n	800803a <_printf_i+0xd6>
 8008002:	680d      	ldr	r5, [r1, #0]
 8008004:	601a      	str	r2, [r3, #0]
 8008006:	0641      	lsls	r1, r0, #25
 8008008:	d5f1      	bpl.n	8007fee <_printf_i+0x8a>
 800800a:	b22d      	sxth	r5, r5
 800800c:	e7ef      	b.n	8007fee <_printf_i+0x8a>
 800800e:	680d      	ldr	r5, [r1, #0]
 8008010:	6819      	ldr	r1, [r3, #0]
 8008012:	1d08      	adds	r0, r1, #4
 8008014:	6018      	str	r0, [r3, #0]
 8008016:	062e      	lsls	r6, r5, #24
 8008018:	d501      	bpl.n	800801e <_printf_i+0xba>
 800801a:	680d      	ldr	r5, [r1, #0]
 800801c:	e003      	b.n	8008026 <_printf_i+0xc2>
 800801e:	066d      	lsls	r5, r5, #25
 8008020:	d5fb      	bpl.n	800801a <_printf_i+0xb6>
 8008022:	680d      	ldr	r5, [r1, #0]
 8008024:	b2ad      	uxth	r5, r5
 8008026:	4b56      	ldr	r3, [pc, #344]	; (8008180 <_printf_i+0x21c>)
 8008028:	2708      	movs	r7, #8
 800802a:	9303      	str	r3, [sp, #12]
 800802c:	2a6f      	cmp	r2, #111	; 0x6f
 800802e:	d000      	beq.n	8008032 <_printf_i+0xce>
 8008030:	3702      	adds	r7, #2
 8008032:	0023      	movs	r3, r4
 8008034:	2200      	movs	r2, #0
 8008036:	3343      	adds	r3, #67	; 0x43
 8008038:	701a      	strb	r2, [r3, #0]
 800803a:	6863      	ldr	r3, [r4, #4]
 800803c:	60a3      	str	r3, [r4, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	db03      	blt.n	800804a <_printf_i+0xe6>
 8008042:	2204      	movs	r2, #4
 8008044:	6821      	ldr	r1, [r4, #0]
 8008046:	4391      	bics	r1, r2
 8008048:	6021      	str	r1, [r4, #0]
 800804a:	2d00      	cmp	r5, #0
 800804c:	d102      	bne.n	8008054 <_printf_i+0xf0>
 800804e:	9e04      	ldr	r6, [sp, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d00c      	beq.n	800806e <_printf_i+0x10a>
 8008054:	9e04      	ldr	r6, [sp, #16]
 8008056:	0028      	movs	r0, r5
 8008058:	0039      	movs	r1, r7
 800805a:	f7f8 f8f5 	bl	8000248 <__aeabi_uidivmod>
 800805e:	9b03      	ldr	r3, [sp, #12]
 8008060:	3e01      	subs	r6, #1
 8008062:	5c5b      	ldrb	r3, [r3, r1]
 8008064:	7033      	strb	r3, [r6, #0]
 8008066:	002b      	movs	r3, r5
 8008068:	0005      	movs	r5, r0
 800806a:	429f      	cmp	r7, r3
 800806c:	d9f3      	bls.n	8008056 <_printf_i+0xf2>
 800806e:	2f08      	cmp	r7, #8
 8008070:	d109      	bne.n	8008086 <_printf_i+0x122>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	07db      	lsls	r3, r3, #31
 8008076:	d506      	bpl.n	8008086 <_printf_i+0x122>
 8008078:	6863      	ldr	r3, [r4, #4]
 800807a:	6922      	ldr	r2, [r4, #16]
 800807c:	4293      	cmp	r3, r2
 800807e:	dc02      	bgt.n	8008086 <_printf_i+0x122>
 8008080:	2330      	movs	r3, #48	; 0x30
 8008082:	3e01      	subs	r6, #1
 8008084:	7033      	strb	r3, [r6, #0]
 8008086:	9b04      	ldr	r3, [sp, #16]
 8008088:	1b9b      	subs	r3, r3, r6
 800808a:	6123      	str	r3, [r4, #16]
 800808c:	9b07      	ldr	r3, [sp, #28]
 800808e:	0021      	movs	r1, r4
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	9805      	ldr	r0, [sp, #20]
 8008094:	9b06      	ldr	r3, [sp, #24]
 8008096:	aa09      	add	r2, sp, #36	; 0x24
 8008098:	f7ff fef4 	bl	8007e84 <_printf_common>
 800809c:	1c43      	adds	r3, r0, #1
 800809e:	d14c      	bne.n	800813a <_printf_i+0x1d6>
 80080a0:	2001      	movs	r0, #1
 80080a2:	4240      	negs	r0, r0
 80080a4:	b00b      	add	sp, #44	; 0x2c
 80080a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080a8:	3145      	adds	r1, #69	; 0x45
 80080aa:	700a      	strb	r2, [r1, #0]
 80080ac:	4a34      	ldr	r2, [pc, #208]	; (8008180 <_printf_i+0x21c>)
 80080ae:	9203      	str	r2, [sp, #12]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	6821      	ldr	r1, [r4, #0]
 80080b4:	ca20      	ldmia	r2!, {r5}
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	0608      	lsls	r0, r1, #24
 80080ba:	d516      	bpl.n	80080ea <_printf_i+0x186>
 80080bc:	07cb      	lsls	r3, r1, #31
 80080be:	d502      	bpl.n	80080c6 <_printf_i+0x162>
 80080c0:	2320      	movs	r3, #32
 80080c2:	4319      	orrs	r1, r3
 80080c4:	6021      	str	r1, [r4, #0]
 80080c6:	2710      	movs	r7, #16
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	d1b2      	bne.n	8008032 <_printf_i+0xce>
 80080cc:	2320      	movs	r3, #32
 80080ce:	6822      	ldr	r2, [r4, #0]
 80080d0:	439a      	bics	r2, r3
 80080d2:	6022      	str	r2, [r4, #0]
 80080d4:	e7ad      	b.n	8008032 <_printf_i+0xce>
 80080d6:	2220      	movs	r2, #32
 80080d8:	6809      	ldr	r1, [r1, #0]
 80080da:	430a      	orrs	r2, r1
 80080dc:	6022      	str	r2, [r4, #0]
 80080de:	0022      	movs	r2, r4
 80080e0:	2178      	movs	r1, #120	; 0x78
 80080e2:	3245      	adds	r2, #69	; 0x45
 80080e4:	7011      	strb	r1, [r2, #0]
 80080e6:	4a27      	ldr	r2, [pc, #156]	; (8008184 <_printf_i+0x220>)
 80080e8:	e7e1      	b.n	80080ae <_printf_i+0x14a>
 80080ea:	0648      	lsls	r0, r1, #25
 80080ec:	d5e6      	bpl.n	80080bc <_printf_i+0x158>
 80080ee:	b2ad      	uxth	r5, r5
 80080f0:	e7e4      	b.n	80080bc <_printf_i+0x158>
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	680d      	ldr	r5, [r1, #0]
 80080f6:	1d10      	adds	r0, r2, #4
 80080f8:	6949      	ldr	r1, [r1, #20]
 80080fa:	6018      	str	r0, [r3, #0]
 80080fc:	6813      	ldr	r3, [r2, #0]
 80080fe:	062e      	lsls	r6, r5, #24
 8008100:	d501      	bpl.n	8008106 <_printf_i+0x1a2>
 8008102:	6019      	str	r1, [r3, #0]
 8008104:	e002      	b.n	800810c <_printf_i+0x1a8>
 8008106:	066d      	lsls	r5, r5, #25
 8008108:	d5fb      	bpl.n	8008102 <_printf_i+0x19e>
 800810a:	8019      	strh	r1, [r3, #0]
 800810c:	2300      	movs	r3, #0
 800810e:	9e04      	ldr	r6, [sp, #16]
 8008110:	6123      	str	r3, [r4, #16]
 8008112:	e7bb      	b.n	800808c <_printf_i+0x128>
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	1d11      	adds	r1, r2, #4
 8008118:	6019      	str	r1, [r3, #0]
 800811a:	6816      	ldr	r6, [r2, #0]
 800811c:	2100      	movs	r1, #0
 800811e:	0030      	movs	r0, r6
 8008120:	6862      	ldr	r2, [r4, #4]
 8008122:	f000 ff05 	bl	8008f30 <memchr>
 8008126:	2800      	cmp	r0, #0
 8008128:	d001      	beq.n	800812e <_printf_i+0x1ca>
 800812a:	1b80      	subs	r0, r0, r6
 800812c:	6060      	str	r0, [r4, #4]
 800812e:	6863      	ldr	r3, [r4, #4]
 8008130:	6123      	str	r3, [r4, #16]
 8008132:	2300      	movs	r3, #0
 8008134:	9a04      	ldr	r2, [sp, #16]
 8008136:	7013      	strb	r3, [r2, #0]
 8008138:	e7a8      	b.n	800808c <_printf_i+0x128>
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	0032      	movs	r2, r6
 800813e:	9906      	ldr	r1, [sp, #24]
 8008140:	9805      	ldr	r0, [sp, #20]
 8008142:	9d07      	ldr	r5, [sp, #28]
 8008144:	47a8      	blx	r5
 8008146:	1c43      	adds	r3, r0, #1
 8008148:	d0aa      	beq.n	80080a0 <_printf_i+0x13c>
 800814a:	6823      	ldr	r3, [r4, #0]
 800814c:	079b      	lsls	r3, r3, #30
 800814e:	d415      	bmi.n	800817c <_printf_i+0x218>
 8008150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008152:	68e0      	ldr	r0, [r4, #12]
 8008154:	4298      	cmp	r0, r3
 8008156:	daa5      	bge.n	80080a4 <_printf_i+0x140>
 8008158:	0018      	movs	r0, r3
 800815a:	e7a3      	b.n	80080a4 <_printf_i+0x140>
 800815c:	0022      	movs	r2, r4
 800815e:	2301      	movs	r3, #1
 8008160:	9906      	ldr	r1, [sp, #24]
 8008162:	9805      	ldr	r0, [sp, #20]
 8008164:	9e07      	ldr	r6, [sp, #28]
 8008166:	3219      	adds	r2, #25
 8008168:	47b0      	blx	r6
 800816a:	1c43      	adds	r3, r0, #1
 800816c:	d098      	beq.n	80080a0 <_printf_i+0x13c>
 800816e:	3501      	adds	r5, #1
 8008170:	68e3      	ldr	r3, [r4, #12]
 8008172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	42ab      	cmp	r3, r5
 8008178:	dcf0      	bgt.n	800815c <_printf_i+0x1f8>
 800817a:	e7e9      	b.n	8008150 <_printf_i+0x1ec>
 800817c:	2500      	movs	r5, #0
 800817e:	e7f7      	b.n	8008170 <_printf_i+0x20c>
 8008180:	0800aa3a 	.word	0x0800aa3a
 8008184:	0800aa4b 	.word	0x0800aa4b

08008188 <siprintf>:
 8008188:	b40e      	push	{r1, r2, r3}
 800818a:	b500      	push	{lr}
 800818c:	490b      	ldr	r1, [pc, #44]	; (80081bc <siprintf+0x34>)
 800818e:	b09c      	sub	sp, #112	; 0x70
 8008190:	ab1d      	add	r3, sp, #116	; 0x74
 8008192:	9002      	str	r0, [sp, #8]
 8008194:	9006      	str	r0, [sp, #24]
 8008196:	9107      	str	r1, [sp, #28]
 8008198:	9104      	str	r1, [sp, #16]
 800819a:	4809      	ldr	r0, [pc, #36]	; (80081c0 <siprintf+0x38>)
 800819c:	4909      	ldr	r1, [pc, #36]	; (80081c4 <siprintf+0x3c>)
 800819e:	cb04      	ldmia	r3!, {r2}
 80081a0:	9105      	str	r1, [sp, #20]
 80081a2:	6800      	ldr	r0, [r0, #0]
 80081a4:	a902      	add	r1, sp, #8
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	f001 fbe2 	bl	8009970 <_svfiprintf_r>
 80081ac:	2300      	movs	r3, #0
 80081ae:	9a02      	ldr	r2, [sp, #8]
 80081b0:	7013      	strb	r3, [r2, #0]
 80081b2:	b01c      	add	sp, #112	; 0x70
 80081b4:	bc08      	pop	{r3}
 80081b6:	b003      	add	sp, #12
 80081b8:	4718      	bx	r3
 80081ba:	46c0      	nop			; (mov r8, r8)
 80081bc:	7fffffff 	.word	0x7fffffff
 80081c0:	20000010 	.word	0x20000010
 80081c4:	ffff0208 	.word	0xffff0208

080081c8 <quorem>:
 80081c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ca:	0006      	movs	r6, r0
 80081cc:	690b      	ldr	r3, [r1, #16]
 80081ce:	6932      	ldr	r2, [r6, #16]
 80081d0:	b087      	sub	sp, #28
 80081d2:	2000      	movs	r0, #0
 80081d4:	9103      	str	r1, [sp, #12]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	db65      	blt.n	80082a6 <quorem+0xde>
 80081da:	3b01      	subs	r3, #1
 80081dc:	009c      	lsls	r4, r3, #2
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	000b      	movs	r3, r1
 80081e2:	3314      	adds	r3, #20
 80081e4:	9305      	str	r3, [sp, #20]
 80081e6:	191b      	adds	r3, r3, r4
 80081e8:	9304      	str	r3, [sp, #16]
 80081ea:	0033      	movs	r3, r6
 80081ec:	3314      	adds	r3, #20
 80081ee:	9302      	str	r3, [sp, #8]
 80081f0:	191c      	adds	r4, r3, r4
 80081f2:	9b04      	ldr	r3, [sp, #16]
 80081f4:	6827      	ldr	r7, [r4, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	0038      	movs	r0, r7
 80081fa:	1c5d      	adds	r5, r3, #1
 80081fc:	0029      	movs	r1, r5
 80081fe:	9301      	str	r3, [sp, #4]
 8008200:	f7f7 ff9c 	bl	800013c <__udivsi3>
 8008204:	9001      	str	r0, [sp, #4]
 8008206:	42af      	cmp	r7, r5
 8008208:	d324      	bcc.n	8008254 <quorem+0x8c>
 800820a:	2500      	movs	r5, #0
 800820c:	46ac      	mov	ip, r5
 800820e:	9802      	ldr	r0, [sp, #8]
 8008210:	9f05      	ldr	r7, [sp, #20]
 8008212:	cf08      	ldmia	r7!, {r3}
 8008214:	9a01      	ldr	r2, [sp, #4]
 8008216:	b299      	uxth	r1, r3
 8008218:	4351      	muls	r1, r2
 800821a:	0c1b      	lsrs	r3, r3, #16
 800821c:	4353      	muls	r3, r2
 800821e:	1949      	adds	r1, r1, r5
 8008220:	0c0a      	lsrs	r2, r1, #16
 8008222:	189b      	adds	r3, r3, r2
 8008224:	6802      	ldr	r2, [r0, #0]
 8008226:	b289      	uxth	r1, r1
 8008228:	b292      	uxth	r2, r2
 800822a:	4462      	add	r2, ip
 800822c:	1a52      	subs	r2, r2, r1
 800822e:	6801      	ldr	r1, [r0, #0]
 8008230:	0c1d      	lsrs	r5, r3, #16
 8008232:	0c09      	lsrs	r1, r1, #16
 8008234:	b29b      	uxth	r3, r3
 8008236:	1acb      	subs	r3, r1, r3
 8008238:	1411      	asrs	r1, r2, #16
 800823a:	185b      	adds	r3, r3, r1
 800823c:	1419      	asrs	r1, r3, #16
 800823e:	b292      	uxth	r2, r2
 8008240:	041b      	lsls	r3, r3, #16
 8008242:	431a      	orrs	r2, r3
 8008244:	9b04      	ldr	r3, [sp, #16]
 8008246:	468c      	mov	ip, r1
 8008248:	c004      	stmia	r0!, {r2}
 800824a:	42bb      	cmp	r3, r7
 800824c:	d2e1      	bcs.n	8008212 <quorem+0x4a>
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d030      	beq.n	80082b6 <quorem+0xee>
 8008254:	0030      	movs	r0, r6
 8008256:	9903      	ldr	r1, [sp, #12]
 8008258:	f001 f902 	bl	8009460 <__mcmp>
 800825c:	2800      	cmp	r0, #0
 800825e:	db21      	blt.n	80082a4 <quorem+0xdc>
 8008260:	0030      	movs	r0, r6
 8008262:	2400      	movs	r4, #0
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	9903      	ldr	r1, [sp, #12]
 8008268:	3301      	adds	r3, #1
 800826a:	9301      	str	r3, [sp, #4]
 800826c:	3014      	adds	r0, #20
 800826e:	3114      	adds	r1, #20
 8008270:	6803      	ldr	r3, [r0, #0]
 8008272:	c920      	ldmia	r1!, {r5}
 8008274:	b29a      	uxth	r2, r3
 8008276:	1914      	adds	r4, r2, r4
 8008278:	b2aa      	uxth	r2, r5
 800827a:	1aa2      	subs	r2, r4, r2
 800827c:	0c1b      	lsrs	r3, r3, #16
 800827e:	0c2d      	lsrs	r5, r5, #16
 8008280:	1414      	asrs	r4, r2, #16
 8008282:	1b5b      	subs	r3, r3, r5
 8008284:	191b      	adds	r3, r3, r4
 8008286:	141c      	asrs	r4, r3, #16
 8008288:	b292      	uxth	r2, r2
 800828a:	041b      	lsls	r3, r3, #16
 800828c:	4313      	orrs	r3, r2
 800828e:	c008      	stmia	r0!, {r3}
 8008290:	9b04      	ldr	r3, [sp, #16]
 8008292:	428b      	cmp	r3, r1
 8008294:	d2ec      	bcs.n	8008270 <quorem+0xa8>
 8008296:	9b00      	ldr	r3, [sp, #0]
 8008298:	9a02      	ldr	r2, [sp, #8]
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	18d3      	adds	r3, r2, r3
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	d015      	beq.n	80082d0 <quorem+0x108>
 80082a4:	9801      	ldr	r0, [sp, #4]
 80082a6:	b007      	add	sp, #28
 80082a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082aa:	6823      	ldr	r3, [r4, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d106      	bne.n	80082be <quorem+0xf6>
 80082b0:	9b00      	ldr	r3, [sp, #0]
 80082b2:	3b01      	subs	r3, #1
 80082b4:	9300      	str	r3, [sp, #0]
 80082b6:	9b02      	ldr	r3, [sp, #8]
 80082b8:	3c04      	subs	r4, #4
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	d3f5      	bcc.n	80082aa <quorem+0xe2>
 80082be:	9b00      	ldr	r3, [sp, #0]
 80082c0:	6133      	str	r3, [r6, #16]
 80082c2:	e7c7      	b.n	8008254 <quorem+0x8c>
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	2a00      	cmp	r2, #0
 80082c8:	d106      	bne.n	80082d8 <quorem+0x110>
 80082ca:	9a00      	ldr	r2, [sp, #0]
 80082cc:	3a01      	subs	r2, #1
 80082ce:	9200      	str	r2, [sp, #0]
 80082d0:	9a02      	ldr	r2, [sp, #8]
 80082d2:	3b04      	subs	r3, #4
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d3f5      	bcc.n	80082c4 <quorem+0xfc>
 80082d8:	9b00      	ldr	r3, [sp, #0]
 80082da:	6133      	str	r3, [r6, #16]
 80082dc:	e7e2      	b.n	80082a4 <quorem+0xdc>
	...

080082e0 <_dtoa_r>:
 80082e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082e2:	b09d      	sub	sp, #116	; 0x74
 80082e4:	9202      	str	r2, [sp, #8]
 80082e6:	9303      	str	r3, [sp, #12]
 80082e8:	9b02      	ldr	r3, [sp, #8]
 80082ea:	9c03      	ldr	r4, [sp, #12]
 80082ec:	9308      	str	r3, [sp, #32]
 80082ee:	9409      	str	r4, [sp, #36]	; 0x24
 80082f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80082f2:	0007      	movs	r7, r0
 80082f4:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80082f6:	2c00      	cmp	r4, #0
 80082f8:	d10e      	bne.n	8008318 <_dtoa_r+0x38>
 80082fa:	2010      	movs	r0, #16
 80082fc:	f000 fe0e 	bl	8008f1c <malloc>
 8008300:	1e02      	subs	r2, r0, #0
 8008302:	6278      	str	r0, [r7, #36]	; 0x24
 8008304:	d104      	bne.n	8008310 <_dtoa_r+0x30>
 8008306:	21ea      	movs	r1, #234	; 0xea
 8008308:	4bc7      	ldr	r3, [pc, #796]	; (8008628 <_dtoa_r+0x348>)
 800830a:	48c8      	ldr	r0, [pc, #800]	; (800862c <_dtoa_r+0x34c>)
 800830c:	f001 fc42 	bl	8009b94 <__assert_func>
 8008310:	6044      	str	r4, [r0, #4]
 8008312:	6084      	str	r4, [r0, #8]
 8008314:	6004      	str	r4, [r0, #0]
 8008316:	60c4      	str	r4, [r0, #12]
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	6819      	ldr	r1, [r3, #0]
 800831c:	2900      	cmp	r1, #0
 800831e:	d00a      	beq.n	8008336 <_dtoa_r+0x56>
 8008320:	685a      	ldr	r2, [r3, #4]
 8008322:	2301      	movs	r3, #1
 8008324:	4093      	lsls	r3, r2
 8008326:	604a      	str	r2, [r1, #4]
 8008328:	608b      	str	r3, [r1, #8]
 800832a:	0038      	movs	r0, r7
 800832c:	f000 fe58 	bl	8008fe0 <_Bfree>
 8008330:	2200      	movs	r2, #0
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	9b03      	ldr	r3, [sp, #12]
 8008338:	2b00      	cmp	r3, #0
 800833a:	da20      	bge.n	800837e <_dtoa_r+0x9e>
 800833c:	2301      	movs	r3, #1
 800833e:	602b      	str	r3, [r5, #0]
 8008340:	9b03      	ldr	r3, [sp, #12]
 8008342:	005b      	lsls	r3, r3, #1
 8008344:	085b      	lsrs	r3, r3, #1
 8008346:	9309      	str	r3, [sp, #36]	; 0x24
 8008348:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800834a:	4bb9      	ldr	r3, [pc, #740]	; (8008630 <_dtoa_r+0x350>)
 800834c:	4ab8      	ldr	r2, [pc, #736]	; (8008630 <_dtoa_r+0x350>)
 800834e:	402b      	ands	r3, r5
 8008350:	4293      	cmp	r3, r2
 8008352:	d117      	bne.n	8008384 <_dtoa_r+0xa4>
 8008354:	4bb7      	ldr	r3, [pc, #732]	; (8008634 <_dtoa_r+0x354>)
 8008356:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008358:	0328      	lsls	r0, r5, #12
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	9b02      	ldr	r3, [sp, #8]
 800835e:	0b00      	lsrs	r0, r0, #12
 8008360:	4318      	orrs	r0, r3
 8008362:	d101      	bne.n	8008368 <_dtoa_r+0x88>
 8008364:	f000 fdbf 	bl	8008ee6 <_dtoa_r+0xc06>
 8008368:	48b3      	ldr	r0, [pc, #716]	; (8008638 <_dtoa_r+0x358>)
 800836a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800836c:	9006      	str	r0, [sp, #24]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d002      	beq.n	8008378 <_dtoa_r+0x98>
 8008372:	4bb2      	ldr	r3, [pc, #712]	; (800863c <_dtoa_r+0x35c>)
 8008374:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008376:	6013      	str	r3, [r2, #0]
 8008378:	9806      	ldr	r0, [sp, #24]
 800837a:	b01d      	add	sp, #116	; 0x74
 800837c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800837e:	2300      	movs	r3, #0
 8008380:	602b      	str	r3, [r5, #0]
 8008382:	e7e1      	b.n	8008348 <_dtoa_r+0x68>
 8008384:	9b08      	ldr	r3, [sp, #32]
 8008386:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008388:	9312      	str	r3, [sp, #72]	; 0x48
 800838a:	9413      	str	r4, [sp, #76]	; 0x4c
 800838c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800838e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008390:	2200      	movs	r2, #0
 8008392:	2300      	movs	r3, #0
 8008394:	f7f8 f858 	bl	8000448 <__aeabi_dcmpeq>
 8008398:	1e04      	subs	r4, r0, #0
 800839a:	d009      	beq.n	80083b0 <_dtoa_r+0xd0>
 800839c:	2301      	movs	r3, #1
 800839e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80083a0:	6013      	str	r3, [r2, #0]
 80083a2:	4ba7      	ldr	r3, [pc, #668]	; (8008640 <_dtoa_r+0x360>)
 80083a4:	9306      	str	r3, [sp, #24]
 80083a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0e5      	beq.n	8008378 <_dtoa_r+0x98>
 80083ac:	4ba5      	ldr	r3, [pc, #660]	; (8008644 <_dtoa_r+0x364>)
 80083ae:	e7e1      	b.n	8008374 <_dtoa_r+0x94>
 80083b0:	ab1a      	add	r3, sp, #104	; 0x68
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	ab1b      	add	r3, sp, #108	; 0x6c
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	0038      	movs	r0, r7
 80083ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80083bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083be:	f001 f903 	bl	80095c8 <__d2b>
 80083c2:	006e      	lsls	r6, r5, #1
 80083c4:	9005      	str	r0, [sp, #20]
 80083c6:	0d76      	lsrs	r6, r6, #21
 80083c8:	d100      	bne.n	80083cc <_dtoa_r+0xec>
 80083ca:	e07c      	b.n	80084c6 <_dtoa_r+0x1e6>
 80083cc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80083ce:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80083d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80083d2:	4a9d      	ldr	r2, [pc, #628]	; (8008648 <_dtoa_r+0x368>)
 80083d4:	031b      	lsls	r3, r3, #12
 80083d6:	0b1b      	lsrs	r3, r3, #12
 80083d8:	431a      	orrs	r2, r3
 80083da:	0011      	movs	r1, r2
 80083dc:	4b9b      	ldr	r3, [pc, #620]	; (800864c <_dtoa_r+0x36c>)
 80083de:	9418      	str	r4, [sp, #96]	; 0x60
 80083e0:	18f6      	adds	r6, r6, r3
 80083e2:	2200      	movs	r2, #0
 80083e4:	4b9a      	ldr	r3, [pc, #616]	; (8008650 <_dtoa_r+0x370>)
 80083e6:	f7f9 faf3 	bl	80019d0 <__aeabi_dsub>
 80083ea:	4a9a      	ldr	r2, [pc, #616]	; (8008654 <_dtoa_r+0x374>)
 80083ec:	4b9a      	ldr	r3, [pc, #616]	; (8008658 <_dtoa_r+0x378>)
 80083ee:	f7f9 f883 	bl	80014f8 <__aeabi_dmul>
 80083f2:	4a9a      	ldr	r2, [pc, #616]	; (800865c <_dtoa_r+0x37c>)
 80083f4:	4b9a      	ldr	r3, [pc, #616]	; (8008660 <_dtoa_r+0x380>)
 80083f6:	f7f8 f941 	bl	800067c <__aeabi_dadd>
 80083fa:	0004      	movs	r4, r0
 80083fc:	0030      	movs	r0, r6
 80083fe:	000d      	movs	r5, r1
 8008400:	f7f9 fecc 	bl	800219c <__aeabi_i2d>
 8008404:	4a97      	ldr	r2, [pc, #604]	; (8008664 <_dtoa_r+0x384>)
 8008406:	4b98      	ldr	r3, [pc, #608]	; (8008668 <_dtoa_r+0x388>)
 8008408:	f7f9 f876 	bl	80014f8 <__aeabi_dmul>
 800840c:	0002      	movs	r2, r0
 800840e:	000b      	movs	r3, r1
 8008410:	0020      	movs	r0, r4
 8008412:	0029      	movs	r1, r5
 8008414:	f7f8 f932 	bl	800067c <__aeabi_dadd>
 8008418:	0004      	movs	r4, r0
 800841a:	000d      	movs	r5, r1
 800841c:	f7f9 fe88 	bl	8002130 <__aeabi_d2iz>
 8008420:	2200      	movs	r2, #0
 8008422:	9002      	str	r0, [sp, #8]
 8008424:	2300      	movs	r3, #0
 8008426:	0020      	movs	r0, r4
 8008428:	0029      	movs	r1, r5
 800842a:	f7f8 f813 	bl	8000454 <__aeabi_dcmplt>
 800842e:	2800      	cmp	r0, #0
 8008430:	d00b      	beq.n	800844a <_dtoa_r+0x16a>
 8008432:	9802      	ldr	r0, [sp, #8]
 8008434:	f7f9 feb2 	bl	800219c <__aeabi_i2d>
 8008438:	002b      	movs	r3, r5
 800843a:	0022      	movs	r2, r4
 800843c:	f7f8 f804 	bl	8000448 <__aeabi_dcmpeq>
 8008440:	4243      	negs	r3, r0
 8008442:	4158      	adcs	r0, r3
 8008444:	9b02      	ldr	r3, [sp, #8]
 8008446:	1a1b      	subs	r3, r3, r0
 8008448:	9302      	str	r3, [sp, #8]
 800844a:	2301      	movs	r3, #1
 800844c:	9316      	str	r3, [sp, #88]	; 0x58
 800844e:	9b02      	ldr	r3, [sp, #8]
 8008450:	2b16      	cmp	r3, #22
 8008452:	d80f      	bhi.n	8008474 <_dtoa_r+0x194>
 8008454:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008456:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008458:	00da      	lsls	r2, r3, #3
 800845a:	4b84      	ldr	r3, [pc, #528]	; (800866c <_dtoa_r+0x38c>)
 800845c:	189b      	adds	r3, r3, r2
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	f7f7 fff7 	bl	8000454 <__aeabi_dcmplt>
 8008466:	2800      	cmp	r0, #0
 8008468:	d049      	beq.n	80084fe <_dtoa_r+0x21e>
 800846a:	9b02      	ldr	r3, [sp, #8]
 800846c:	3b01      	subs	r3, #1
 800846e:	9302      	str	r3, [sp, #8]
 8008470:	2300      	movs	r3, #0
 8008472:	9316      	str	r3, [sp, #88]	; 0x58
 8008474:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008476:	1b9e      	subs	r6, r3, r6
 8008478:	2300      	movs	r3, #0
 800847a:	930a      	str	r3, [sp, #40]	; 0x28
 800847c:	0033      	movs	r3, r6
 800847e:	3b01      	subs	r3, #1
 8008480:	930d      	str	r3, [sp, #52]	; 0x34
 8008482:	d504      	bpl.n	800848e <_dtoa_r+0x1ae>
 8008484:	2301      	movs	r3, #1
 8008486:	1b9b      	subs	r3, r3, r6
 8008488:	930a      	str	r3, [sp, #40]	; 0x28
 800848a:	2300      	movs	r3, #0
 800848c:	930d      	str	r3, [sp, #52]	; 0x34
 800848e:	9b02      	ldr	r3, [sp, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	db36      	blt.n	8008502 <_dtoa_r+0x222>
 8008494:	9a02      	ldr	r2, [sp, #8]
 8008496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008498:	4694      	mov	ip, r2
 800849a:	4463      	add	r3, ip
 800849c:	930d      	str	r3, [sp, #52]	; 0x34
 800849e:	2300      	movs	r3, #0
 80084a0:	9215      	str	r2, [sp, #84]	; 0x54
 80084a2:	930e      	str	r3, [sp, #56]	; 0x38
 80084a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084a6:	2401      	movs	r4, #1
 80084a8:	2b09      	cmp	r3, #9
 80084aa:	d864      	bhi.n	8008576 <_dtoa_r+0x296>
 80084ac:	2b05      	cmp	r3, #5
 80084ae:	dd02      	ble.n	80084b6 <_dtoa_r+0x1d6>
 80084b0:	2400      	movs	r4, #0
 80084b2:	3b04      	subs	r3, #4
 80084b4:	9322      	str	r3, [sp, #136]	; 0x88
 80084b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084b8:	1e98      	subs	r0, r3, #2
 80084ba:	2803      	cmp	r0, #3
 80084bc:	d864      	bhi.n	8008588 <_dtoa_r+0x2a8>
 80084be:	f7f7 fe29 	bl	8000114 <__gnu_thumb1_case_uqi>
 80084c2:	3829      	.short	0x3829
 80084c4:	5836      	.short	0x5836
 80084c6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80084c8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80084ca:	189e      	adds	r6, r3, r2
 80084cc:	4b68      	ldr	r3, [pc, #416]	; (8008670 <_dtoa_r+0x390>)
 80084ce:	18f2      	adds	r2, r6, r3
 80084d0:	2a20      	cmp	r2, #32
 80084d2:	dd0f      	ble.n	80084f4 <_dtoa_r+0x214>
 80084d4:	2340      	movs	r3, #64	; 0x40
 80084d6:	1a9b      	subs	r3, r3, r2
 80084d8:	409d      	lsls	r5, r3
 80084da:	4b66      	ldr	r3, [pc, #408]	; (8008674 <_dtoa_r+0x394>)
 80084dc:	9802      	ldr	r0, [sp, #8]
 80084de:	18f3      	adds	r3, r6, r3
 80084e0:	40d8      	lsrs	r0, r3
 80084e2:	4328      	orrs	r0, r5
 80084e4:	f7f9 fe8a 	bl	80021fc <__aeabi_ui2d>
 80084e8:	2301      	movs	r3, #1
 80084ea:	4c63      	ldr	r4, [pc, #396]	; (8008678 <_dtoa_r+0x398>)
 80084ec:	3e01      	subs	r6, #1
 80084ee:	1909      	adds	r1, r1, r4
 80084f0:	9318      	str	r3, [sp, #96]	; 0x60
 80084f2:	e776      	b.n	80083e2 <_dtoa_r+0x102>
 80084f4:	2320      	movs	r3, #32
 80084f6:	9802      	ldr	r0, [sp, #8]
 80084f8:	1a9b      	subs	r3, r3, r2
 80084fa:	4098      	lsls	r0, r3
 80084fc:	e7f2      	b.n	80084e4 <_dtoa_r+0x204>
 80084fe:	9016      	str	r0, [sp, #88]	; 0x58
 8008500:	e7b8      	b.n	8008474 <_dtoa_r+0x194>
 8008502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008504:	9a02      	ldr	r2, [sp, #8]
 8008506:	1a9b      	subs	r3, r3, r2
 8008508:	930a      	str	r3, [sp, #40]	; 0x28
 800850a:	4253      	negs	r3, r2
 800850c:	930e      	str	r3, [sp, #56]	; 0x38
 800850e:	2300      	movs	r3, #0
 8008510:	9315      	str	r3, [sp, #84]	; 0x54
 8008512:	e7c7      	b.n	80084a4 <_dtoa_r+0x1c4>
 8008514:	2300      	movs	r3, #0
 8008516:	930f      	str	r3, [sp, #60]	; 0x3c
 8008518:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800851a:	930c      	str	r3, [sp, #48]	; 0x30
 800851c:	9307      	str	r3, [sp, #28]
 800851e:	2b00      	cmp	r3, #0
 8008520:	dc13      	bgt.n	800854a <_dtoa_r+0x26a>
 8008522:	2301      	movs	r3, #1
 8008524:	001a      	movs	r2, r3
 8008526:	930c      	str	r3, [sp, #48]	; 0x30
 8008528:	9307      	str	r3, [sp, #28]
 800852a:	9223      	str	r2, [sp, #140]	; 0x8c
 800852c:	e00d      	b.n	800854a <_dtoa_r+0x26a>
 800852e:	2301      	movs	r3, #1
 8008530:	e7f1      	b.n	8008516 <_dtoa_r+0x236>
 8008532:	2300      	movs	r3, #0
 8008534:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8008536:	930f      	str	r3, [sp, #60]	; 0x3c
 8008538:	4694      	mov	ip, r2
 800853a:	9b02      	ldr	r3, [sp, #8]
 800853c:	4463      	add	r3, ip
 800853e:	930c      	str	r3, [sp, #48]	; 0x30
 8008540:	3301      	adds	r3, #1
 8008542:	9307      	str	r3, [sp, #28]
 8008544:	2b00      	cmp	r3, #0
 8008546:	dc00      	bgt.n	800854a <_dtoa_r+0x26a>
 8008548:	2301      	movs	r3, #1
 800854a:	2200      	movs	r2, #0
 800854c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800854e:	6042      	str	r2, [r0, #4]
 8008550:	3204      	adds	r2, #4
 8008552:	0015      	movs	r5, r2
 8008554:	3514      	adds	r5, #20
 8008556:	6841      	ldr	r1, [r0, #4]
 8008558:	429d      	cmp	r5, r3
 800855a:	d919      	bls.n	8008590 <_dtoa_r+0x2b0>
 800855c:	0038      	movs	r0, r7
 800855e:	f000 fcfb 	bl	8008f58 <_Balloc>
 8008562:	9006      	str	r0, [sp, #24]
 8008564:	2800      	cmp	r0, #0
 8008566:	d117      	bne.n	8008598 <_dtoa_r+0x2b8>
 8008568:	21d5      	movs	r1, #213	; 0xd5
 800856a:	0002      	movs	r2, r0
 800856c:	4b43      	ldr	r3, [pc, #268]	; (800867c <_dtoa_r+0x39c>)
 800856e:	0049      	lsls	r1, r1, #1
 8008570:	e6cb      	b.n	800830a <_dtoa_r+0x2a>
 8008572:	2301      	movs	r3, #1
 8008574:	e7de      	b.n	8008534 <_dtoa_r+0x254>
 8008576:	2300      	movs	r3, #0
 8008578:	940f      	str	r4, [sp, #60]	; 0x3c
 800857a:	9322      	str	r3, [sp, #136]	; 0x88
 800857c:	3b01      	subs	r3, #1
 800857e:	930c      	str	r3, [sp, #48]	; 0x30
 8008580:	9307      	str	r3, [sp, #28]
 8008582:	2200      	movs	r2, #0
 8008584:	3313      	adds	r3, #19
 8008586:	e7d0      	b.n	800852a <_dtoa_r+0x24a>
 8008588:	2301      	movs	r3, #1
 800858a:	930f      	str	r3, [sp, #60]	; 0x3c
 800858c:	3b02      	subs	r3, #2
 800858e:	e7f6      	b.n	800857e <_dtoa_r+0x29e>
 8008590:	3101      	adds	r1, #1
 8008592:	6041      	str	r1, [r0, #4]
 8008594:	0052      	lsls	r2, r2, #1
 8008596:	e7dc      	b.n	8008552 <_dtoa_r+0x272>
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	9a06      	ldr	r2, [sp, #24]
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	9b07      	ldr	r3, [sp, #28]
 80085a0:	2b0e      	cmp	r3, #14
 80085a2:	d900      	bls.n	80085a6 <_dtoa_r+0x2c6>
 80085a4:	e0eb      	b.n	800877e <_dtoa_r+0x49e>
 80085a6:	2c00      	cmp	r4, #0
 80085a8:	d100      	bne.n	80085ac <_dtoa_r+0x2cc>
 80085aa:	e0e8      	b.n	800877e <_dtoa_r+0x49e>
 80085ac:	9b02      	ldr	r3, [sp, #8]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	dd68      	ble.n	8008684 <_dtoa_r+0x3a4>
 80085b2:	001a      	movs	r2, r3
 80085b4:	210f      	movs	r1, #15
 80085b6:	4b2d      	ldr	r3, [pc, #180]	; (800866c <_dtoa_r+0x38c>)
 80085b8:	400a      	ands	r2, r1
 80085ba:	00d2      	lsls	r2, r2, #3
 80085bc:	189b      	adds	r3, r3, r2
 80085be:	681d      	ldr	r5, [r3, #0]
 80085c0:	685e      	ldr	r6, [r3, #4]
 80085c2:	9b02      	ldr	r3, [sp, #8]
 80085c4:	111c      	asrs	r4, r3, #4
 80085c6:	2302      	movs	r3, #2
 80085c8:	9310      	str	r3, [sp, #64]	; 0x40
 80085ca:	9b02      	ldr	r3, [sp, #8]
 80085cc:	05db      	lsls	r3, r3, #23
 80085ce:	d50b      	bpl.n	80085e8 <_dtoa_r+0x308>
 80085d0:	4b2b      	ldr	r3, [pc, #172]	; (8008680 <_dtoa_r+0x3a0>)
 80085d2:	400c      	ands	r4, r1
 80085d4:	6a1a      	ldr	r2, [r3, #32]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80085da:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80085dc:	f7f8 fb8a 	bl	8000cf4 <__aeabi_ddiv>
 80085e0:	2303      	movs	r3, #3
 80085e2:	9008      	str	r0, [sp, #32]
 80085e4:	9109      	str	r1, [sp, #36]	; 0x24
 80085e6:	9310      	str	r3, [sp, #64]	; 0x40
 80085e8:	4b25      	ldr	r3, [pc, #148]	; (8008680 <_dtoa_r+0x3a0>)
 80085ea:	9314      	str	r3, [sp, #80]	; 0x50
 80085ec:	2c00      	cmp	r4, #0
 80085ee:	d108      	bne.n	8008602 <_dtoa_r+0x322>
 80085f0:	9808      	ldr	r0, [sp, #32]
 80085f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085f4:	002a      	movs	r2, r5
 80085f6:	0033      	movs	r3, r6
 80085f8:	f7f8 fb7c 	bl	8000cf4 <__aeabi_ddiv>
 80085fc:	9008      	str	r0, [sp, #32]
 80085fe:	9109      	str	r1, [sp, #36]	; 0x24
 8008600:	e05c      	b.n	80086bc <_dtoa_r+0x3dc>
 8008602:	2301      	movs	r3, #1
 8008604:	421c      	tst	r4, r3
 8008606:	d00b      	beq.n	8008620 <_dtoa_r+0x340>
 8008608:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800860a:	0028      	movs	r0, r5
 800860c:	3301      	adds	r3, #1
 800860e:	9310      	str	r3, [sp, #64]	; 0x40
 8008610:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008612:	0031      	movs	r1, r6
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	f7f8 ff6e 	bl	80014f8 <__aeabi_dmul>
 800861c:	0005      	movs	r5, r0
 800861e:	000e      	movs	r6, r1
 8008620:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008622:	1064      	asrs	r4, r4, #1
 8008624:	3308      	adds	r3, #8
 8008626:	e7e0      	b.n	80085ea <_dtoa_r+0x30a>
 8008628:	0800aa69 	.word	0x0800aa69
 800862c:	0800aa80 	.word	0x0800aa80
 8008630:	7ff00000 	.word	0x7ff00000
 8008634:	0000270f 	.word	0x0000270f
 8008638:	0800aa65 	.word	0x0800aa65
 800863c:	0800aa68 	.word	0x0800aa68
 8008640:	0800aa38 	.word	0x0800aa38
 8008644:	0800aa39 	.word	0x0800aa39
 8008648:	3ff00000 	.word	0x3ff00000
 800864c:	fffffc01 	.word	0xfffffc01
 8008650:	3ff80000 	.word	0x3ff80000
 8008654:	636f4361 	.word	0x636f4361
 8008658:	3fd287a7 	.word	0x3fd287a7
 800865c:	8b60c8b3 	.word	0x8b60c8b3
 8008660:	3fc68a28 	.word	0x3fc68a28
 8008664:	509f79fb 	.word	0x509f79fb
 8008668:	3fd34413 	.word	0x3fd34413
 800866c:	0800ab70 	.word	0x0800ab70
 8008670:	00000432 	.word	0x00000432
 8008674:	00000412 	.word	0x00000412
 8008678:	fe100000 	.word	0xfe100000
 800867c:	0800aadb 	.word	0x0800aadb
 8008680:	0800ab48 	.word	0x0800ab48
 8008684:	2302      	movs	r3, #2
 8008686:	9310      	str	r3, [sp, #64]	; 0x40
 8008688:	9b02      	ldr	r3, [sp, #8]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d016      	beq.n	80086bc <_dtoa_r+0x3dc>
 800868e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008690:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008692:	425c      	negs	r4, r3
 8008694:	230f      	movs	r3, #15
 8008696:	4ab6      	ldr	r2, [pc, #728]	; (8008970 <_dtoa_r+0x690>)
 8008698:	4023      	ands	r3, r4
 800869a:	00db      	lsls	r3, r3, #3
 800869c:	18d3      	adds	r3, r2, r3
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	f7f8 ff29 	bl	80014f8 <__aeabi_dmul>
 80086a6:	2601      	movs	r6, #1
 80086a8:	2300      	movs	r3, #0
 80086aa:	9008      	str	r0, [sp, #32]
 80086ac:	9109      	str	r1, [sp, #36]	; 0x24
 80086ae:	4db1      	ldr	r5, [pc, #708]	; (8008974 <_dtoa_r+0x694>)
 80086b0:	1124      	asrs	r4, r4, #4
 80086b2:	2c00      	cmp	r4, #0
 80086b4:	d000      	beq.n	80086b8 <_dtoa_r+0x3d8>
 80086b6:	e094      	b.n	80087e2 <_dtoa_r+0x502>
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d19f      	bne.n	80085fc <_dtoa_r+0x31c>
 80086bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d100      	bne.n	80086c4 <_dtoa_r+0x3e4>
 80086c2:	e09b      	b.n	80087fc <_dtoa_r+0x51c>
 80086c4:	9c08      	ldr	r4, [sp, #32]
 80086c6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086c8:	2200      	movs	r2, #0
 80086ca:	0020      	movs	r0, r4
 80086cc:	0029      	movs	r1, r5
 80086ce:	4baa      	ldr	r3, [pc, #680]	; (8008978 <_dtoa_r+0x698>)
 80086d0:	f7f7 fec0 	bl	8000454 <__aeabi_dcmplt>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d100      	bne.n	80086da <_dtoa_r+0x3fa>
 80086d8:	e090      	b.n	80087fc <_dtoa_r+0x51c>
 80086da:	9b07      	ldr	r3, [sp, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d100      	bne.n	80086e2 <_dtoa_r+0x402>
 80086e0:	e08c      	b.n	80087fc <_dtoa_r+0x51c>
 80086e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	dd46      	ble.n	8008776 <_dtoa_r+0x496>
 80086e8:	9b02      	ldr	r3, [sp, #8]
 80086ea:	2200      	movs	r2, #0
 80086ec:	0020      	movs	r0, r4
 80086ee:	0029      	movs	r1, r5
 80086f0:	1e5e      	subs	r6, r3, #1
 80086f2:	4ba2      	ldr	r3, [pc, #648]	; (800897c <_dtoa_r+0x69c>)
 80086f4:	f7f8 ff00 	bl	80014f8 <__aeabi_dmul>
 80086f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086fa:	9008      	str	r0, [sp, #32]
 80086fc:	9109      	str	r1, [sp, #36]	; 0x24
 80086fe:	3301      	adds	r3, #1
 8008700:	9310      	str	r3, [sp, #64]	; 0x40
 8008702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008704:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008706:	9c08      	ldr	r4, [sp, #32]
 8008708:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800870a:	9314      	str	r3, [sp, #80]	; 0x50
 800870c:	f7f9 fd46 	bl	800219c <__aeabi_i2d>
 8008710:	0022      	movs	r2, r4
 8008712:	002b      	movs	r3, r5
 8008714:	f7f8 fef0 	bl	80014f8 <__aeabi_dmul>
 8008718:	2200      	movs	r2, #0
 800871a:	4b99      	ldr	r3, [pc, #612]	; (8008980 <_dtoa_r+0x6a0>)
 800871c:	f7f7 ffae 	bl	800067c <__aeabi_dadd>
 8008720:	9010      	str	r0, [sp, #64]	; 0x40
 8008722:	9111      	str	r1, [sp, #68]	; 0x44
 8008724:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008726:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008728:	9208      	str	r2, [sp, #32]
 800872a:	9309      	str	r3, [sp, #36]	; 0x24
 800872c:	4a95      	ldr	r2, [pc, #596]	; (8008984 <_dtoa_r+0x6a4>)
 800872e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008730:	4694      	mov	ip, r2
 8008732:	4463      	add	r3, ip
 8008734:	9317      	str	r3, [sp, #92]	; 0x5c
 8008736:	9309      	str	r3, [sp, #36]	; 0x24
 8008738:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800873a:	2b00      	cmp	r3, #0
 800873c:	d161      	bne.n	8008802 <_dtoa_r+0x522>
 800873e:	2200      	movs	r2, #0
 8008740:	0020      	movs	r0, r4
 8008742:	0029      	movs	r1, r5
 8008744:	4b90      	ldr	r3, [pc, #576]	; (8008988 <_dtoa_r+0x6a8>)
 8008746:	f7f9 f943 	bl	80019d0 <__aeabi_dsub>
 800874a:	9a08      	ldr	r2, [sp, #32]
 800874c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800874e:	0004      	movs	r4, r0
 8008750:	000d      	movs	r5, r1
 8008752:	f7f7 fe93 	bl	800047c <__aeabi_dcmpgt>
 8008756:	2800      	cmp	r0, #0
 8008758:	d000      	beq.n	800875c <_dtoa_r+0x47c>
 800875a:	e2af      	b.n	8008cbc <_dtoa_r+0x9dc>
 800875c:	488b      	ldr	r0, [pc, #556]	; (800898c <_dtoa_r+0x6ac>)
 800875e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008760:	4684      	mov	ip, r0
 8008762:	4461      	add	r1, ip
 8008764:	000b      	movs	r3, r1
 8008766:	0020      	movs	r0, r4
 8008768:	0029      	movs	r1, r5
 800876a:	9a08      	ldr	r2, [sp, #32]
 800876c:	f7f7 fe72 	bl	8000454 <__aeabi_dcmplt>
 8008770:	2800      	cmp	r0, #0
 8008772:	d000      	beq.n	8008776 <_dtoa_r+0x496>
 8008774:	e29f      	b.n	8008cb6 <_dtoa_r+0x9d6>
 8008776:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008778:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800877a:	9308      	str	r3, [sp, #32]
 800877c:	9409      	str	r4, [sp, #36]	; 0x24
 800877e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008780:	2b00      	cmp	r3, #0
 8008782:	da00      	bge.n	8008786 <_dtoa_r+0x4a6>
 8008784:	e172      	b.n	8008a6c <_dtoa_r+0x78c>
 8008786:	9a02      	ldr	r2, [sp, #8]
 8008788:	2a0e      	cmp	r2, #14
 800878a:	dd00      	ble.n	800878e <_dtoa_r+0x4ae>
 800878c:	e16e      	b.n	8008a6c <_dtoa_r+0x78c>
 800878e:	4b78      	ldr	r3, [pc, #480]	; (8008970 <_dtoa_r+0x690>)
 8008790:	00d2      	lsls	r2, r2, #3
 8008792:	189b      	adds	r3, r3, r2
 8008794:	685c      	ldr	r4, [r3, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	930a      	str	r3, [sp, #40]	; 0x28
 800879a:	940b      	str	r4, [sp, #44]	; 0x2c
 800879c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800879e:	2b00      	cmp	r3, #0
 80087a0:	db00      	blt.n	80087a4 <_dtoa_r+0x4c4>
 80087a2:	e0f7      	b.n	8008994 <_dtoa_r+0x6b4>
 80087a4:	9b07      	ldr	r3, [sp, #28]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	dd00      	ble.n	80087ac <_dtoa_r+0x4cc>
 80087aa:	e0f3      	b.n	8008994 <_dtoa_r+0x6b4>
 80087ac:	d000      	beq.n	80087b0 <_dtoa_r+0x4d0>
 80087ae:	e282      	b.n	8008cb6 <_dtoa_r+0x9d6>
 80087b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80087b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087b4:	2200      	movs	r2, #0
 80087b6:	4b74      	ldr	r3, [pc, #464]	; (8008988 <_dtoa_r+0x6a8>)
 80087b8:	f7f8 fe9e 	bl	80014f8 <__aeabi_dmul>
 80087bc:	9a08      	ldr	r2, [sp, #32]
 80087be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087c0:	f7f7 fe66 	bl	8000490 <__aeabi_dcmpge>
 80087c4:	9e07      	ldr	r6, [sp, #28]
 80087c6:	0035      	movs	r5, r6
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d000      	beq.n	80087ce <_dtoa_r+0x4ee>
 80087cc:	e259      	b.n	8008c82 <_dtoa_r+0x9a2>
 80087ce:	9b06      	ldr	r3, [sp, #24]
 80087d0:	9a06      	ldr	r2, [sp, #24]
 80087d2:	3301      	adds	r3, #1
 80087d4:	9308      	str	r3, [sp, #32]
 80087d6:	2331      	movs	r3, #49	; 0x31
 80087d8:	7013      	strb	r3, [r2, #0]
 80087da:	9b02      	ldr	r3, [sp, #8]
 80087dc:	3301      	adds	r3, #1
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	e254      	b.n	8008c8c <_dtoa_r+0x9ac>
 80087e2:	4234      	tst	r4, r6
 80087e4:	d007      	beq.n	80087f6 <_dtoa_r+0x516>
 80087e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087e8:	3301      	adds	r3, #1
 80087ea:	9310      	str	r3, [sp, #64]	; 0x40
 80087ec:	682a      	ldr	r2, [r5, #0]
 80087ee:	686b      	ldr	r3, [r5, #4]
 80087f0:	f7f8 fe82 	bl	80014f8 <__aeabi_dmul>
 80087f4:	0033      	movs	r3, r6
 80087f6:	1064      	asrs	r4, r4, #1
 80087f8:	3508      	adds	r5, #8
 80087fa:	e75a      	b.n	80086b2 <_dtoa_r+0x3d2>
 80087fc:	9e02      	ldr	r6, [sp, #8]
 80087fe:	9b07      	ldr	r3, [sp, #28]
 8008800:	e780      	b.n	8008704 <_dtoa_r+0x424>
 8008802:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008804:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008806:	1e5a      	subs	r2, r3, #1
 8008808:	4b59      	ldr	r3, [pc, #356]	; (8008970 <_dtoa_r+0x690>)
 800880a:	00d2      	lsls	r2, r2, #3
 800880c:	189b      	adds	r3, r3, r2
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	2900      	cmp	r1, #0
 8008814:	d051      	beq.n	80088ba <_dtoa_r+0x5da>
 8008816:	2000      	movs	r0, #0
 8008818:	495d      	ldr	r1, [pc, #372]	; (8008990 <_dtoa_r+0x6b0>)
 800881a:	f7f8 fa6b 	bl	8000cf4 <__aeabi_ddiv>
 800881e:	9a08      	ldr	r2, [sp, #32]
 8008820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008822:	f7f9 f8d5 	bl	80019d0 <__aeabi_dsub>
 8008826:	9a06      	ldr	r2, [sp, #24]
 8008828:	9b06      	ldr	r3, [sp, #24]
 800882a:	4694      	mov	ip, r2
 800882c:	9317      	str	r3, [sp, #92]	; 0x5c
 800882e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008830:	9010      	str	r0, [sp, #64]	; 0x40
 8008832:	9111      	str	r1, [sp, #68]	; 0x44
 8008834:	4463      	add	r3, ip
 8008836:	9319      	str	r3, [sp, #100]	; 0x64
 8008838:	0029      	movs	r1, r5
 800883a:	0020      	movs	r0, r4
 800883c:	f7f9 fc78 	bl	8002130 <__aeabi_d2iz>
 8008840:	9014      	str	r0, [sp, #80]	; 0x50
 8008842:	f7f9 fcab 	bl	800219c <__aeabi_i2d>
 8008846:	0002      	movs	r2, r0
 8008848:	000b      	movs	r3, r1
 800884a:	0020      	movs	r0, r4
 800884c:	0029      	movs	r1, r5
 800884e:	f7f9 f8bf 	bl	80019d0 <__aeabi_dsub>
 8008852:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008854:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008856:	3301      	adds	r3, #1
 8008858:	9308      	str	r3, [sp, #32]
 800885a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800885c:	0004      	movs	r4, r0
 800885e:	3330      	adds	r3, #48	; 0x30
 8008860:	7013      	strb	r3, [r2, #0]
 8008862:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008864:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008866:	000d      	movs	r5, r1
 8008868:	f7f7 fdf4 	bl	8000454 <__aeabi_dcmplt>
 800886c:	2800      	cmp	r0, #0
 800886e:	d175      	bne.n	800895c <_dtoa_r+0x67c>
 8008870:	0022      	movs	r2, r4
 8008872:	002b      	movs	r3, r5
 8008874:	2000      	movs	r0, #0
 8008876:	4940      	ldr	r1, [pc, #256]	; (8008978 <_dtoa_r+0x698>)
 8008878:	f7f9 f8aa 	bl	80019d0 <__aeabi_dsub>
 800887c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800887e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008880:	f7f7 fde8 	bl	8000454 <__aeabi_dcmplt>
 8008884:	2800      	cmp	r0, #0
 8008886:	d000      	beq.n	800888a <_dtoa_r+0x5aa>
 8008888:	e0d2      	b.n	8008a30 <_dtoa_r+0x750>
 800888a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800888c:	9a08      	ldr	r2, [sp, #32]
 800888e:	4293      	cmp	r3, r2
 8008890:	d100      	bne.n	8008894 <_dtoa_r+0x5b4>
 8008892:	e770      	b.n	8008776 <_dtoa_r+0x496>
 8008894:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008896:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008898:	2200      	movs	r2, #0
 800889a:	4b38      	ldr	r3, [pc, #224]	; (800897c <_dtoa_r+0x69c>)
 800889c:	f7f8 fe2c 	bl	80014f8 <__aeabi_dmul>
 80088a0:	4b36      	ldr	r3, [pc, #216]	; (800897c <_dtoa_r+0x69c>)
 80088a2:	9010      	str	r0, [sp, #64]	; 0x40
 80088a4:	9111      	str	r1, [sp, #68]	; 0x44
 80088a6:	2200      	movs	r2, #0
 80088a8:	0020      	movs	r0, r4
 80088aa:	0029      	movs	r1, r5
 80088ac:	f7f8 fe24 	bl	80014f8 <__aeabi_dmul>
 80088b0:	9b08      	ldr	r3, [sp, #32]
 80088b2:	0004      	movs	r4, r0
 80088b4:	000d      	movs	r5, r1
 80088b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80088b8:	e7be      	b.n	8008838 <_dtoa_r+0x558>
 80088ba:	9808      	ldr	r0, [sp, #32]
 80088bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80088be:	f7f8 fe1b 	bl	80014f8 <__aeabi_dmul>
 80088c2:	9a06      	ldr	r2, [sp, #24]
 80088c4:	9b06      	ldr	r3, [sp, #24]
 80088c6:	4694      	mov	ip, r2
 80088c8:	9308      	str	r3, [sp, #32]
 80088ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80088cc:	9010      	str	r0, [sp, #64]	; 0x40
 80088ce:	9111      	str	r1, [sp, #68]	; 0x44
 80088d0:	4463      	add	r3, ip
 80088d2:	9319      	str	r3, [sp, #100]	; 0x64
 80088d4:	0029      	movs	r1, r5
 80088d6:	0020      	movs	r0, r4
 80088d8:	f7f9 fc2a 	bl	8002130 <__aeabi_d2iz>
 80088dc:	9017      	str	r0, [sp, #92]	; 0x5c
 80088de:	f7f9 fc5d 	bl	800219c <__aeabi_i2d>
 80088e2:	0002      	movs	r2, r0
 80088e4:	000b      	movs	r3, r1
 80088e6:	0020      	movs	r0, r4
 80088e8:	0029      	movs	r1, r5
 80088ea:	f7f9 f871 	bl	80019d0 <__aeabi_dsub>
 80088ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088f0:	9a08      	ldr	r2, [sp, #32]
 80088f2:	3330      	adds	r3, #48	; 0x30
 80088f4:	7013      	strb	r3, [r2, #0]
 80088f6:	0013      	movs	r3, r2
 80088f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80088fa:	3301      	adds	r3, #1
 80088fc:	0004      	movs	r4, r0
 80088fe:	000d      	movs	r5, r1
 8008900:	9308      	str	r3, [sp, #32]
 8008902:	4293      	cmp	r3, r2
 8008904:	d12c      	bne.n	8008960 <_dtoa_r+0x680>
 8008906:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008908:	9911      	ldr	r1, [sp, #68]	; 0x44
 800890a:	9a06      	ldr	r2, [sp, #24]
 800890c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800890e:	4694      	mov	ip, r2
 8008910:	4463      	add	r3, ip
 8008912:	2200      	movs	r2, #0
 8008914:	9308      	str	r3, [sp, #32]
 8008916:	4b1e      	ldr	r3, [pc, #120]	; (8008990 <_dtoa_r+0x6b0>)
 8008918:	f7f7 feb0 	bl	800067c <__aeabi_dadd>
 800891c:	0002      	movs	r2, r0
 800891e:	000b      	movs	r3, r1
 8008920:	0020      	movs	r0, r4
 8008922:	0029      	movs	r1, r5
 8008924:	f7f7 fdaa 	bl	800047c <__aeabi_dcmpgt>
 8008928:	2800      	cmp	r0, #0
 800892a:	d000      	beq.n	800892e <_dtoa_r+0x64e>
 800892c:	e080      	b.n	8008a30 <_dtoa_r+0x750>
 800892e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008930:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008932:	2000      	movs	r0, #0
 8008934:	4916      	ldr	r1, [pc, #88]	; (8008990 <_dtoa_r+0x6b0>)
 8008936:	f7f9 f84b 	bl	80019d0 <__aeabi_dsub>
 800893a:	0002      	movs	r2, r0
 800893c:	000b      	movs	r3, r1
 800893e:	0020      	movs	r0, r4
 8008940:	0029      	movs	r1, r5
 8008942:	f7f7 fd87 	bl	8000454 <__aeabi_dcmplt>
 8008946:	2800      	cmp	r0, #0
 8008948:	d100      	bne.n	800894c <_dtoa_r+0x66c>
 800894a:	e714      	b.n	8008776 <_dtoa_r+0x496>
 800894c:	9b08      	ldr	r3, [sp, #32]
 800894e:	001a      	movs	r2, r3
 8008950:	3a01      	subs	r2, #1
 8008952:	9208      	str	r2, [sp, #32]
 8008954:	7812      	ldrb	r2, [r2, #0]
 8008956:	2a30      	cmp	r2, #48	; 0x30
 8008958:	d0f8      	beq.n	800894c <_dtoa_r+0x66c>
 800895a:	9308      	str	r3, [sp, #32]
 800895c:	9602      	str	r6, [sp, #8]
 800895e:	e055      	b.n	8008a0c <_dtoa_r+0x72c>
 8008960:	2200      	movs	r2, #0
 8008962:	4b06      	ldr	r3, [pc, #24]	; (800897c <_dtoa_r+0x69c>)
 8008964:	f7f8 fdc8 	bl	80014f8 <__aeabi_dmul>
 8008968:	0004      	movs	r4, r0
 800896a:	000d      	movs	r5, r1
 800896c:	e7b2      	b.n	80088d4 <_dtoa_r+0x5f4>
 800896e:	46c0      	nop			; (mov r8, r8)
 8008970:	0800ab70 	.word	0x0800ab70
 8008974:	0800ab48 	.word	0x0800ab48
 8008978:	3ff00000 	.word	0x3ff00000
 800897c:	40240000 	.word	0x40240000
 8008980:	401c0000 	.word	0x401c0000
 8008984:	fcc00000 	.word	0xfcc00000
 8008988:	40140000 	.word	0x40140000
 800898c:	7cc00000 	.word	0x7cc00000
 8008990:	3fe00000 	.word	0x3fe00000
 8008994:	9b07      	ldr	r3, [sp, #28]
 8008996:	9e06      	ldr	r6, [sp, #24]
 8008998:	3b01      	subs	r3, #1
 800899a:	199b      	adds	r3, r3, r6
 800899c:	930c      	str	r3, [sp, #48]	; 0x30
 800899e:	9c08      	ldr	r4, [sp, #32]
 80089a0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80089a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089a6:	0020      	movs	r0, r4
 80089a8:	0029      	movs	r1, r5
 80089aa:	f7f8 f9a3 	bl	8000cf4 <__aeabi_ddiv>
 80089ae:	f7f9 fbbf 	bl	8002130 <__aeabi_d2iz>
 80089b2:	9007      	str	r0, [sp, #28]
 80089b4:	f7f9 fbf2 	bl	800219c <__aeabi_i2d>
 80089b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089bc:	f7f8 fd9c 	bl	80014f8 <__aeabi_dmul>
 80089c0:	0002      	movs	r2, r0
 80089c2:	000b      	movs	r3, r1
 80089c4:	0020      	movs	r0, r4
 80089c6:	0029      	movs	r1, r5
 80089c8:	f7f9 f802 	bl	80019d0 <__aeabi_dsub>
 80089cc:	0033      	movs	r3, r6
 80089ce:	9a07      	ldr	r2, [sp, #28]
 80089d0:	3601      	adds	r6, #1
 80089d2:	3230      	adds	r2, #48	; 0x30
 80089d4:	701a      	strb	r2, [r3, #0]
 80089d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089d8:	9608      	str	r6, [sp, #32]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d139      	bne.n	8008a52 <_dtoa_r+0x772>
 80089de:	0002      	movs	r2, r0
 80089e0:	000b      	movs	r3, r1
 80089e2:	f7f7 fe4b 	bl	800067c <__aeabi_dadd>
 80089e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ea:	0004      	movs	r4, r0
 80089ec:	000d      	movs	r5, r1
 80089ee:	f7f7 fd45 	bl	800047c <__aeabi_dcmpgt>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d11b      	bne.n	8008a2e <_dtoa_r+0x74e>
 80089f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089fa:	0020      	movs	r0, r4
 80089fc:	0029      	movs	r1, r5
 80089fe:	f7f7 fd23 	bl	8000448 <__aeabi_dcmpeq>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d002      	beq.n	8008a0c <_dtoa_r+0x72c>
 8008a06:	9b07      	ldr	r3, [sp, #28]
 8008a08:	07db      	lsls	r3, r3, #31
 8008a0a:	d410      	bmi.n	8008a2e <_dtoa_r+0x74e>
 8008a0c:	0038      	movs	r0, r7
 8008a0e:	9905      	ldr	r1, [sp, #20]
 8008a10:	f000 fae6 	bl	8008fe0 <_Bfree>
 8008a14:	2300      	movs	r3, #0
 8008a16:	9a08      	ldr	r2, [sp, #32]
 8008a18:	9802      	ldr	r0, [sp, #8]
 8008a1a:	7013      	strb	r3, [r2, #0]
 8008a1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008a1e:	3001      	adds	r0, #1
 8008a20:	6018      	str	r0, [r3, #0]
 8008a22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d100      	bne.n	8008a2a <_dtoa_r+0x74a>
 8008a28:	e4a6      	b.n	8008378 <_dtoa_r+0x98>
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	e4a4      	b.n	8008378 <_dtoa_r+0x98>
 8008a2e:	9e02      	ldr	r6, [sp, #8]
 8008a30:	9b08      	ldr	r3, [sp, #32]
 8008a32:	9308      	str	r3, [sp, #32]
 8008a34:	3b01      	subs	r3, #1
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	2a39      	cmp	r2, #57	; 0x39
 8008a3a:	d106      	bne.n	8008a4a <_dtoa_r+0x76a>
 8008a3c:	9a06      	ldr	r2, [sp, #24]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d1f7      	bne.n	8008a32 <_dtoa_r+0x752>
 8008a42:	2230      	movs	r2, #48	; 0x30
 8008a44:	9906      	ldr	r1, [sp, #24]
 8008a46:	3601      	adds	r6, #1
 8008a48:	700a      	strb	r2, [r1, #0]
 8008a4a:	781a      	ldrb	r2, [r3, #0]
 8008a4c:	3201      	adds	r2, #1
 8008a4e:	701a      	strb	r2, [r3, #0]
 8008a50:	e784      	b.n	800895c <_dtoa_r+0x67c>
 8008a52:	2200      	movs	r2, #0
 8008a54:	4baa      	ldr	r3, [pc, #680]	; (8008d00 <_dtoa_r+0xa20>)
 8008a56:	f7f8 fd4f 	bl	80014f8 <__aeabi_dmul>
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	0004      	movs	r4, r0
 8008a60:	000d      	movs	r5, r1
 8008a62:	f7f7 fcf1 	bl	8000448 <__aeabi_dcmpeq>
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d09b      	beq.n	80089a2 <_dtoa_r+0x6c2>
 8008a6a:	e7cf      	b.n	8008a0c <_dtoa_r+0x72c>
 8008a6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008a6e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008a70:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008a72:	2d00      	cmp	r5, #0
 8008a74:	d012      	beq.n	8008a9c <_dtoa_r+0x7bc>
 8008a76:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008a78:	2a01      	cmp	r2, #1
 8008a7a:	dc66      	bgt.n	8008b4a <_dtoa_r+0x86a>
 8008a7c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008a7e:	2a00      	cmp	r2, #0
 8008a80:	d05d      	beq.n	8008b3e <_dtoa_r+0x85e>
 8008a82:	4aa0      	ldr	r2, [pc, #640]	; (8008d04 <_dtoa_r+0xa24>)
 8008a84:	189b      	adds	r3, r3, r2
 8008a86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008a88:	2101      	movs	r1, #1
 8008a8a:	18d2      	adds	r2, r2, r3
 8008a8c:	920a      	str	r2, [sp, #40]	; 0x28
 8008a8e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a90:	0038      	movs	r0, r7
 8008a92:	18d3      	adds	r3, r2, r3
 8008a94:	930d      	str	r3, [sp, #52]	; 0x34
 8008a96:	f000 fb53 	bl	8009140 <__i2b>
 8008a9a:	0005      	movs	r5, r0
 8008a9c:	2c00      	cmp	r4, #0
 8008a9e:	dd0e      	ble.n	8008abe <_dtoa_r+0x7de>
 8008aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dd0b      	ble.n	8008abe <_dtoa_r+0x7de>
 8008aa6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008aa8:	0023      	movs	r3, r4
 8008aaa:	4294      	cmp	r4, r2
 8008aac:	dd00      	ble.n	8008ab0 <_dtoa_r+0x7d0>
 8008aae:	0013      	movs	r3, r2
 8008ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ab2:	1ae4      	subs	r4, r4, r3
 8008ab4:	1ad2      	subs	r2, r2, r3
 8008ab6:	920a      	str	r2, [sp, #40]	; 0x28
 8008ab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	930d      	str	r3, [sp, #52]	; 0x34
 8008abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d01f      	beq.n	8008b04 <_dtoa_r+0x824>
 8008ac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d054      	beq.n	8008b74 <_dtoa_r+0x894>
 8008aca:	2e00      	cmp	r6, #0
 8008acc:	dd11      	ble.n	8008af2 <_dtoa_r+0x812>
 8008ace:	0029      	movs	r1, r5
 8008ad0:	0032      	movs	r2, r6
 8008ad2:	0038      	movs	r0, r7
 8008ad4:	f000 fbfa 	bl	80092cc <__pow5mult>
 8008ad8:	9a05      	ldr	r2, [sp, #20]
 8008ada:	0001      	movs	r1, r0
 8008adc:	0005      	movs	r5, r0
 8008ade:	0038      	movs	r0, r7
 8008ae0:	f000 fb44 	bl	800916c <__multiply>
 8008ae4:	9905      	ldr	r1, [sp, #20]
 8008ae6:	9014      	str	r0, [sp, #80]	; 0x50
 8008ae8:	0038      	movs	r0, r7
 8008aea:	f000 fa79 	bl	8008fe0 <_Bfree>
 8008aee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008af0:	9305      	str	r3, [sp, #20]
 8008af2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008af4:	1b9a      	subs	r2, r3, r6
 8008af6:	42b3      	cmp	r3, r6
 8008af8:	d004      	beq.n	8008b04 <_dtoa_r+0x824>
 8008afa:	0038      	movs	r0, r7
 8008afc:	9905      	ldr	r1, [sp, #20]
 8008afe:	f000 fbe5 	bl	80092cc <__pow5mult>
 8008b02:	9005      	str	r0, [sp, #20]
 8008b04:	2101      	movs	r1, #1
 8008b06:	0038      	movs	r0, r7
 8008b08:	f000 fb1a 	bl	8009140 <__i2b>
 8008b0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b0e:	0006      	movs	r6, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	dd31      	ble.n	8008b78 <_dtoa_r+0x898>
 8008b14:	001a      	movs	r2, r3
 8008b16:	0001      	movs	r1, r0
 8008b18:	0038      	movs	r0, r7
 8008b1a:	f000 fbd7 	bl	80092cc <__pow5mult>
 8008b1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b20:	0006      	movs	r6, r0
 8008b22:	2b01      	cmp	r3, #1
 8008b24:	dd2d      	ble.n	8008b82 <_dtoa_r+0x8a2>
 8008b26:	2300      	movs	r3, #0
 8008b28:	930e      	str	r3, [sp, #56]	; 0x38
 8008b2a:	6933      	ldr	r3, [r6, #16]
 8008b2c:	3303      	adds	r3, #3
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	18f3      	adds	r3, r6, r3
 8008b32:	6858      	ldr	r0, [r3, #4]
 8008b34:	f000 fabc 	bl	80090b0 <__hi0bits>
 8008b38:	2320      	movs	r3, #32
 8008b3a:	1a18      	subs	r0, r3, r0
 8008b3c:	e039      	b.n	8008bb2 <_dtoa_r+0x8d2>
 8008b3e:	2336      	movs	r3, #54	; 0x36
 8008b40:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008b42:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8008b44:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b46:	1a9b      	subs	r3, r3, r2
 8008b48:	e79d      	b.n	8008a86 <_dtoa_r+0x7a6>
 8008b4a:	9b07      	ldr	r3, [sp, #28]
 8008b4c:	1e5e      	subs	r6, r3, #1
 8008b4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b50:	42b3      	cmp	r3, r6
 8008b52:	db07      	blt.n	8008b64 <_dtoa_r+0x884>
 8008b54:	1b9e      	subs	r6, r3, r6
 8008b56:	9b07      	ldr	r3, [sp, #28]
 8008b58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	da93      	bge.n	8008a86 <_dtoa_r+0x7a6>
 8008b5e:	1ae4      	subs	r4, r4, r3
 8008b60:	2300      	movs	r3, #0
 8008b62:	e790      	b.n	8008a86 <_dtoa_r+0x7a6>
 8008b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008b68:	1af3      	subs	r3, r6, r3
 8008b6a:	18d3      	adds	r3, r2, r3
 8008b6c:	960e      	str	r6, [sp, #56]	; 0x38
 8008b6e:	9315      	str	r3, [sp, #84]	; 0x54
 8008b70:	2600      	movs	r6, #0
 8008b72:	e7f0      	b.n	8008b56 <_dtoa_r+0x876>
 8008b74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b76:	e7c0      	b.n	8008afa <_dtoa_r+0x81a>
 8008b78:	2300      	movs	r3, #0
 8008b7a:	930e      	str	r3, [sp, #56]	; 0x38
 8008b7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	dc13      	bgt.n	8008baa <_dtoa_r+0x8ca>
 8008b82:	2300      	movs	r3, #0
 8008b84:	930e      	str	r3, [sp, #56]	; 0x38
 8008b86:	9b08      	ldr	r3, [sp, #32]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10e      	bne.n	8008baa <_dtoa_r+0x8ca>
 8008b8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b8e:	031b      	lsls	r3, r3, #12
 8008b90:	d10b      	bne.n	8008baa <_dtoa_r+0x8ca>
 8008b92:	4b5d      	ldr	r3, [pc, #372]	; (8008d08 <_dtoa_r+0xa28>)
 8008b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b96:	4213      	tst	r3, r2
 8008b98:	d007      	beq.n	8008baa <_dtoa_r+0x8ca>
 8008b9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	930a      	str	r3, [sp, #40]	; 0x28
 8008ba0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	930d      	str	r3, [sp, #52]	; 0x34
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	930e      	str	r3, [sp, #56]	; 0x38
 8008baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008bac:	2001      	movs	r0, #1
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1bb      	bne.n	8008b2a <_dtoa_r+0x84a>
 8008bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bb4:	221f      	movs	r2, #31
 8008bb6:	1818      	adds	r0, r3, r0
 8008bb8:	0003      	movs	r3, r0
 8008bba:	4013      	ands	r3, r2
 8008bbc:	4210      	tst	r0, r2
 8008bbe:	d046      	beq.n	8008c4e <_dtoa_r+0x96e>
 8008bc0:	3201      	adds	r2, #1
 8008bc2:	1ad2      	subs	r2, r2, r3
 8008bc4:	2a04      	cmp	r2, #4
 8008bc6:	dd3f      	ble.n	8008c48 <_dtoa_r+0x968>
 8008bc8:	221c      	movs	r2, #28
 8008bca:	1ad3      	subs	r3, r2, r3
 8008bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bce:	18e4      	adds	r4, r4, r3
 8008bd0:	18d2      	adds	r2, r2, r3
 8008bd2:	920a      	str	r2, [sp, #40]	; 0x28
 8008bd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bd6:	18d3      	adds	r3, r2, r3
 8008bd8:	930d      	str	r3, [sp, #52]	; 0x34
 8008bda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	dd05      	ble.n	8008bec <_dtoa_r+0x90c>
 8008be0:	001a      	movs	r2, r3
 8008be2:	0038      	movs	r0, r7
 8008be4:	9905      	ldr	r1, [sp, #20]
 8008be6:	f000 fbcd 	bl	8009384 <__lshift>
 8008bea:	9005      	str	r0, [sp, #20]
 8008bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	dd05      	ble.n	8008bfe <_dtoa_r+0x91e>
 8008bf2:	0031      	movs	r1, r6
 8008bf4:	001a      	movs	r2, r3
 8008bf6:	0038      	movs	r0, r7
 8008bf8:	f000 fbc4 	bl	8009384 <__lshift>
 8008bfc:	0006      	movs	r6, r0
 8008bfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d026      	beq.n	8008c52 <_dtoa_r+0x972>
 8008c04:	0031      	movs	r1, r6
 8008c06:	9805      	ldr	r0, [sp, #20]
 8008c08:	f000 fc2a 	bl	8009460 <__mcmp>
 8008c0c:	2800      	cmp	r0, #0
 8008c0e:	da20      	bge.n	8008c52 <_dtoa_r+0x972>
 8008c10:	9b02      	ldr	r3, [sp, #8]
 8008c12:	220a      	movs	r2, #10
 8008c14:	3b01      	subs	r3, #1
 8008c16:	9302      	str	r3, [sp, #8]
 8008c18:	0038      	movs	r0, r7
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	9905      	ldr	r1, [sp, #20]
 8008c1e:	f000 fa03 	bl	8009028 <__multadd>
 8008c22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008c24:	9005      	str	r0, [sp, #20]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d100      	bne.n	8008c2c <_dtoa_r+0x94c>
 8008c2a:	e166      	b.n	8008efa <_dtoa_r+0xc1a>
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	0029      	movs	r1, r5
 8008c30:	220a      	movs	r2, #10
 8008c32:	0038      	movs	r0, r7
 8008c34:	f000 f9f8 	bl	8009028 <__multadd>
 8008c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c3a:	0005      	movs	r5, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	dc47      	bgt.n	8008cd0 <_dtoa_r+0x9f0>
 8008c40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	dc0d      	bgt.n	8008c62 <_dtoa_r+0x982>
 8008c46:	e043      	b.n	8008cd0 <_dtoa_r+0x9f0>
 8008c48:	2a04      	cmp	r2, #4
 8008c4a:	d0c6      	beq.n	8008bda <_dtoa_r+0x8fa>
 8008c4c:	0013      	movs	r3, r2
 8008c4e:	331c      	adds	r3, #28
 8008c50:	e7bc      	b.n	8008bcc <_dtoa_r+0x8ec>
 8008c52:	9b07      	ldr	r3, [sp, #28]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	dc35      	bgt.n	8008cc4 <_dtoa_r+0x9e4>
 8008c58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	dd32      	ble.n	8008cc4 <_dtoa_r+0x9e4>
 8008c5e:	9b07      	ldr	r3, [sp, #28]
 8008c60:	930c      	str	r3, [sp, #48]	; 0x30
 8008c62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10c      	bne.n	8008c82 <_dtoa_r+0x9a2>
 8008c68:	0031      	movs	r1, r6
 8008c6a:	2205      	movs	r2, #5
 8008c6c:	0038      	movs	r0, r7
 8008c6e:	f000 f9db 	bl	8009028 <__multadd>
 8008c72:	0006      	movs	r6, r0
 8008c74:	0001      	movs	r1, r0
 8008c76:	9805      	ldr	r0, [sp, #20]
 8008c78:	f000 fbf2 	bl	8009460 <__mcmp>
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	dd00      	ble.n	8008c82 <_dtoa_r+0x9a2>
 8008c80:	e5a5      	b.n	80087ce <_dtoa_r+0x4ee>
 8008c82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008c84:	43db      	mvns	r3, r3
 8008c86:	9302      	str	r3, [sp, #8]
 8008c88:	9b06      	ldr	r3, [sp, #24]
 8008c8a:	9308      	str	r3, [sp, #32]
 8008c8c:	2400      	movs	r4, #0
 8008c8e:	0031      	movs	r1, r6
 8008c90:	0038      	movs	r0, r7
 8008c92:	f000 f9a5 	bl	8008fe0 <_Bfree>
 8008c96:	2d00      	cmp	r5, #0
 8008c98:	d100      	bne.n	8008c9c <_dtoa_r+0x9bc>
 8008c9a:	e6b7      	b.n	8008a0c <_dtoa_r+0x72c>
 8008c9c:	2c00      	cmp	r4, #0
 8008c9e:	d005      	beq.n	8008cac <_dtoa_r+0x9cc>
 8008ca0:	42ac      	cmp	r4, r5
 8008ca2:	d003      	beq.n	8008cac <_dtoa_r+0x9cc>
 8008ca4:	0021      	movs	r1, r4
 8008ca6:	0038      	movs	r0, r7
 8008ca8:	f000 f99a 	bl	8008fe0 <_Bfree>
 8008cac:	0029      	movs	r1, r5
 8008cae:	0038      	movs	r0, r7
 8008cb0:	f000 f996 	bl	8008fe0 <_Bfree>
 8008cb4:	e6aa      	b.n	8008a0c <_dtoa_r+0x72c>
 8008cb6:	2600      	movs	r6, #0
 8008cb8:	0035      	movs	r5, r6
 8008cba:	e7e2      	b.n	8008c82 <_dtoa_r+0x9a2>
 8008cbc:	9602      	str	r6, [sp, #8]
 8008cbe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8008cc0:	0035      	movs	r5, r6
 8008cc2:	e584      	b.n	80087ce <_dtoa_r+0x4ee>
 8008cc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d100      	bne.n	8008ccc <_dtoa_r+0x9ec>
 8008cca:	e0ce      	b.n	8008e6a <_dtoa_r+0xb8a>
 8008ccc:	9b07      	ldr	r3, [sp, #28]
 8008cce:	930c      	str	r3, [sp, #48]	; 0x30
 8008cd0:	2c00      	cmp	r4, #0
 8008cd2:	dd05      	ble.n	8008ce0 <_dtoa_r+0xa00>
 8008cd4:	0029      	movs	r1, r5
 8008cd6:	0022      	movs	r2, r4
 8008cd8:	0038      	movs	r0, r7
 8008cda:	f000 fb53 	bl	8009384 <__lshift>
 8008cde:	0005      	movs	r5, r0
 8008ce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008ce2:	0028      	movs	r0, r5
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d022      	beq.n	8008d2e <_dtoa_r+0xa4e>
 8008ce8:	0038      	movs	r0, r7
 8008cea:	6869      	ldr	r1, [r5, #4]
 8008cec:	f000 f934 	bl	8008f58 <_Balloc>
 8008cf0:	1e04      	subs	r4, r0, #0
 8008cf2:	d10f      	bne.n	8008d14 <_dtoa_r+0xa34>
 8008cf4:	0002      	movs	r2, r0
 8008cf6:	4b05      	ldr	r3, [pc, #20]	; (8008d0c <_dtoa_r+0xa2c>)
 8008cf8:	4905      	ldr	r1, [pc, #20]	; (8008d10 <_dtoa_r+0xa30>)
 8008cfa:	f7ff fb06 	bl	800830a <_dtoa_r+0x2a>
 8008cfe:	46c0      	nop			; (mov r8, r8)
 8008d00:	40240000 	.word	0x40240000
 8008d04:	00000433 	.word	0x00000433
 8008d08:	7ff00000 	.word	0x7ff00000
 8008d0c:	0800aadb 	.word	0x0800aadb
 8008d10:	000002ea 	.word	0x000002ea
 8008d14:	0029      	movs	r1, r5
 8008d16:	692b      	ldr	r3, [r5, #16]
 8008d18:	310c      	adds	r1, #12
 8008d1a:	1c9a      	adds	r2, r3, #2
 8008d1c:	0092      	lsls	r2, r2, #2
 8008d1e:	300c      	adds	r0, #12
 8008d20:	f000 f911 	bl	8008f46 <memcpy>
 8008d24:	2201      	movs	r2, #1
 8008d26:	0021      	movs	r1, r4
 8008d28:	0038      	movs	r0, r7
 8008d2a:	f000 fb2b 	bl	8009384 <__lshift>
 8008d2e:	9b06      	ldr	r3, [sp, #24]
 8008d30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d32:	930a      	str	r3, [sp, #40]	; 0x28
 8008d34:	3b01      	subs	r3, #1
 8008d36:	189b      	adds	r3, r3, r2
 8008d38:	2201      	movs	r2, #1
 8008d3a:	002c      	movs	r4, r5
 8008d3c:	0005      	movs	r5, r0
 8008d3e:	9314      	str	r3, [sp, #80]	; 0x50
 8008d40:	9b08      	ldr	r3, [sp, #32]
 8008d42:	4013      	ands	r3, r2
 8008d44:	930f      	str	r3, [sp, #60]	; 0x3c
 8008d46:	0031      	movs	r1, r6
 8008d48:	9805      	ldr	r0, [sp, #20]
 8008d4a:	f7ff fa3d 	bl	80081c8 <quorem>
 8008d4e:	0003      	movs	r3, r0
 8008d50:	0021      	movs	r1, r4
 8008d52:	3330      	adds	r3, #48	; 0x30
 8008d54:	900d      	str	r0, [sp, #52]	; 0x34
 8008d56:	9805      	ldr	r0, [sp, #20]
 8008d58:	9307      	str	r3, [sp, #28]
 8008d5a:	f000 fb81 	bl	8009460 <__mcmp>
 8008d5e:	002a      	movs	r2, r5
 8008d60:	900e      	str	r0, [sp, #56]	; 0x38
 8008d62:	0031      	movs	r1, r6
 8008d64:	0038      	movs	r0, r7
 8008d66:	f000 fb97 	bl	8009498 <__mdiff>
 8008d6a:	68c3      	ldr	r3, [r0, #12]
 8008d6c:	9008      	str	r0, [sp, #32]
 8008d6e:	9310      	str	r3, [sp, #64]	; 0x40
 8008d70:	2301      	movs	r3, #1
 8008d72:	930c      	str	r3, [sp, #48]	; 0x30
 8008d74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d104      	bne.n	8008d84 <_dtoa_r+0xaa4>
 8008d7a:	0001      	movs	r1, r0
 8008d7c:	9805      	ldr	r0, [sp, #20]
 8008d7e:	f000 fb6f 	bl	8009460 <__mcmp>
 8008d82:	900c      	str	r0, [sp, #48]	; 0x30
 8008d84:	0038      	movs	r0, r7
 8008d86:	9908      	ldr	r1, [sp, #32]
 8008d88:	f000 f92a 	bl	8008fe0 <_Bfree>
 8008d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d90:	3301      	adds	r3, #1
 8008d92:	9308      	str	r3, [sp, #32]
 8008d94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008d96:	4313      	orrs	r3, r2
 8008d98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	d10c      	bne.n	8008db8 <_dtoa_r+0xad8>
 8008d9e:	9b07      	ldr	r3, [sp, #28]
 8008da0:	2b39      	cmp	r3, #57	; 0x39
 8008da2:	d026      	beq.n	8008df2 <_dtoa_r+0xb12>
 8008da4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	dd02      	ble.n	8008db0 <_dtoa_r+0xad0>
 8008daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dac:	3331      	adds	r3, #49	; 0x31
 8008dae:	9307      	str	r3, [sp, #28]
 8008db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008db2:	9a07      	ldr	r2, [sp, #28]
 8008db4:	701a      	strb	r2, [r3, #0]
 8008db6:	e76a      	b.n	8008c8e <_dtoa_r+0x9ae>
 8008db8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	db04      	blt.n	8008dc8 <_dtoa_r+0xae8>
 8008dbe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008dc4:	4313      	orrs	r3, r2
 8008dc6:	d11f      	bne.n	8008e08 <_dtoa_r+0xb28>
 8008dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	ddf0      	ble.n	8008db0 <_dtoa_r+0xad0>
 8008dce:	9905      	ldr	r1, [sp, #20]
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	0038      	movs	r0, r7
 8008dd4:	f000 fad6 	bl	8009384 <__lshift>
 8008dd8:	0031      	movs	r1, r6
 8008dda:	9005      	str	r0, [sp, #20]
 8008ddc:	f000 fb40 	bl	8009460 <__mcmp>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	dc03      	bgt.n	8008dec <_dtoa_r+0xb0c>
 8008de4:	d1e4      	bne.n	8008db0 <_dtoa_r+0xad0>
 8008de6:	9b07      	ldr	r3, [sp, #28]
 8008de8:	07db      	lsls	r3, r3, #31
 8008dea:	d5e1      	bpl.n	8008db0 <_dtoa_r+0xad0>
 8008dec:	9b07      	ldr	r3, [sp, #28]
 8008dee:	2b39      	cmp	r3, #57	; 0x39
 8008df0:	d1db      	bne.n	8008daa <_dtoa_r+0xaca>
 8008df2:	2339      	movs	r3, #57	; 0x39
 8008df4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008df6:	7013      	strb	r3, [r2, #0]
 8008df8:	9b08      	ldr	r3, [sp, #32]
 8008dfa:	9308      	str	r3, [sp, #32]
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	781a      	ldrb	r2, [r3, #0]
 8008e00:	2a39      	cmp	r2, #57	; 0x39
 8008e02:	d068      	beq.n	8008ed6 <_dtoa_r+0xbf6>
 8008e04:	3201      	adds	r2, #1
 8008e06:	e7d5      	b.n	8008db4 <_dtoa_r+0xad4>
 8008e08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	dd07      	ble.n	8008e1e <_dtoa_r+0xb3e>
 8008e0e:	9b07      	ldr	r3, [sp, #28]
 8008e10:	2b39      	cmp	r3, #57	; 0x39
 8008e12:	d0ee      	beq.n	8008df2 <_dtoa_r+0xb12>
 8008e14:	9b07      	ldr	r3, [sp, #28]
 8008e16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e18:	3301      	adds	r3, #1
 8008e1a:	7013      	strb	r3, [r2, #0]
 8008e1c:	e737      	b.n	8008c8e <_dtoa_r+0x9ae>
 8008e1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e20:	9a07      	ldr	r2, [sp, #28]
 8008e22:	701a      	strb	r2, [r3, #0]
 8008e24:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d03e      	beq.n	8008eaa <_dtoa_r+0xbca>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	220a      	movs	r2, #10
 8008e30:	9905      	ldr	r1, [sp, #20]
 8008e32:	0038      	movs	r0, r7
 8008e34:	f000 f8f8 	bl	8009028 <__multadd>
 8008e38:	2300      	movs	r3, #0
 8008e3a:	9005      	str	r0, [sp, #20]
 8008e3c:	220a      	movs	r2, #10
 8008e3e:	0021      	movs	r1, r4
 8008e40:	0038      	movs	r0, r7
 8008e42:	42ac      	cmp	r4, r5
 8008e44:	d106      	bne.n	8008e54 <_dtoa_r+0xb74>
 8008e46:	f000 f8ef 	bl	8009028 <__multadd>
 8008e4a:	0004      	movs	r4, r0
 8008e4c:	0005      	movs	r5, r0
 8008e4e:	9b08      	ldr	r3, [sp, #32]
 8008e50:	930a      	str	r3, [sp, #40]	; 0x28
 8008e52:	e778      	b.n	8008d46 <_dtoa_r+0xa66>
 8008e54:	f000 f8e8 	bl	8009028 <__multadd>
 8008e58:	0029      	movs	r1, r5
 8008e5a:	0004      	movs	r4, r0
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	220a      	movs	r2, #10
 8008e60:	0038      	movs	r0, r7
 8008e62:	f000 f8e1 	bl	8009028 <__multadd>
 8008e66:	0005      	movs	r5, r0
 8008e68:	e7f1      	b.n	8008e4e <_dtoa_r+0xb6e>
 8008e6a:	9b07      	ldr	r3, [sp, #28]
 8008e6c:	930c      	str	r3, [sp, #48]	; 0x30
 8008e6e:	2400      	movs	r4, #0
 8008e70:	0031      	movs	r1, r6
 8008e72:	9805      	ldr	r0, [sp, #20]
 8008e74:	f7ff f9a8 	bl	80081c8 <quorem>
 8008e78:	9b06      	ldr	r3, [sp, #24]
 8008e7a:	3030      	adds	r0, #48	; 0x30
 8008e7c:	5518      	strb	r0, [r3, r4]
 8008e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e80:	3401      	adds	r4, #1
 8008e82:	9007      	str	r0, [sp, #28]
 8008e84:	42a3      	cmp	r3, r4
 8008e86:	dd07      	ble.n	8008e98 <_dtoa_r+0xbb8>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	220a      	movs	r2, #10
 8008e8c:	0038      	movs	r0, r7
 8008e8e:	9905      	ldr	r1, [sp, #20]
 8008e90:	f000 f8ca 	bl	8009028 <__multadd>
 8008e94:	9005      	str	r0, [sp, #20]
 8008e96:	e7eb      	b.n	8008e70 <_dtoa_r+0xb90>
 8008e98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e9a:	2001      	movs	r0, #1
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	dd00      	ble.n	8008ea2 <_dtoa_r+0xbc2>
 8008ea0:	0018      	movs	r0, r3
 8008ea2:	2400      	movs	r4, #0
 8008ea4:	9b06      	ldr	r3, [sp, #24]
 8008ea6:	181b      	adds	r3, r3, r0
 8008ea8:	9308      	str	r3, [sp, #32]
 8008eaa:	9905      	ldr	r1, [sp, #20]
 8008eac:	2201      	movs	r2, #1
 8008eae:	0038      	movs	r0, r7
 8008eb0:	f000 fa68 	bl	8009384 <__lshift>
 8008eb4:	0031      	movs	r1, r6
 8008eb6:	9005      	str	r0, [sp, #20]
 8008eb8:	f000 fad2 	bl	8009460 <__mcmp>
 8008ebc:	2800      	cmp	r0, #0
 8008ebe:	dc9b      	bgt.n	8008df8 <_dtoa_r+0xb18>
 8008ec0:	d102      	bne.n	8008ec8 <_dtoa_r+0xbe8>
 8008ec2:	9b07      	ldr	r3, [sp, #28]
 8008ec4:	07db      	lsls	r3, r3, #31
 8008ec6:	d497      	bmi.n	8008df8 <_dtoa_r+0xb18>
 8008ec8:	9b08      	ldr	r3, [sp, #32]
 8008eca:	9308      	str	r3, [sp, #32]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	781a      	ldrb	r2, [r3, #0]
 8008ed0:	2a30      	cmp	r2, #48	; 0x30
 8008ed2:	d0fa      	beq.n	8008eca <_dtoa_r+0xbea>
 8008ed4:	e6db      	b.n	8008c8e <_dtoa_r+0x9ae>
 8008ed6:	9a06      	ldr	r2, [sp, #24]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d18e      	bne.n	8008dfa <_dtoa_r+0xb1a>
 8008edc:	9b02      	ldr	r3, [sp, #8]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	9302      	str	r3, [sp, #8]
 8008ee2:	2331      	movs	r3, #49	; 0x31
 8008ee4:	e799      	b.n	8008e1a <_dtoa_r+0xb3a>
 8008ee6:	4b09      	ldr	r3, [pc, #36]	; (8008f0c <_dtoa_r+0xc2c>)
 8008ee8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008eea:	9306      	str	r3, [sp, #24]
 8008eec:	4b08      	ldr	r3, [pc, #32]	; (8008f10 <_dtoa_r+0xc30>)
 8008eee:	2a00      	cmp	r2, #0
 8008ef0:	d001      	beq.n	8008ef6 <_dtoa_r+0xc16>
 8008ef2:	f7ff fa3f 	bl	8008374 <_dtoa_r+0x94>
 8008ef6:	f7ff fa3f 	bl	8008378 <_dtoa_r+0x98>
 8008efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	dcb6      	bgt.n	8008e6e <_dtoa_r+0xb8e>
 8008f00:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	dd00      	ble.n	8008f08 <_dtoa_r+0xc28>
 8008f06:	e6ac      	b.n	8008c62 <_dtoa_r+0x982>
 8008f08:	e7b1      	b.n	8008e6e <_dtoa_r+0xb8e>
 8008f0a:	46c0      	nop			; (mov r8, r8)
 8008f0c:	0800aa5c 	.word	0x0800aa5c
 8008f10:	0800aa64 	.word	0x0800aa64

08008f14 <_localeconv_r>:
 8008f14:	4800      	ldr	r0, [pc, #0]	; (8008f18 <_localeconv_r+0x4>)
 8008f16:	4770      	bx	lr
 8008f18:	20000164 	.word	0x20000164

08008f1c <malloc>:
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	4b03      	ldr	r3, [pc, #12]	; (8008f2c <malloc+0x10>)
 8008f20:	0001      	movs	r1, r0
 8008f22:	6818      	ldr	r0, [r3, #0]
 8008f24:	f000 fc4c 	bl	80097c0 <_malloc_r>
 8008f28:	bd10      	pop	{r4, pc}
 8008f2a:	46c0      	nop			; (mov r8, r8)
 8008f2c:	20000010 	.word	0x20000010

08008f30 <memchr>:
 8008f30:	b2c9      	uxtb	r1, r1
 8008f32:	1882      	adds	r2, r0, r2
 8008f34:	4290      	cmp	r0, r2
 8008f36:	d101      	bne.n	8008f3c <memchr+0xc>
 8008f38:	2000      	movs	r0, #0
 8008f3a:	4770      	bx	lr
 8008f3c:	7803      	ldrb	r3, [r0, #0]
 8008f3e:	428b      	cmp	r3, r1
 8008f40:	d0fb      	beq.n	8008f3a <memchr+0xa>
 8008f42:	3001      	adds	r0, #1
 8008f44:	e7f6      	b.n	8008f34 <memchr+0x4>

08008f46 <memcpy>:
 8008f46:	2300      	movs	r3, #0
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	429a      	cmp	r2, r3
 8008f4c:	d100      	bne.n	8008f50 <memcpy+0xa>
 8008f4e:	bd10      	pop	{r4, pc}
 8008f50:	5ccc      	ldrb	r4, [r1, r3]
 8008f52:	54c4      	strb	r4, [r0, r3]
 8008f54:	3301      	adds	r3, #1
 8008f56:	e7f8      	b.n	8008f4a <memcpy+0x4>

08008f58 <_Balloc>:
 8008f58:	b570      	push	{r4, r5, r6, lr}
 8008f5a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f5c:	0006      	movs	r6, r0
 8008f5e:	000c      	movs	r4, r1
 8008f60:	2d00      	cmp	r5, #0
 8008f62:	d10e      	bne.n	8008f82 <_Balloc+0x2a>
 8008f64:	2010      	movs	r0, #16
 8008f66:	f7ff ffd9 	bl	8008f1c <malloc>
 8008f6a:	1e02      	subs	r2, r0, #0
 8008f6c:	6270      	str	r0, [r6, #36]	; 0x24
 8008f6e:	d104      	bne.n	8008f7a <_Balloc+0x22>
 8008f70:	2166      	movs	r1, #102	; 0x66
 8008f72:	4b19      	ldr	r3, [pc, #100]	; (8008fd8 <_Balloc+0x80>)
 8008f74:	4819      	ldr	r0, [pc, #100]	; (8008fdc <_Balloc+0x84>)
 8008f76:	f000 fe0d 	bl	8009b94 <__assert_func>
 8008f7a:	6045      	str	r5, [r0, #4]
 8008f7c:	6085      	str	r5, [r0, #8]
 8008f7e:	6005      	str	r5, [r0, #0]
 8008f80:	60c5      	str	r5, [r0, #12]
 8008f82:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008f84:	68eb      	ldr	r3, [r5, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d013      	beq.n	8008fb2 <_Balloc+0x5a>
 8008f8a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f8c:	00a2      	lsls	r2, r4, #2
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	189b      	adds	r3, r3, r2
 8008f92:	6818      	ldr	r0, [r3, #0]
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d118      	bne.n	8008fca <_Balloc+0x72>
 8008f98:	2101      	movs	r1, #1
 8008f9a:	000d      	movs	r5, r1
 8008f9c:	40a5      	lsls	r5, r4
 8008f9e:	1d6a      	adds	r2, r5, #5
 8008fa0:	0030      	movs	r0, r6
 8008fa2:	0092      	lsls	r2, r2, #2
 8008fa4:	f000 fb74 	bl	8009690 <_calloc_r>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d00c      	beq.n	8008fc6 <_Balloc+0x6e>
 8008fac:	6044      	str	r4, [r0, #4]
 8008fae:	6085      	str	r5, [r0, #8]
 8008fb0:	e00d      	b.n	8008fce <_Balloc+0x76>
 8008fb2:	2221      	movs	r2, #33	; 0x21
 8008fb4:	2104      	movs	r1, #4
 8008fb6:	0030      	movs	r0, r6
 8008fb8:	f000 fb6a 	bl	8009690 <_calloc_r>
 8008fbc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008fbe:	60e8      	str	r0, [r5, #12]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d1e1      	bne.n	8008f8a <_Balloc+0x32>
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	bd70      	pop	{r4, r5, r6, pc}
 8008fca:	6802      	ldr	r2, [r0, #0]
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	6103      	str	r3, [r0, #16]
 8008fd2:	60c3      	str	r3, [r0, #12]
 8008fd4:	e7f8      	b.n	8008fc8 <_Balloc+0x70>
 8008fd6:	46c0      	nop			; (mov r8, r8)
 8008fd8:	0800aa69 	.word	0x0800aa69
 8008fdc:	0800aaec 	.word	0x0800aaec

08008fe0 <_Bfree>:
 8008fe0:	b570      	push	{r4, r5, r6, lr}
 8008fe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fe4:	0005      	movs	r5, r0
 8008fe6:	000c      	movs	r4, r1
 8008fe8:	2e00      	cmp	r6, #0
 8008fea:	d10e      	bne.n	800900a <_Bfree+0x2a>
 8008fec:	2010      	movs	r0, #16
 8008fee:	f7ff ff95 	bl	8008f1c <malloc>
 8008ff2:	1e02      	subs	r2, r0, #0
 8008ff4:	6268      	str	r0, [r5, #36]	; 0x24
 8008ff6:	d104      	bne.n	8009002 <_Bfree+0x22>
 8008ff8:	218a      	movs	r1, #138	; 0x8a
 8008ffa:	4b09      	ldr	r3, [pc, #36]	; (8009020 <_Bfree+0x40>)
 8008ffc:	4809      	ldr	r0, [pc, #36]	; (8009024 <_Bfree+0x44>)
 8008ffe:	f000 fdc9 	bl	8009b94 <__assert_func>
 8009002:	6046      	str	r6, [r0, #4]
 8009004:	6086      	str	r6, [r0, #8]
 8009006:	6006      	str	r6, [r0, #0]
 8009008:	60c6      	str	r6, [r0, #12]
 800900a:	2c00      	cmp	r4, #0
 800900c:	d007      	beq.n	800901e <_Bfree+0x3e>
 800900e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009010:	6862      	ldr	r2, [r4, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	0092      	lsls	r2, r2, #2
 8009016:	189b      	adds	r3, r3, r2
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	6022      	str	r2, [r4, #0]
 800901c:	601c      	str	r4, [r3, #0]
 800901e:	bd70      	pop	{r4, r5, r6, pc}
 8009020:	0800aa69 	.word	0x0800aa69
 8009024:	0800aaec 	.word	0x0800aaec

08009028 <__multadd>:
 8009028:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800902a:	000e      	movs	r6, r1
 800902c:	9001      	str	r0, [sp, #4]
 800902e:	000c      	movs	r4, r1
 8009030:	001d      	movs	r5, r3
 8009032:	2000      	movs	r0, #0
 8009034:	690f      	ldr	r7, [r1, #16]
 8009036:	3614      	adds	r6, #20
 8009038:	6833      	ldr	r3, [r6, #0]
 800903a:	3001      	adds	r0, #1
 800903c:	b299      	uxth	r1, r3
 800903e:	4351      	muls	r1, r2
 8009040:	0c1b      	lsrs	r3, r3, #16
 8009042:	4353      	muls	r3, r2
 8009044:	1949      	adds	r1, r1, r5
 8009046:	0c0d      	lsrs	r5, r1, #16
 8009048:	195b      	adds	r3, r3, r5
 800904a:	0c1d      	lsrs	r5, r3, #16
 800904c:	b289      	uxth	r1, r1
 800904e:	041b      	lsls	r3, r3, #16
 8009050:	185b      	adds	r3, r3, r1
 8009052:	c608      	stmia	r6!, {r3}
 8009054:	4287      	cmp	r7, r0
 8009056:	dcef      	bgt.n	8009038 <__multadd+0x10>
 8009058:	2d00      	cmp	r5, #0
 800905a:	d022      	beq.n	80090a2 <__multadd+0x7a>
 800905c:	68a3      	ldr	r3, [r4, #8]
 800905e:	42bb      	cmp	r3, r7
 8009060:	dc19      	bgt.n	8009096 <__multadd+0x6e>
 8009062:	6863      	ldr	r3, [r4, #4]
 8009064:	9801      	ldr	r0, [sp, #4]
 8009066:	1c59      	adds	r1, r3, #1
 8009068:	f7ff ff76 	bl	8008f58 <_Balloc>
 800906c:	1e06      	subs	r6, r0, #0
 800906e:	d105      	bne.n	800907c <__multadd+0x54>
 8009070:	0002      	movs	r2, r0
 8009072:	21b5      	movs	r1, #181	; 0xb5
 8009074:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <__multadd+0x80>)
 8009076:	480d      	ldr	r0, [pc, #52]	; (80090ac <__multadd+0x84>)
 8009078:	f000 fd8c 	bl	8009b94 <__assert_func>
 800907c:	0021      	movs	r1, r4
 800907e:	6923      	ldr	r3, [r4, #16]
 8009080:	310c      	adds	r1, #12
 8009082:	1c9a      	adds	r2, r3, #2
 8009084:	0092      	lsls	r2, r2, #2
 8009086:	300c      	adds	r0, #12
 8009088:	f7ff ff5d 	bl	8008f46 <memcpy>
 800908c:	0021      	movs	r1, r4
 800908e:	9801      	ldr	r0, [sp, #4]
 8009090:	f7ff ffa6 	bl	8008fe0 <_Bfree>
 8009094:	0034      	movs	r4, r6
 8009096:	1d3b      	adds	r3, r7, #4
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	18e3      	adds	r3, r4, r3
 800909c:	605d      	str	r5, [r3, #4]
 800909e:	1c7b      	adds	r3, r7, #1
 80090a0:	6123      	str	r3, [r4, #16]
 80090a2:	0020      	movs	r0, r4
 80090a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090a6:	46c0      	nop			; (mov r8, r8)
 80090a8:	0800aadb 	.word	0x0800aadb
 80090ac:	0800aaec 	.word	0x0800aaec

080090b0 <__hi0bits>:
 80090b0:	0003      	movs	r3, r0
 80090b2:	0c02      	lsrs	r2, r0, #16
 80090b4:	2000      	movs	r0, #0
 80090b6:	4282      	cmp	r2, r0
 80090b8:	d101      	bne.n	80090be <__hi0bits+0xe>
 80090ba:	041b      	lsls	r3, r3, #16
 80090bc:	3010      	adds	r0, #16
 80090be:	0e1a      	lsrs	r2, r3, #24
 80090c0:	d101      	bne.n	80090c6 <__hi0bits+0x16>
 80090c2:	3008      	adds	r0, #8
 80090c4:	021b      	lsls	r3, r3, #8
 80090c6:	0f1a      	lsrs	r2, r3, #28
 80090c8:	d101      	bne.n	80090ce <__hi0bits+0x1e>
 80090ca:	3004      	adds	r0, #4
 80090cc:	011b      	lsls	r3, r3, #4
 80090ce:	0f9a      	lsrs	r2, r3, #30
 80090d0:	d101      	bne.n	80090d6 <__hi0bits+0x26>
 80090d2:	3002      	adds	r0, #2
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	db03      	blt.n	80090e2 <__hi0bits+0x32>
 80090da:	3001      	adds	r0, #1
 80090dc:	005b      	lsls	r3, r3, #1
 80090de:	d400      	bmi.n	80090e2 <__hi0bits+0x32>
 80090e0:	2020      	movs	r0, #32
 80090e2:	4770      	bx	lr

080090e4 <__lo0bits>:
 80090e4:	6803      	ldr	r3, [r0, #0]
 80090e6:	0002      	movs	r2, r0
 80090e8:	2107      	movs	r1, #7
 80090ea:	0018      	movs	r0, r3
 80090ec:	4008      	ands	r0, r1
 80090ee:	420b      	tst	r3, r1
 80090f0:	d00d      	beq.n	800910e <__lo0bits+0x2a>
 80090f2:	3906      	subs	r1, #6
 80090f4:	2000      	movs	r0, #0
 80090f6:	420b      	tst	r3, r1
 80090f8:	d105      	bne.n	8009106 <__lo0bits+0x22>
 80090fa:	3002      	adds	r0, #2
 80090fc:	4203      	tst	r3, r0
 80090fe:	d003      	beq.n	8009108 <__lo0bits+0x24>
 8009100:	40cb      	lsrs	r3, r1
 8009102:	0008      	movs	r0, r1
 8009104:	6013      	str	r3, [r2, #0]
 8009106:	4770      	bx	lr
 8009108:	089b      	lsrs	r3, r3, #2
 800910a:	6013      	str	r3, [r2, #0]
 800910c:	e7fb      	b.n	8009106 <__lo0bits+0x22>
 800910e:	b299      	uxth	r1, r3
 8009110:	2900      	cmp	r1, #0
 8009112:	d101      	bne.n	8009118 <__lo0bits+0x34>
 8009114:	2010      	movs	r0, #16
 8009116:	0c1b      	lsrs	r3, r3, #16
 8009118:	b2d9      	uxtb	r1, r3
 800911a:	2900      	cmp	r1, #0
 800911c:	d101      	bne.n	8009122 <__lo0bits+0x3e>
 800911e:	3008      	adds	r0, #8
 8009120:	0a1b      	lsrs	r3, r3, #8
 8009122:	0719      	lsls	r1, r3, #28
 8009124:	d101      	bne.n	800912a <__lo0bits+0x46>
 8009126:	3004      	adds	r0, #4
 8009128:	091b      	lsrs	r3, r3, #4
 800912a:	0799      	lsls	r1, r3, #30
 800912c:	d101      	bne.n	8009132 <__lo0bits+0x4e>
 800912e:	3002      	adds	r0, #2
 8009130:	089b      	lsrs	r3, r3, #2
 8009132:	07d9      	lsls	r1, r3, #31
 8009134:	d4e9      	bmi.n	800910a <__lo0bits+0x26>
 8009136:	3001      	adds	r0, #1
 8009138:	085b      	lsrs	r3, r3, #1
 800913a:	d1e6      	bne.n	800910a <__lo0bits+0x26>
 800913c:	2020      	movs	r0, #32
 800913e:	e7e2      	b.n	8009106 <__lo0bits+0x22>

08009140 <__i2b>:
 8009140:	b510      	push	{r4, lr}
 8009142:	000c      	movs	r4, r1
 8009144:	2101      	movs	r1, #1
 8009146:	f7ff ff07 	bl	8008f58 <_Balloc>
 800914a:	2800      	cmp	r0, #0
 800914c:	d106      	bne.n	800915c <__i2b+0x1c>
 800914e:	21a0      	movs	r1, #160	; 0xa0
 8009150:	0002      	movs	r2, r0
 8009152:	4b04      	ldr	r3, [pc, #16]	; (8009164 <__i2b+0x24>)
 8009154:	4804      	ldr	r0, [pc, #16]	; (8009168 <__i2b+0x28>)
 8009156:	0049      	lsls	r1, r1, #1
 8009158:	f000 fd1c 	bl	8009b94 <__assert_func>
 800915c:	2301      	movs	r3, #1
 800915e:	6144      	str	r4, [r0, #20]
 8009160:	6103      	str	r3, [r0, #16]
 8009162:	bd10      	pop	{r4, pc}
 8009164:	0800aadb 	.word	0x0800aadb
 8009168:	0800aaec 	.word	0x0800aaec

0800916c <__multiply>:
 800916c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800916e:	690b      	ldr	r3, [r1, #16]
 8009170:	0014      	movs	r4, r2
 8009172:	6912      	ldr	r2, [r2, #16]
 8009174:	000d      	movs	r5, r1
 8009176:	b089      	sub	sp, #36	; 0x24
 8009178:	4293      	cmp	r3, r2
 800917a:	da01      	bge.n	8009180 <__multiply+0x14>
 800917c:	0025      	movs	r5, r4
 800917e:	000c      	movs	r4, r1
 8009180:	692f      	ldr	r7, [r5, #16]
 8009182:	6926      	ldr	r6, [r4, #16]
 8009184:	6869      	ldr	r1, [r5, #4]
 8009186:	19bb      	adds	r3, r7, r6
 8009188:	9302      	str	r3, [sp, #8]
 800918a:	68ab      	ldr	r3, [r5, #8]
 800918c:	19ba      	adds	r2, r7, r6
 800918e:	4293      	cmp	r3, r2
 8009190:	da00      	bge.n	8009194 <__multiply+0x28>
 8009192:	3101      	adds	r1, #1
 8009194:	f7ff fee0 	bl	8008f58 <_Balloc>
 8009198:	9001      	str	r0, [sp, #4]
 800919a:	2800      	cmp	r0, #0
 800919c:	d106      	bne.n	80091ac <__multiply+0x40>
 800919e:	215e      	movs	r1, #94	; 0x5e
 80091a0:	0002      	movs	r2, r0
 80091a2:	4b48      	ldr	r3, [pc, #288]	; (80092c4 <__multiply+0x158>)
 80091a4:	4848      	ldr	r0, [pc, #288]	; (80092c8 <__multiply+0x15c>)
 80091a6:	31ff      	adds	r1, #255	; 0xff
 80091a8:	f000 fcf4 	bl	8009b94 <__assert_func>
 80091ac:	9b01      	ldr	r3, [sp, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	3314      	adds	r3, #20
 80091b2:	469c      	mov	ip, r3
 80091b4:	19bb      	adds	r3, r7, r6
 80091b6:	009b      	lsls	r3, r3, #2
 80091b8:	4463      	add	r3, ip
 80091ba:	9303      	str	r3, [sp, #12]
 80091bc:	4663      	mov	r3, ip
 80091be:	9903      	ldr	r1, [sp, #12]
 80091c0:	428b      	cmp	r3, r1
 80091c2:	d32c      	bcc.n	800921e <__multiply+0xb2>
 80091c4:	002b      	movs	r3, r5
 80091c6:	0022      	movs	r2, r4
 80091c8:	3314      	adds	r3, #20
 80091ca:	00bf      	lsls	r7, r7, #2
 80091cc:	3214      	adds	r2, #20
 80091ce:	9306      	str	r3, [sp, #24]
 80091d0:	00b6      	lsls	r6, r6, #2
 80091d2:	19db      	adds	r3, r3, r7
 80091d4:	9304      	str	r3, [sp, #16]
 80091d6:	1993      	adds	r3, r2, r6
 80091d8:	9307      	str	r3, [sp, #28]
 80091da:	2304      	movs	r3, #4
 80091dc:	9305      	str	r3, [sp, #20]
 80091de:	002b      	movs	r3, r5
 80091e0:	9904      	ldr	r1, [sp, #16]
 80091e2:	3315      	adds	r3, #21
 80091e4:	9200      	str	r2, [sp, #0]
 80091e6:	4299      	cmp	r1, r3
 80091e8:	d305      	bcc.n	80091f6 <__multiply+0x8a>
 80091ea:	1b4b      	subs	r3, r1, r5
 80091ec:	3b15      	subs	r3, #21
 80091ee:	089b      	lsrs	r3, r3, #2
 80091f0:	3301      	adds	r3, #1
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	9305      	str	r3, [sp, #20]
 80091f6:	9b07      	ldr	r3, [sp, #28]
 80091f8:	9a00      	ldr	r2, [sp, #0]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d311      	bcc.n	8009222 <__multiply+0xb6>
 80091fe:	9b02      	ldr	r3, [sp, #8]
 8009200:	2b00      	cmp	r3, #0
 8009202:	dd06      	ble.n	8009212 <__multiply+0xa6>
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	3b04      	subs	r3, #4
 8009208:	9303      	str	r3, [sp, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	9300      	str	r3, [sp, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d053      	beq.n	80092ba <__multiply+0x14e>
 8009212:	9b01      	ldr	r3, [sp, #4]
 8009214:	9a02      	ldr	r2, [sp, #8]
 8009216:	0018      	movs	r0, r3
 8009218:	611a      	str	r2, [r3, #16]
 800921a:	b009      	add	sp, #36	; 0x24
 800921c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800921e:	c304      	stmia	r3!, {r2}
 8009220:	e7cd      	b.n	80091be <__multiply+0x52>
 8009222:	9b00      	ldr	r3, [sp, #0]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	b298      	uxth	r0, r3
 8009228:	2800      	cmp	r0, #0
 800922a:	d01b      	beq.n	8009264 <__multiply+0xf8>
 800922c:	4667      	mov	r7, ip
 800922e:	2400      	movs	r4, #0
 8009230:	9e06      	ldr	r6, [sp, #24]
 8009232:	ce02      	ldmia	r6!, {r1}
 8009234:	683a      	ldr	r2, [r7, #0]
 8009236:	b28b      	uxth	r3, r1
 8009238:	4343      	muls	r3, r0
 800923a:	b292      	uxth	r2, r2
 800923c:	189b      	adds	r3, r3, r2
 800923e:	191b      	adds	r3, r3, r4
 8009240:	0c0c      	lsrs	r4, r1, #16
 8009242:	4344      	muls	r4, r0
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	0c11      	lsrs	r1, r2, #16
 8009248:	1861      	adds	r1, r4, r1
 800924a:	0c1c      	lsrs	r4, r3, #16
 800924c:	1909      	adds	r1, r1, r4
 800924e:	0c0c      	lsrs	r4, r1, #16
 8009250:	b29b      	uxth	r3, r3
 8009252:	0409      	lsls	r1, r1, #16
 8009254:	430b      	orrs	r3, r1
 8009256:	c708      	stmia	r7!, {r3}
 8009258:	9b04      	ldr	r3, [sp, #16]
 800925a:	42b3      	cmp	r3, r6
 800925c:	d8e9      	bhi.n	8009232 <__multiply+0xc6>
 800925e:	4663      	mov	r3, ip
 8009260:	9a05      	ldr	r2, [sp, #20]
 8009262:	509c      	str	r4, [r3, r2]
 8009264:	9b00      	ldr	r3, [sp, #0]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	0c1e      	lsrs	r6, r3, #16
 800926a:	d020      	beq.n	80092ae <__multiply+0x142>
 800926c:	4663      	mov	r3, ip
 800926e:	002c      	movs	r4, r5
 8009270:	4660      	mov	r0, ip
 8009272:	2700      	movs	r7, #0
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	3414      	adds	r4, #20
 8009278:	6822      	ldr	r2, [r4, #0]
 800927a:	b29b      	uxth	r3, r3
 800927c:	b291      	uxth	r1, r2
 800927e:	4371      	muls	r1, r6
 8009280:	6802      	ldr	r2, [r0, #0]
 8009282:	0c12      	lsrs	r2, r2, #16
 8009284:	1889      	adds	r1, r1, r2
 8009286:	19cf      	adds	r7, r1, r7
 8009288:	0439      	lsls	r1, r7, #16
 800928a:	430b      	orrs	r3, r1
 800928c:	6003      	str	r3, [r0, #0]
 800928e:	cc02      	ldmia	r4!, {r1}
 8009290:	6843      	ldr	r3, [r0, #4]
 8009292:	0c09      	lsrs	r1, r1, #16
 8009294:	4371      	muls	r1, r6
 8009296:	b29b      	uxth	r3, r3
 8009298:	0c3f      	lsrs	r7, r7, #16
 800929a:	18cb      	adds	r3, r1, r3
 800929c:	9a04      	ldr	r2, [sp, #16]
 800929e:	19db      	adds	r3, r3, r7
 80092a0:	0c1f      	lsrs	r7, r3, #16
 80092a2:	3004      	adds	r0, #4
 80092a4:	42a2      	cmp	r2, r4
 80092a6:	d8e7      	bhi.n	8009278 <__multiply+0x10c>
 80092a8:	4662      	mov	r2, ip
 80092aa:	9905      	ldr	r1, [sp, #20]
 80092ac:	5053      	str	r3, [r2, r1]
 80092ae:	9b00      	ldr	r3, [sp, #0]
 80092b0:	3304      	adds	r3, #4
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	2304      	movs	r3, #4
 80092b6:	449c      	add	ip, r3
 80092b8:	e79d      	b.n	80091f6 <__multiply+0x8a>
 80092ba:	9b02      	ldr	r3, [sp, #8]
 80092bc:	3b01      	subs	r3, #1
 80092be:	9302      	str	r3, [sp, #8]
 80092c0:	e79d      	b.n	80091fe <__multiply+0x92>
 80092c2:	46c0      	nop			; (mov r8, r8)
 80092c4:	0800aadb 	.word	0x0800aadb
 80092c8:	0800aaec 	.word	0x0800aaec

080092cc <__pow5mult>:
 80092cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092ce:	2303      	movs	r3, #3
 80092d0:	0015      	movs	r5, r2
 80092d2:	0007      	movs	r7, r0
 80092d4:	000e      	movs	r6, r1
 80092d6:	401a      	ands	r2, r3
 80092d8:	421d      	tst	r5, r3
 80092da:	d008      	beq.n	80092ee <__pow5mult+0x22>
 80092dc:	4925      	ldr	r1, [pc, #148]	; (8009374 <__pow5mult+0xa8>)
 80092de:	3a01      	subs	r2, #1
 80092e0:	0092      	lsls	r2, r2, #2
 80092e2:	5852      	ldr	r2, [r2, r1]
 80092e4:	2300      	movs	r3, #0
 80092e6:	0031      	movs	r1, r6
 80092e8:	f7ff fe9e 	bl	8009028 <__multadd>
 80092ec:	0006      	movs	r6, r0
 80092ee:	10ad      	asrs	r5, r5, #2
 80092f0:	d03d      	beq.n	800936e <__pow5mult+0xa2>
 80092f2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80092f4:	2c00      	cmp	r4, #0
 80092f6:	d10f      	bne.n	8009318 <__pow5mult+0x4c>
 80092f8:	2010      	movs	r0, #16
 80092fa:	f7ff fe0f 	bl	8008f1c <malloc>
 80092fe:	1e02      	subs	r2, r0, #0
 8009300:	6278      	str	r0, [r7, #36]	; 0x24
 8009302:	d105      	bne.n	8009310 <__pow5mult+0x44>
 8009304:	21d7      	movs	r1, #215	; 0xd7
 8009306:	4b1c      	ldr	r3, [pc, #112]	; (8009378 <__pow5mult+0xac>)
 8009308:	481c      	ldr	r0, [pc, #112]	; (800937c <__pow5mult+0xb0>)
 800930a:	0049      	lsls	r1, r1, #1
 800930c:	f000 fc42 	bl	8009b94 <__assert_func>
 8009310:	6044      	str	r4, [r0, #4]
 8009312:	6084      	str	r4, [r0, #8]
 8009314:	6004      	str	r4, [r0, #0]
 8009316:	60c4      	str	r4, [r0, #12]
 8009318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931a:	689c      	ldr	r4, [r3, #8]
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	2c00      	cmp	r4, #0
 8009320:	d108      	bne.n	8009334 <__pow5mult+0x68>
 8009322:	0038      	movs	r0, r7
 8009324:	4916      	ldr	r1, [pc, #88]	; (8009380 <__pow5mult+0xb4>)
 8009326:	f7ff ff0b 	bl	8009140 <__i2b>
 800932a:	9b01      	ldr	r3, [sp, #4]
 800932c:	0004      	movs	r4, r0
 800932e:	6098      	str	r0, [r3, #8]
 8009330:	2300      	movs	r3, #0
 8009332:	6003      	str	r3, [r0, #0]
 8009334:	2301      	movs	r3, #1
 8009336:	421d      	tst	r5, r3
 8009338:	d00a      	beq.n	8009350 <__pow5mult+0x84>
 800933a:	0031      	movs	r1, r6
 800933c:	0022      	movs	r2, r4
 800933e:	0038      	movs	r0, r7
 8009340:	f7ff ff14 	bl	800916c <__multiply>
 8009344:	0031      	movs	r1, r6
 8009346:	9001      	str	r0, [sp, #4]
 8009348:	0038      	movs	r0, r7
 800934a:	f7ff fe49 	bl	8008fe0 <_Bfree>
 800934e:	9e01      	ldr	r6, [sp, #4]
 8009350:	106d      	asrs	r5, r5, #1
 8009352:	d00c      	beq.n	800936e <__pow5mult+0xa2>
 8009354:	6820      	ldr	r0, [r4, #0]
 8009356:	2800      	cmp	r0, #0
 8009358:	d107      	bne.n	800936a <__pow5mult+0x9e>
 800935a:	0022      	movs	r2, r4
 800935c:	0021      	movs	r1, r4
 800935e:	0038      	movs	r0, r7
 8009360:	f7ff ff04 	bl	800916c <__multiply>
 8009364:	2300      	movs	r3, #0
 8009366:	6020      	str	r0, [r4, #0]
 8009368:	6003      	str	r3, [r0, #0]
 800936a:	0004      	movs	r4, r0
 800936c:	e7e2      	b.n	8009334 <__pow5mult+0x68>
 800936e:	0030      	movs	r0, r6
 8009370:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009372:	46c0      	nop			; (mov r8, r8)
 8009374:	0800ac38 	.word	0x0800ac38
 8009378:	0800aa69 	.word	0x0800aa69
 800937c:	0800aaec 	.word	0x0800aaec
 8009380:	00000271 	.word	0x00000271

08009384 <__lshift>:
 8009384:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009386:	000c      	movs	r4, r1
 8009388:	0017      	movs	r7, r2
 800938a:	6923      	ldr	r3, [r4, #16]
 800938c:	1155      	asrs	r5, r2, #5
 800938e:	b087      	sub	sp, #28
 8009390:	18eb      	adds	r3, r5, r3
 8009392:	9302      	str	r3, [sp, #8]
 8009394:	3301      	adds	r3, #1
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	6849      	ldr	r1, [r1, #4]
 800939a:	68a3      	ldr	r3, [r4, #8]
 800939c:	9004      	str	r0, [sp, #16]
 800939e:	9a01      	ldr	r2, [sp, #4]
 80093a0:	4293      	cmp	r3, r2
 80093a2:	db10      	blt.n	80093c6 <__lshift+0x42>
 80093a4:	9804      	ldr	r0, [sp, #16]
 80093a6:	f7ff fdd7 	bl	8008f58 <_Balloc>
 80093aa:	2300      	movs	r3, #0
 80093ac:	0002      	movs	r2, r0
 80093ae:	0006      	movs	r6, r0
 80093b0:	0019      	movs	r1, r3
 80093b2:	3214      	adds	r2, #20
 80093b4:	4298      	cmp	r0, r3
 80093b6:	d10c      	bne.n	80093d2 <__lshift+0x4e>
 80093b8:	21da      	movs	r1, #218	; 0xda
 80093ba:	0002      	movs	r2, r0
 80093bc:	4b26      	ldr	r3, [pc, #152]	; (8009458 <__lshift+0xd4>)
 80093be:	4827      	ldr	r0, [pc, #156]	; (800945c <__lshift+0xd8>)
 80093c0:	31ff      	adds	r1, #255	; 0xff
 80093c2:	f000 fbe7 	bl	8009b94 <__assert_func>
 80093c6:	3101      	adds	r1, #1
 80093c8:	005b      	lsls	r3, r3, #1
 80093ca:	e7e8      	b.n	800939e <__lshift+0x1a>
 80093cc:	0098      	lsls	r0, r3, #2
 80093ce:	5011      	str	r1, [r2, r0]
 80093d0:	3301      	adds	r3, #1
 80093d2:	42ab      	cmp	r3, r5
 80093d4:	dbfa      	blt.n	80093cc <__lshift+0x48>
 80093d6:	43eb      	mvns	r3, r5
 80093d8:	17db      	asrs	r3, r3, #31
 80093da:	401d      	ands	r5, r3
 80093dc:	211f      	movs	r1, #31
 80093de:	0023      	movs	r3, r4
 80093e0:	0038      	movs	r0, r7
 80093e2:	00ad      	lsls	r5, r5, #2
 80093e4:	1955      	adds	r5, r2, r5
 80093e6:	6922      	ldr	r2, [r4, #16]
 80093e8:	3314      	adds	r3, #20
 80093ea:	0092      	lsls	r2, r2, #2
 80093ec:	4008      	ands	r0, r1
 80093ee:	4684      	mov	ip, r0
 80093f0:	189a      	adds	r2, r3, r2
 80093f2:	420f      	tst	r7, r1
 80093f4:	d02a      	beq.n	800944c <__lshift+0xc8>
 80093f6:	3101      	adds	r1, #1
 80093f8:	1a09      	subs	r1, r1, r0
 80093fa:	9105      	str	r1, [sp, #20]
 80093fc:	2100      	movs	r1, #0
 80093fe:	9503      	str	r5, [sp, #12]
 8009400:	4667      	mov	r7, ip
 8009402:	6818      	ldr	r0, [r3, #0]
 8009404:	40b8      	lsls	r0, r7
 8009406:	4301      	orrs	r1, r0
 8009408:	9803      	ldr	r0, [sp, #12]
 800940a:	c002      	stmia	r0!, {r1}
 800940c:	cb02      	ldmia	r3!, {r1}
 800940e:	9003      	str	r0, [sp, #12]
 8009410:	9805      	ldr	r0, [sp, #20]
 8009412:	40c1      	lsrs	r1, r0
 8009414:	429a      	cmp	r2, r3
 8009416:	d8f3      	bhi.n	8009400 <__lshift+0x7c>
 8009418:	0020      	movs	r0, r4
 800941a:	3015      	adds	r0, #21
 800941c:	2304      	movs	r3, #4
 800941e:	4282      	cmp	r2, r0
 8009420:	d304      	bcc.n	800942c <__lshift+0xa8>
 8009422:	1b13      	subs	r3, r2, r4
 8009424:	3b15      	subs	r3, #21
 8009426:	089b      	lsrs	r3, r3, #2
 8009428:	3301      	adds	r3, #1
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	50e9      	str	r1, [r5, r3]
 800942e:	2900      	cmp	r1, #0
 8009430:	d002      	beq.n	8009438 <__lshift+0xb4>
 8009432:	9b02      	ldr	r3, [sp, #8]
 8009434:	3302      	adds	r3, #2
 8009436:	9301      	str	r3, [sp, #4]
 8009438:	9b01      	ldr	r3, [sp, #4]
 800943a:	9804      	ldr	r0, [sp, #16]
 800943c:	3b01      	subs	r3, #1
 800943e:	0021      	movs	r1, r4
 8009440:	6133      	str	r3, [r6, #16]
 8009442:	f7ff fdcd 	bl	8008fe0 <_Bfree>
 8009446:	0030      	movs	r0, r6
 8009448:	b007      	add	sp, #28
 800944a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800944c:	cb02      	ldmia	r3!, {r1}
 800944e:	c502      	stmia	r5!, {r1}
 8009450:	429a      	cmp	r2, r3
 8009452:	d8fb      	bhi.n	800944c <__lshift+0xc8>
 8009454:	e7f0      	b.n	8009438 <__lshift+0xb4>
 8009456:	46c0      	nop			; (mov r8, r8)
 8009458:	0800aadb 	.word	0x0800aadb
 800945c:	0800aaec 	.word	0x0800aaec

08009460 <__mcmp>:
 8009460:	6902      	ldr	r2, [r0, #16]
 8009462:	690b      	ldr	r3, [r1, #16]
 8009464:	b530      	push	{r4, r5, lr}
 8009466:	0004      	movs	r4, r0
 8009468:	1ad0      	subs	r0, r2, r3
 800946a:	429a      	cmp	r2, r3
 800946c:	d10d      	bne.n	800948a <__mcmp+0x2a>
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	3414      	adds	r4, #20
 8009472:	3114      	adds	r1, #20
 8009474:	18e2      	adds	r2, r4, r3
 8009476:	18c9      	adds	r1, r1, r3
 8009478:	3a04      	subs	r2, #4
 800947a:	3904      	subs	r1, #4
 800947c:	6815      	ldr	r5, [r2, #0]
 800947e:	680b      	ldr	r3, [r1, #0]
 8009480:	429d      	cmp	r5, r3
 8009482:	d003      	beq.n	800948c <__mcmp+0x2c>
 8009484:	2001      	movs	r0, #1
 8009486:	429d      	cmp	r5, r3
 8009488:	d303      	bcc.n	8009492 <__mcmp+0x32>
 800948a:	bd30      	pop	{r4, r5, pc}
 800948c:	4294      	cmp	r4, r2
 800948e:	d3f3      	bcc.n	8009478 <__mcmp+0x18>
 8009490:	e7fb      	b.n	800948a <__mcmp+0x2a>
 8009492:	4240      	negs	r0, r0
 8009494:	e7f9      	b.n	800948a <__mcmp+0x2a>
	...

08009498 <__mdiff>:
 8009498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800949a:	000e      	movs	r6, r1
 800949c:	0007      	movs	r7, r0
 800949e:	0011      	movs	r1, r2
 80094a0:	0030      	movs	r0, r6
 80094a2:	b087      	sub	sp, #28
 80094a4:	0014      	movs	r4, r2
 80094a6:	f7ff ffdb 	bl	8009460 <__mcmp>
 80094aa:	1e05      	subs	r5, r0, #0
 80094ac:	d110      	bne.n	80094d0 <__mdiff+0x38>
 80094ae:	0001      	movs	r1, r0
 80094b0:	0038      	movs	r0, r7
 80094b2:	f7ff fd51 	bl	8008f58 <_Balloc>
 80094b6:	1e02      	subs	r2, r0, #0
 80094b8:	d104      	bne.n	80094c4 <__mdiff+0x2c>
 80094ba:	4b40      	ldr	r3, [pc, #256]	; (80095bc <__mdiff+0x124>)
 80094bc:	4940      	ldr	r1, [pc, #256]	; (80095c0 <__mdiff+0x128>)
 80094be:	4841      	ldr	r0, [pc, #260]	; (80095c4 <__mdiff+0x12c>)
 80094c0:	f000 fb68 	bl	8009b94 <__assert_func>
 80094c4:	2301      	movs	r3, #1
 80094c6:	6145      	str	r5, [r0, #20]
 80094c8:	6103      	str	r3, [r0, #16]
 80094ca:	0010      	movs	r0, r2
 80094cc:	b007      	add	sp, #28
 80094ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094d0:	2301      	movs	r3, #1
 80094d2:	9301      	str	r3, [sp, #4]
 80094d4:	2800      	cmp	r0, #0
 80094d6:	db04      	blt.n	80094e2 <__mdiff+0x4a>
 80094d8:	0023      	movs	r3, r4
 80094da:	0034      	movs	r4, r6
 80094dc:	001e      	movs	r6, r3
 80094de:	2300      	movs	r3, #0
 80094e0:	9301      	str	r3, [sp, #4]
 80094e2:	0038      	movs	r0, r7
 80094e4:	6861      	ldr	r1, [r4, #4]
 80094e6:	f7ff fd37 	bl	8008f58 <_Balloc>
 80094ea:	1e02      	subs	r2, r0, #0
 80094ec:	d103      	bne.n	80094f6 <__mdiff+0x5e>
 80094ee:	2190      	movs	r1, #144	; 0x90
 80094f0:	4b32      	ldr	r3, [pc, #200]	; (80095bc <__mdiff+0x124>)
 80094f2:	0089      	lsls	r1, r1, #2
 80094f4:	e7e3      	b.n	80094be <__mdiff+0x26>
 80094f6:	9b01      	ldr	r3, [sp, #4]
 80094f8:	2700      	movs	r7, #0
 80094fa:	60c3      	str	r3, [r0, #12]
 80094fc:	6920      	ldr	r0, [r4, #16]
 80094fe:	3414      	adds	r4, #20
 8009500:	9401      	str	r4, [sp, #4]
 8009502:	9b01      	ldr	r3, [sp, #4]
 8009504:	0084      	lsls	r4, r0, #2
 8009506:	191b      	adds	r3, r3, r4
 8009508:	0034      	movs	r4, r6
 800950a:	9302      	str	r3, [sp, #8]
 800950c:	6933      	ldr	r3, [r6, #16]
 800950e:	3414      	adds	r4, #20
 8009510:	0099      	lsls	r1, r3, #2
 8009512:	1863      	adds	r3, r4, r1
 8009514:	9303      	str	r3, [sp, #12]
 8009516:	0013      	movs	r3, r2
 8009518:	3314      	adds	r3, #20
 800951a:	469c      	mov	ip, r3
 800951c:	9305      	str	r3, [sp, #20]
 800951e:	9b01      	ldr	r3, [sp, #4]
 8009520:	9304      	str	r3, [sp, #16]
 8009522:	9b04      	ldr	r3, [sp, #16]
 8009524:	cc02      	ldmia	r4!, {r1}
 8009526:	cb20      	ldmia	r3!, {r5}
 8009528:	9304      	str	r3, [sp, #16]
 800952a:	b2ab      	uxth	r3, r5
 800952c:	19df      	adds	r7, r3, r7
 800952e:	b28b      	uxth	r3, r1
 8009530:	1afb      	subs	r3, r7, r3
 8009532:	0c09      	lsrs	r1, r1, #16
 8009534:	0c2d      	lsrs	r5, r5, #16
 8009536:	1a6d      	subs	r5, r5, r1
 8009538:	1419      	asrs	r1, r3, #16
 800953a:	186d      	adds	r5, r5, r1
 800953c:	4661      	mov	r1, ip
 800953e:	142f      	asrs	r7, r5, #16
 8009540:	b29b      	uxth	r3, r3
 8009542:	042d      	lsls	r5, r5, #16
 8009544:	432b      	orrs	r3, r5
 8009546:	c108      	stmia	r1!, {r3}
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	468c      	mov	ip, r1
 800954c:	42a3      	cmp	r3, r4
 800954e:	d8e8      	bhi.n	8009522 <__mdiff+0x8a>
 8009550:	0031      	movs	r1, r6
 8009552:	9c03      	ldr	r4, [sp, #12]
 8009554:	3115      	adds	r1, #21
 8009556:	2304      	movs	r3, #4
 8009558:	428c      	cmp	r4, r1
 800955a:	d304      	bcc.n	8009566 <__mdiff+0xce>
 800955c:	1ba3      	subs	r3, r4, r6
 800955e:	3b15      	subs	r3, #21
 8009560:	089b      	lsrs	r3, r3, #2
 8009562:	3301      	adds	r3, #1
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	9901      	ldr	r1, [sp, #4]
 8009568:	18cc      	adds	r4, r1, r3
 800956a:	9905      	ldr	r1, [sp, #20]
 800956c:	0026      	movs	r6, r4
 800956e:	18cb      	adds	r3, r1, r3
 8009570:	469c      	mov	ip, r3
 8009572:	9902      	ldr	r1, [sp, #8]
 8009574:	428e      	cmp	r6, r1
 8009576:	d310      	bcc.n	800959a <__mdiff+0x102>
 8009578:	9e02      	ldr	r6, [sp, #8]
 800957a:	1ee1      	subs	r1, r4, #3
 800957c:	2500      	movs	r5, #0
 800957e:	428e      	cmp	r6, r1
 8009580:	d304      	bcc.n	800958c <__mdiff+0xf4>
 8009582:	0031      	movs	r1, r6
 8009584:	3103      	adds	r1, #3
 8009586:	1b0c      	subs	r4, r1, r4
 8009588:	08a4      	lsrs	r4, r4, #2
 800958a:	00a5      	lsls	r5, r4, #2
 800958c:	195b      	adds	r3, r3, r5
 800958e:	3b04      	subs	r3, #4
 8009590:	6819      	ldr	r1, [r3, #0]
 8009592:	2900      	cmp	r1, #0
 8009594:	d00f      	beq.n	80095b6 <__mdiff+0x11e>
 8009596:	6110      	str	r0, [r2, #16]
 8009598:	e797      	b.n	80094ca <__mdiff+0x32>
 800959a:	ce02      	ldmia	r6!, {r1}
 800959c:	b28d      	uxth	r5, r1
 800959e:	19ed      	adds	r5, r5, r7
 80095a0:	0c0f      	lsrs	r7, r1, #16
 80095a2:	1429      	asrs	r1, r5, #16
 80095a4:	1879      	adds	r1, r7, r1
 80095a6:	140f      	asrs	r7, r1, #16
 80095a8:	b2ad      	uxth	r5, r5
 80095aa:	0409      	lsls	r1, r1, #16
 80095ac:	430d      	orrs	r5, r1
 80095ae:	4661      	mov	r1, ip
 80095b0:	c120      	stmia	r1!, {r5}
 80095b2:	468c      	mov	ip, r1
 80095b4:	e7dd      	b.n	8009572 <__mdiff+0xda>
 80095b6:	3801      	subs	r0, #1
 80095b8:	e7e9      	b.n	800958e <__mdiff+0xf6>
 80095ba:	46c0      	nop			; (mov r8, r8)
 80095bc:	0800aadb 	.word	0x0800aadb
 80095c0:	00000232 	.word	0x00000232
 80095c4:	0800aaec 	.word	0x0800aaec

080095c8 <__d2b>:
 80095c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ca:	2101      	movs	r1, #1
 80095cc:	0014      	movs	r4, r2
 80095ce:	001e      	movs	r6, r3
 80095d0:	9f08      	ldr	r7, [sp, #32]
 80095d2:	f7ff fcc1 	bl	8008f58 <_Balloc>
 80095d6:	1e05      	subs	r5, r0, #0
 80095d8:	d105      	bne.n	80095e6 <__d2b+0x1e>
 80095da:	0002      	movs	r2, r0
 80095dc:	4b26      	ldr	r3, [pc, #152]	; (8009678 <__d2b+0xb0>)
 80095de:	4927      	ldr	r1, [pc, #156]	; (800967c <__d2b+0xb4>)
 80095e0:	4827      	ldr	r0, [pc, #156]	; (8009680 <__d2b+0xb8>)
 80095e2:	f000 fad7 	bl	8009b94 <__assert_func>
 80095e6:	0333      	lsls	r3, r6, #12
 80095e8:	0076      	lsls	r6, r6, #1
 80095ea:	0b1b      	lsrs	r3, r3, #12
 80095ec:	0d76      	lsrs	r6, r6, #21
 80095ee:	d124      	bne.n	800963a <__d2b+0x72>
 80095f0:	9301      	str	r3, [sp, #4]
 80095f2:	2c00      	cmp	r4, #0
 80095f4:	d027      	beq.n	8009646 <__d2b+0x7e>
 80095f6:	4668      	mov	r0, sp
 80095f8:	9400      	str	r4, [sp, #0]
 80095fa:	f7ff fd73 	bl	80090e4 <__lo0bits>
 80095fe:	9c00      	ldr	r4, [sp, #0]
 8009600:	2800      	cmp	r0, #0
 8009602:	d01e      	beq.n	8009642 <__d2b+0x7a>
 8009604:	9b01      	ldr	r3, [sp, #4]
 8009606:	2120      	movs	r1, #32
 8009608:	001a      	movs	r2, r3
 800960a:	1a09      	subs	r1, r1, r0
 800960c:	408a      	lsls	r2, r1
 800960e:	40c3      	lsrs	r3, r0
 8009610:	4322      	orrs	r2, r4
 8009612:	616a      	str	r2, [r5, #20]
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	9c01      	ldr	r4, [sp, #4]
 8009618:	61ac      	str	r4, [r5, #24]
 800961a:	1e63      	subs	r3, r4, #1
 800961c:	419c      	sbcs	r4, r3
 800961e:	3401      	adds	r4, #1
 8009620:	612c      	str	r4, [r5, #16]
 8009622:	2e00      	cmp	r6, #0
 8009624:	d018      	beq.n	8009658 <__d2b+0x90>
 8009626:	4b17      	ldr	r3, [pc, #92]	; (8009684 <__d2b+0xbc>)
 8009628:	18f6      	adds	r6, r6, r3
 800962a:	2335      	movs	r3, #53	; 0x35
 800962c:	1836      	adds	r6, r6, r0
 800962e:	1a18      	subs	r0, r3, r0
 8009630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009632:	603e      	str	r6, [r7, #0]
 8009634:	6018      	str	r0, [r3, #0]
 8009636:	0028      	movs	r0, r5
 8009638:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800963a:	2280      	movs	r2, #128	; 0x80
 800963c:	0352      	lsls	r2, r2, #13
 800963e:	4313      	orrs	r3, r2
 8009640:	e7d6      	b.n	80095f0 <__d2b+0x28>
 8009642:	616c      	str	r4, [r5, #20]
 8009644:	e7e7      	b.n	8009616 <__d2b+0x4e>
 8009646:	a801      	add	r0, sp, #4
 8009648:	f7ff fd4c 	bl	80090e4 <__lo0bits>
 800964c:	2401      	movs	r4, #1
 800964e:	9b01      	ldr	r3, [sp, #4]
 8009650:	612c      	str	r4, [r5, #16]
 8009652:	616b      	str	r3, [r5, #20]
 8009654:	3020      	adds	r0, #32
 8009656:	e7e4      	b.n	8009622 <__d2b+0x5a>
 8009658:	4b0b      	ldr	r3, [pc, #44]	; (8009688 <__d2b+0xc0>)
 800965a:	18c0      	adds	r0, r0, r3
 800965c:	4b0b      	ldr	r3, [pc, #44]	; (800968c <__d2b+0xc4>)
 800965e:	6038      	str	r0, [r7, #0]
 8009660:	18e3      	adds	r3, r4, r3
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	18eb      	adds	r3, r5, r3
 8009666:	6958      	ldr	r0, [r3, #20]
 8009668:	f7ff fd22 	bl	80090b0 <__hi0bits>
 800966c:	0164      	lsls	r4, r4, #5
 800966e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009670:	1a24      	subs	r4, r4, r0
 8009672:	601c      	str	r4, [r3, #0]
 8009674:	e7df      	b.n	8009636 <__d2b+0x6e>
 8009676:	46c0      	nop			; (mov r8, r8)
 8009678:	0800aadb 	.word	0x0800aadb
 800967c:	0000030a 	.word	0x0000030a
 8009680:	0800aaec 	.word	0x0800aaec
 8009684:	fffffbcd 	.word	0xfffffbcd
 8009688:	fffffbce 	.word	0xfffffbce
 800968c:	3fffffff 	.word	0x3fffffff

08009690 <_calloc_r>:
 8009690:	b570      	push	{r4, r5, r6, lr}
 8009692:	0c13      	lsrs	r3, r2, #16
 8009694:	0c0d      	lsrs	r5, r1, #16
 8009696:	d11e      	bne.n	80096d6 <_calloc_r+0x46>
 8009698:	2b00      	cmp	r3, #0
 800969a:	d10c      	bne.n	80096b6 <_calloc_r+0x26>
 800969c:	b289      	uxth	r1, r1
 800969e:	b294      	uxth	r4, r2
 80096a0:	434c      	muls	r4, r1
 80096a2:	0021      	movs	r1, r4
 80096a4:	f000 f88c 	bl	80097c0 <_malloc_r>
 80096a8:	1e05      	subs	r5, r0, #0
 80096aa:	d01b      	beq.n	80096e4 <_calloc_r+0x54>
 80096ac:	0022      	movs	r2, r4
 80096ae:	2100      	movs	r1, #0
 80096b0:	f7fe f8f4 	bl	800789c <memset>
 80096b4:	e016      	b.n	80096e4 <_calloc_r+0x54>
 80096b6:	1c1d      	adds	r5, r3, #0
 80096b8:	1c0b      	adds	r3, r1, #0
 80096ba:	b292      	uxth	r2, r2
 80096bc:	b289      	uxth	r1, r1
 80096be:	b29c      	uxth	r4, r3
 80096c0:	4351      	muls	r1, r2
 80096c2:	b2ab      	uxth	r3, r5
 80096c4:	4363      	muls	r3, r4
 80096c6:	0c0c      	lsrs	r4, r1, #16
 80096c8:	191c      	adds	r4, r3, r4
 80096ca:	0c22      	lsrs	r2, r4, #16
 80096cc:	d107      	bne.n	80096de <_calloc_r+0x4e>
 80096ce:	0424      	lsls	r4, r4, #16
 80096d0:	b289      	uxth	r1, r1
 80096d2:	430c      	orrs	r4, r1
 80096d4:	e7e5      	b.n	80096a2 <_calloc_r+0x12>
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <_calloc_r+0x4e>
 80096da:	1c13      	adds	r3, r2, #0
 80096dc:	e7ed      	b.n	80096ba <_calloc_r+0x2a>
 80096de:	230c      	movs	r3, #12
 80096e0:	2500      	movs	r5, #0
 80096e2:	6003      	str	r3, [r0, #0]
 80096e4:	0028      	movs	r0, r5
 80096e6:	bd70      	pop	{r4, r5, r6, pc}

080096e8 <_free_r>:
 80096e8:	b570      	push	{r4, r5, r6, lr}
 80096ea:	0005      	movs	r5, r0
 80096ec:	2900      	cmp	r1, #0
 80096ee:	d010      	beq.n	8009712 <_free_r+0x2a>
 80096f0:	1f0c      	subs	r4, r1, #4
 80096f2:	6823      	ldr	r3, [r4, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	da00      	bge.n	80096fa <_free_r+0x12>
 80096f8:	18e4      	adds	r4, r4, r3
 80096fa:	0028      	movs	r0, r5
 80096fc:	f000 fa9e 	bl	8009c3c <__malloc_lock>
 8009700:	4a1d      	ldr	r2, [pc, #116]	; (8009778 <_free_r+0x90>)
 8009702:	6813      	ldr	r3, [r2, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d105      	bne.n	8009714 <_free_r+0x2c>
 8009708:	6063      	str	r3, [r4, #4]
 800970a:	6014      	str	r4, [r2, #0]
 800970c:	0028      	movs	r0, r5
 800970e:	f000 fa9d 	bl	8009c4c <__malloc_unlock>
 8009712:	bd70      	pop	{r4, r5, r6, pc}
 8009714:	42a3      	cmp	r3, r4
 8009716:	d908      	bls.n	800972a <_free_r+0x42>
 8009718:	6821      	ldr	r1, [r4, #0]
 800971a:	1860      	adds	r0, r4, r1
 800971c:	4283      	cmp	r3, r0
 800971e:	d1f3      	bne.n	8009708 <_free_r+0x20>
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	1841      	adds	r1, r0, r1
 8009726:	6021      	str	r1, [r4, #0]
 8009728:	e7ee      	b.n	8009708 <_free_r+0x20>
 800972a:	001a      	movs	r2, r3
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <_free_r+0x4e>
 8009732:	42a3      	cmp	r3, r4
 8009734:	d9f9      	bls.n	800972a <_free_r+0x42>
 8009736:	6811      	ldr	r1, [r2, #0]
 8009738:	1850      	adds	r0, r2, r1
 800973a:	42a0      	cmp	r0, r4
 800973c:	d10b      	bne.n	8009756 <_free_r+0x6e>
 800973e:	6820      	ldr	r0, [r4, #0]
 8009740:	1809      	adds	r1, r1, r0
 8009742:	1850      	adds	r0, r2, r1
 8009744:	6011      	str	r1, [r2, #0]
 8009746:	4283      	cmp	r3, r0
 8009748:	d1e0      	bne.n	800970c <_free_r+0x24>
 800974a:	6818      	ldr	r0, [r3, #0]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	1841      	adds	r1, r0, r1
 8009750:	6011      	str	r1, [r2, #0]
 8009752:	6053      	str	r3, [r2, #4]
 8009754:	e7da      	b.n	800970c <_free_r+0x24>
 8009756:	42a0      	cmp	r0, r4
 8009758:	d902      	bls.n	8009760 <_free_r+0x78>
 800975a:	230c      	movs	r3, #12
 800975c:	602b      	str	r3, [r5, #0]
 800975e:	e7d5      	b.n	800970c <_free_r+0x24>
 8009760:	6821      	ldr	r1, [r4, #0]
 8009762:	1860      	adds	r0, r4, r1
 8009764:	4283      	cmp	r3, r0
 8009766:	d103      	bne.n	8009770 <_free_r+0x88>
 8009768:	6818      	ldr	r0, [r3, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	1841      	adds	r1, r0, r1
 800976e:	6021      	str	r1, [r4, #0]
 8009770:	6063      	str	r3, [r4, #4]
 8009772:	6054      	str	r4, [r2, #4]
 8009774:	e7ca      	b.n	800970c <_free_r+0x24>
 8009776:	46c0      	nop			; (mov r8, r8)
 8009778:	20000444 	.word	0x20000444

0800977c <sbrk_aligned>:
 800977c:	b570      	push	{r4, r5, r6, lr}
 800977e:	4e0f      	ldr	r6, [pc, #60]	; (80097bc <sbrk_aligned+0x40>)
 8009780:	000d      	movs	r5, r1
 8009782:	6831      	ldr	r1, [r6, #0]
 8009784:	0004      	movs	r4, r0
 8009786:	2900      	cmp	r1, #0
 8009788:	d102      	bne.n	8009790 <sbrk_aligned+0x14>
 800978a:	f000 f9f1 	bl	8009b70 <_sbrk_r>
 800978e:	6030      	str	r0, [r6, #0]
 8009790:	0029      	movs	r1, r5
 8009792:	0020      	movs	r0, r4
 8009794:	f000 f9ec 	bl	8009b70 <_sbrk_r>
 8009798:	1c43      	adds	r3, r0, #1
 800979a:	d00a      	beq.n	80097b2 <sbrk_aligned+0x36>
 800979c:	2303      	movs	r3, #3
 800979e:	1cc5      	adds	r5, r0, #3
 80097a0:	439d      	bics	r5, r3
 80097a2:	42a8      	cmp	r0, r5
 80097a4:	d007      	beq.n	80097b6 <sbrk_aligned+0x3a>
 80097a6:	1a29      	subs	r1, r5, r0
 80097a8:	0020      	movs	r0, r4
 80097aa:	f000 f9e1 	bl	8009b70 <_sbrk_r>
 80097ae:	1c43      	adds	r3, r0, #1
 80097b0:	d101      	bne.n	80097b6 <sbrk_aligned+0x3a>
 80097b2:	2501      	movs	r5, #1
 80097b4:	426d      	negs	r5, r5
 80097b6:	0028      	movs	r0, r5
 80097b8:	bd70      	pop	{r4, r5, r6, pc}
 80097ba:	46c0      	nop			; (mov r8, r8)
 80097bc:	20000448 	.word	0x20000448

080097c0 <_malloc_r>:
 80097c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097c2:	2203      	movs	r2, #3
 80097c4:	1ccb      	adds	r3, r1, #3
 80097c6:	4393      	bics	r3, r2
 80097c8:	3308      	adds	r3, #8
 80097ca:	0006      	movs	r6, r0
 80097cc:	001f      	movs	r7, r3
 80097ce:	2b0c      	cmp	r3, #12
 80097d0:	d232      	bcs.n	8009838 <_malloc_r+0x78>
 80097d2:	270c      	movs	r7, #12
 80097d4:	42b9      	cmp	r1, r7
 80097d6:	d831      	bhi.n	800983c <_malloc_r+0x7c>
 80097d8:	0030      	movs	r0, r6
 80097da:	f000 fa2f 	bl	8009c3c <__malloc_lock>
 80097de:	4d32      	ldr	r5, [pc, #200]	; (80098a8 <_malloc_r+0xe8>)
 80097e0:	682b      	ldr	r3, [r5, #0]
 80097e2:	001c      	movs	r4, r3
 80097e4:	2c00      	cmp	r4, #0
 80097e6:	d12e      	bne.n	8009846 <_malloc_r+0x86>
 80097e8:	0039      	movs	r1, r7
 80097ea:	0030      	movs	r0, r6
 80097ec:	f7ff ffc6 	bl	800977c <sbrk_aligned>
 80097f0:	0004      	movs	r4, r0
 80097f2:	1c43      	adds	r3, r0, #1
 80097f4:	d11e      	bne.n	8009834 <_malloc_r+0x74>
 80097f6:	682c      	ldr	r4, [r5, #0]
 80097f8:	0025      	movs	r5, r4
 80097fa:	2d00      	cmp	r5, #0
 80097fc:	d14a      	bne.n	8009894 <_malloc_r+0xd4>
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	0029      	movs	r1, r5
 8009802:	18e3      	adds	r3, r4, r3
 8009804:	0030      	movs	r0, r6
 8009806:	9301      	str	r3, [sp, #4]
 8009808:	f000 f9b2 	bl	8009b70 <_sbrk_r>
 800980c:	9b01      	ldr	r3, [sp, #4]
 800980e:	4283      	cmp	r3, r0
 8009810:	d143      	bne.n	800989a <_malloc_r+0xda>
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	3703      	adds	r7, #3
 8009816:	1aff      	subs	r7, r7, r3
 8009818:	2303      	movs	r3, #3
 800981a:	439f      	bics	r7, r3
 800981c:	3708      	adds	r7, #8
 800981e:	2f0c      	cmp	r7, #12
 8009820:	d200      	bcs.n	8009824 <_malloc_r+0x64>
 8009822:	270c      	movs	r7, #12
 8009824:	0039      	movs	r1, r7
 8009826:	0030      	movs	r0, r6
 8009828:	f7ff ffa8 	bl	800977c <sbrk_aligned>
 800982c:	1c43      	adds	r3, r0, #1
 800982e:	d034      	beq.n	800989a <_malloc_r+0xda>
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	19df      	adds	r7, r3, r7
 8009834:	6027      	str	r7, [r4, #0]
 8009836:	e013      	b.n	8009860 <_malloc_r+0xa0>
 8009838:	2b00      	cmp	r3, #0
 800983a:	dacb      	bge.n	80097d4 <_malloc_r+0x14>
 800983c:	230c      	movs	r3, #12
 800983e:	2500      	movs	r5, #0
 8009840:	6033      	str	r3, [r6, #0]
 8009842:	0028      	movs	r0, r5
 8009844:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009846:	6822      	ldr	r2, [r4, #0]
 8009848:	1bd1      	subs	r1, r2, r7
 800984a:	d420      	bmi.n	800988e <_malloc_r+0xce>
 800984c:	290b      	cmp	r1, #11
 800984e:	d917      	bls.n	8009880 <_malloc_r+0xc0>
 8009850:	19e2      	adds	r2, r4, r7
 8009852:	6027      	str	r7, [r4, #0]
 8009854:	42a3      	cmp	r3, r4
 8009856:	d111      	bne.n	800987c <_malloc_r+0xbc>
 8009858:	602a      	str	r2, [r5, #0]
 800985a:	6863      	ldr	r3, [r4, #4]
 800985c:	6011      	str	r1, [r2, #0]
 800985e:	6053      	str	r3, [r2, #4]
 8009860:	0030      	movs	r0, r6
 8009862:	0025      	movs	r5, r4
 8009864:	f000 f9f2 	bl	8009c4c <__malloc_unlock>
 8009868:	2207      	movs	r2, #7
 800986a:	350b      	adds	r5, #11
 800986c:	1d23      	adds	r3, r4, #4
 800986e:	4395      	bics	r5, r2
 8009870:	1aea      	subs	r2, r5, r3
 8009872:	429d      	cmp	r5, r3
 8009874:	d0e5      	beq.n	8009842 <_malloc_r+0x82>
 8009876:	1b5b      	subs	r3, r3, r5
 8009878:	50a3      	str	r3, [r4, r2]
 800987a:	e7e2      	b.n	8009842 <_malloc_r+0x82>
 800987c:	605a      	str	r2, [r3, #4]
 800987e:	e7ec      	b.n	800985a <_malloc_r+0x9a>
 8009880:	6862      	ldr	r2, [r4, #4]
 8009882:	42a3      	cmp	r3, r4
 8009884:	d101      	bne.n	800988a <_malloc_r+0xca>
 8009886:	602a      	str	r2, [r5, #0]
 8009888:	e7ea      	b.n	8009860 <_malloc_r+0xa0>
 800988a:	605a      	str	r2, [r3, #4]
 800988c:	e7e8      	b.n	8009860 <_malloc_r+0xa0>
 800988e:	0023      	movs	r3, r4
 8009890:	6864      	ldr	r4, [r4, #4]
 8009892:	e7a7      	b.n	80097e4 <_malloc_r+0x24>
 8009894:	002c      	movs	r4, r5
 8009896:	686d      	ldr	r5, [r5, #4]
 8009898:	e7af      	b.n	80097fa <_malloc_r+0x3a>
 800989a:	230c      	movs	r3, #12
 800989c:	0030      	movs	r0, r6
 800989e:	6033      	str	r3, [r6, #0]
 80098a0:	f000 f9d4 	bl	8009c4c <__malloc_unlock>
 80098a4:	e7cd      	b.n	8009842 <_malloc_r+0x82>
 80098a6:	46c0      	nop			; (mov r8, r8)
 80098a8:	20000444 	.word	0x20000444

080098ac <__ssputs_r>:
 80098ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ae:	688e      	ldr	r6, [r1, #8]
 80098b0:	b085      	sub	sp, #20
 80098b2:	0007      	movs	r7, r0
 80098b4:	000c      	movs	r4, r1
 80098b6:	9203      	str	r2, [sp, #12]
 80098b8:	9301      	str	r3, [sp, #4]
 80098ba:	429e      	cmp	r6, r3
 80098bc:	d83c      	bhi.n	8009938 <__ssputs_r+0x8c>
 80098be:	2390      	movs	r3, #144	; 0x90
 80098c0:	898a      	ldrh	r2, [r1, #12]
 80098c2:	00db      	lsls	r3, r3, #3
 80098c4:	421a      	tst	r2, r3
 80098c6:	d034      	beq.n	8009932 <__ssputs_r+0x86>
 80098c8:	6909      	ldr	r1, [r1, #16]
 80098ca:	6823      	ldr	r3, [r4, #0]
 80098cc:	6960      	ldr	r0, [r4, #20]
 80098ce:	1a5b      	subs	r3, r3, r1
 80098d0:	9302      	str	r3, [sp, #8]
 80098d2:	2303      	movs	r3, #3
 80098d4:	4343      	muls	r3, r0
 80098d6:	0fdd      	lsrs	r5, r3, #31
 80098d8:	18ed      	adds	r5, r5, r3
 80098da:	9b01      	ldr	r3, [sp, #4]
 80098dc:	9802      	ldr	r0, [sp, #8]
 80098de:	3301      	adds	r3, #1
 80098e0:	181b      	adds	r3, r3, r0
 80098e2:	106d      	asrs	r5, r5, #1
 80098e4:	42ab      	cmp	r3, r5
 80098e6:	d900      	bls.n	80098ea <__ssputs_r+0x3e>
 80098e8:	001d      	movs	r5, r3
 80098ea:	0553      	lsls	r3, r2, #21
 80098ec:	d532      	bpl.n	8009954 <__ssputs_r+0xa8>
 80098ee:	0029      	movs	r1, r5
 80098f0:	0038      	movs	r0, r7
 80098f2:	f7ff ff65 	bl	80097c0 <_malloc_r>
 80098f6:	1e06      	subs	r6, r0, #0
 80098f8:	d109      	bne.n	800990e <__ssputs_r+0x62>
 80098fa:	230c      	movs	r3, #12
 80098fc:	603b      	str	r3, [r7, #0]
 80098fe:	2340      	movs	r3, #64	; 0x40
 8009900:	2001      	movs	r0, #1
 8009902:	89a2      	ldrh	r2, [r4, #12]
 8009904:	4240      	negs	r0, r0
 8009906:	4313      	orrs	r3, r2
 8009908:	81a3      	strh	r3, [r4, #12]
 800990a:	b005      	add	sp, #20
 800990c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800990e:	9a02      	ldr	r2, [sp, #8]
 8009910:	6921      	ldr	r1, [r4, #16]
 8009912:	f7ff fb18 	bl	8008f46 <memcpy>
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	4a14      	ldr	r2, [pc, #80]	; (800996c <__ssputs_r+0xc0>)
 800991a:	401a      	ands	r2, r3
 800991c:	2380      	movs	r3, #128	; 0x80
 800991e:	4313      	orrs	r3, r2
 8009920:	81a3      	strh	r3, [r4, #12]
 8009922:	9b02      	ldr	r3, [sp, #8]
 8009924:	6126      	str	r6, [r4, #16]
 8009926:	18f6      	adds	r6, r6, r3
 8009928:	6026      	str	r6, [r4, #0]
 800992a:	6165      	str	r5, [r4, #20]
 800992c:	9e01      	ldr	r6, [sp, #4]
 800992e:	1aed      	subs	r5, r5, r3
 8009930:	60a5      	str	r5, [r4, #8]
 8009932:	9b01      	ldr	r3, [sp, #4]
 8009934:	429e      	cmp	r6, r3
 8009936:	d900      	bls.n	800993a <__ssputs_r+0x8e>
 8009938:	9e01      	ldr	r6, [sp, #4]
 800993a:	0032      	movs	r2, r6
 800993c:	9903      	ldr	r1, [sp, #12]
 800993e:	6820      	ldr	r0, [r4, #0]
 8009940:	f000 f968 	bl	8009c14 <memmove>
 8009944:	68a3      	ldr	r3, [r4, #8]
 8009946:	2000      	movs	r0, #0
 8009948:	1b9b      	subs	r3, r3, r6
 800994a:	60a3      	str	r3, [r4, #8]
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	199e      	adds	r6, r3, r6
 8009950:	6026      	str	r6, [r4, #0]
 8009952:	e7da      	b.n	800990a <__ssputs_r+0x5e>
 8009954:	002a      	movs	r2, r5
 8009956:	0038      	movs	r0, r7
 8009958:	f000 f980 	bl	8009c5c <_realloc_r>
 800995c:	1e06      	subs	r6, r0, #0
 800995e:	d1e0      	bne.n	8009922 <__ssputs_r+0x76>
 8009960:	0038      	movs	r0, r7
 8009962:	6921      	ldr	r1, [r4, #16]
 8009964:	f7ff fec0 	bl	80096e8 <_free_r>
 8009968:	e7c7      	b.n	80098fa <__ssputs_r+0x4e>
 800996a:	46c0      	nop			; (mov r8, r8)
 800996c:	fffffb7f 	.word	0xfffffb7f

08009970 <_svfiprintf_r>:
 8009970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009972:	b0a1      	sub	sp, #132	; 0x84
 8009974:	9003      	str	r0, [sp, #12]
 8009976:	001d      	movs	r5, r3
 8009978:	898b      	ldrh	r3, [r1, #12]
 800997a:	000f      	movs	r7, r1
 800997c:	0016      	movs	r6, r2
 800997e:	061b      	lsls	r3, r3, #24
 8009980:	d511      	bpl.n	80099a6 <_svfiprintf_r+0x36>
 8009982:	690b      	ldr	r3, [r1, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10e      	bne.n	80099a6 <_svfiprintf_r+0x36>
 8009988:	2140      	movs	r1, #64	; 0x40
 800998a:	f7ff ff19 	bl	80097c0 <_malloc_r>
 800998e:	6038      	str	r0, [r7, #0]
 8009990:	6138      	str	r0, [r7, #16]
 8009992:	2800      	cmp	r0, #0
 8009994:	d105      	bne.n	80099a2 <_svfiprintf_r+0x32>
 8009996:	230c      	movs	r3, #12
 8009998:	9a03      	ldr	r2, [sp, #12]
 800999a:	3801      	subs	r0, #1
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	b021      	add	sp, #132	; 0x84
 80099a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099a2:	2340      	movs	r3, #64	; 0x40
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	2300      	movs	r3, #0
 80099a8:	ac08      	add	r4, sp, #32
 80099aa:	6163      	str	r3, [r4, #20]
 80099ac:	3320      	adds	r3, #32
 80099ae:	7663      	strb	r3, [r4, #25]
 80099b0:	3310      	adds	r3, #16
 80099b2:	76a3      	strb	r3, [r4, #26]
 80099b4:	9507      	str	r5, [sp, #28]
 80099b6:	0035      	movs	r5, r6
 80099b8:	782b      	ldrb	r3, [r5, #0]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <_svfiprintf_r+0x52>
 80099be:	2b25      	cmp	r3, #37	; 0x25
 80099c0:	d147      	bne.n	8009a52 <_svfiprintf_r+0xe2>
 80099c2:	1bab      	subs	r3, r5, r6
 80099c4:	9305      	str	r3, [sp, #20]
 80099c6:	42b5      	cmp	r5, r6
 80099c8:	d00c      	beq.n	80099e4 <_svfiprintf_r+0x74>
 80099ca:	0032      	movs	r2, r6
 80099cc:	0039      	movs	r1, r7
 80099ce:	9803      	ldr	r0, [sp, #12]
 80099d0:	f7ff ff6c 	bl	80098ac <__ssputs_r>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d100      	bne.n	80099da <_svfiprintf_r+0x6a>
 80099d8:	e0ae      	b.n	8009b38 <_svfiprintf_r+0x1c8>
 80099da:	6962      	ldr	r2, [r4, #20]
 80099dc:	9b05      	ldr	r3, [sp, #20]
 80099de:	4694      	mov	ip, r2
 80099e0:	4463      	add	r3, ip
 80099e2:	6163      	str	r3, [r4, #20]
 80099e4:	782b      	ldrb	r3, [r5, #0]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d100      	bne.n	80099ec <_svfiprintf_r+0x7c>
 80099ea:	e0a5      	b.n	8009b38 <_svfiprintf_r+0x1c8>
 80099ec:	2201      	movs	r2, #1
 80099ee:	2300      	movs	r3, #0
 80099f0:	4252      	negs	r2, r2
 80099f2:	6062      	str	r2, [r4, #4]
 80099f4:	a904      	add	r1, sp, #16
 80099f6:	3254      	adds	r2, #84	; 0x54
 80099f8:	1852      	adds	r2, r2, r1
 80099fa:	1c6e      	adds	r6, r5, #1
 80099fc:	6023      	str	r3, [r4, #0]
 80099fe:	60e3      	str	r3, [r4, #12]
 8009a00:	60a3      	str	r3, [r4, #8]
 8009a02:	7013      	strb	r3, [r2, #0]
 8009a04:	65a3      	str	r3, [r4, #88]	; 0x58
 8009a06:	2205      	movs	r2, #5
 8009a08:	7831      	ldrb	r1, [r6, #0]
 8009a0a:	4854      	ldr	r0, [pc, #336]	; (8009b5c <_svfiprintf_r+0x1ec>)
 8009a0c:	f7ff fa90 	bl	8008f30 <memchr>
 8009a10:	1c75      	adds	r5, r6, #1
 8009a12:	2800      	cmp	r0, #0
 8009a14:	d11f      	bne.n	8009a56 <_svfiprintf_r+0xe6>
 8009a16:	6822      	ldr	r2, [r4, #0]
 8009a18:	06d3      	lsls	r3, r2, #27
 8009a1a:	d504      	bpl.n	8009a26 <_svfiprintf_r+0xb6>
 8009a1c:	2353      	movs	r3, #83	; 0x53
 8009a1e:	a904      	add	r1, sp, #16
 8009a20:	185b      	adds	r3, r3, r1
 8009a22:	2120      	movs	r1, #32
 8009a24:	7019      	strb	r1, [r3, #0]
 8009a26:	0713      	lsls	r3, r2, #28
 8009a28:	d504      	bpl.n	8009a34 <_svfiprintf_r+0xc4>
 8009a2a:	2353      	movs	r3, #83	; 0x53
 8009a2c:	a904      	add	r1, sp, #16
 8009a2e:	185b      	adds	r3, r3, r1
 8009a30:	212b      	movs	r1, #43	; 0x2b
 8009a32:	7019      	strb	r1, [r3, #0]
 8009a34:	7833      	ldrb	r3, [r6, #0]
 8009a36:	2b2a      	cmp	r3, #42	; 0x2a
 8009a38:	d016      	beq.n	8009a68 <_svfiprintf_r+0xf8>
 8009a3a:	0035      	movs	r5, r6
 8009a3c:	2100      	movs	r1, #0
 8009a3e:	200a      	movs	r0, #10
 8009a40:	68e3      	ldr	r3, [r4, #12]
 8009a42:	782a      	ldrb	r2, [r5, #0]
 8009a44:	1c6e      	adds	r6, r5, #1
 8009a46:	3a30      	subs	r2, #48	; 0x30
 8009a48:	2a09      	cmp	r2, #9
 8009a4a:	d94e      	bls.n	8009aea <_svfiprintf_r+0x17a>
 8009a4c:	2900      	cmp	r1, #0
 8009a4e:	d111      	bne.n	8009a74 <_svfiprintf_r+0x104>
 8009a50:	e017      	b.n	8009a82 <_svfiprintf_r+0x112>
 8009a52:	3501      	adds	r5, #1
 8009a54:	e7b0      	b.n	80099b8 <_svfiprintf_r+0x48>
 8009a56:	4b41      	ldr	r3, [pc, #260]	; (8009b5c <_svfiprintf_r+0x1ec>)
 8009a58:	6822      	ldr	r2, [r4, #0]
 8009a5a:	1ac0      	subs	r0, r0, r3
 8009a5c:	2301      	movs	r3, #1
 8009a5e:	4083      	lsls	r3, r0
 8009a60:	4313      	orrs	r3, r2
 8009a62:	002e      	movs	r6, r5
 8009a64:	6023      	str	r3, [r4, #0]
 8009a66:	e7ce      	b.n	8009a06 <_svfiprintf_r+0x96>
 8009a68:	9b07      	ldr	r3, [sp, #28]
 8009a6a:	1d19      	adds	r1, r3, #4
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	9107      	str	r1, [sp, #28]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	db01      	blt.n	8009a78 <_svfiprintf_r+0x108>
 8009a74:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a76:	e004      	b.n	8009a82 <_svfiprintf_r+0x112>
 8009a78:	425b      	negs	r3, r3
 8009a7a:	60e3      	str	r3, [r4, #12]
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	6023      	str	r3, [r4, #0]
 8009a82:	782b      	ldrb	r3, [r5, #0]
 8009a84:	2b2e      	cmp	r3, #46	; 0x2e
 8009a86:	d10a      	bne.n	8009a9e <_svfiprintf_r+0x12e>
 8009a88:	786b      	ldrb	r3, [r5, #1]
 8009a8a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a8c:	d135      	bne.n	8009afa <_svfiprintf_r+0x18a>
 8009a8e:	9b07      	ldr	r3, [sp, #28]
 8009a90:	3502      	adds	r5, #2
 8009a92:	1d1a      	adds	r2, r3, #4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	9207      	str	r2, [sp, #28]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	db2b      	blt.n	8009af4 <_svfiprintf_r+0x184>
 8009a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9e:	4e30      	ldr	r6, [pc, #192]	; (8009b60 <_svfiprintf_r+0x1f0>)
 8009aa0:	2203      	movs	r2, #3
 8009aa2:	0030      	movs	r0, r6
 8009aa4:	7829      	ldrb	r1, [r5, #0]
 8009aa6:	f7ff fa43 	bl	8008f30 <memchr>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	d006      	beq.n	8009abc <_svfiprintf_r+0x14c>
 8009aae:	2340      	movs	r3, #64	; 0x40
 8009ab0:	1b80      	subs	r0, r0, r6
 8009ab2:	4083      	lsls	r3, r0
 8009ab4:	6822      	ldr	r2, [r4, #0]
 8009ab6:	3501      	adds	r5, #1
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	6023      	str	r3, [r4, #0]
 8009abc:	7829      	ldrb	r1, [r5, #0]
 8009abe:	2206      	movs	r2, #6
 8009ac0:	4828      	ldr	r0, [pc, #160]	; (8009b64 <_svfiprintf_r+0x1f4>)
 8009ac2:	1c6e      	adds	r6, r5, #1
 8009ac4:	7621      	strb	r1, [r4, #24]
 8009ac6:	f7ff fa33 	bl	8008f30 <memchr>
 8009aca:	2800      	cmp	r0, #0
 8009acc:	d03c      	beq.n	8009b48 <_svfiprintf_r+0x1d8>
 8009ace:	4b26      	ldr	r3, [pc, #152]	; (8009b68 <_svfiprintf_r+0x1f8>)
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d125      	bne.n	8009b20 <_svfiprintf_r+0x1b0>
 8009ad4:	2207      	movs	r2, #7
 8009ad6:	9b07      	ldr	r3, [sp, #28]
 8009ad8:	3307      	adds	r3, #7
 8009ada:	4393      	bics	r3, r2
 8009adc:	3308      	adds	r3, #8
 8009ade:	9307      	str	r3, [sp, #28]
 8009ae0:	6963      	ldr	r3, [r4, #20]
 8009ae2:	9a04      	ldr	r2, [sp, #16]
 8009ae4:	189b      	adds	r3, r3, r2
 8009ae6:	6163      	str	r3, [r4, #20]
 8009ae8:	e765      	b.n	80099b6 <_svfiprintf_r+0x46>
 8009aea:	4343      	muls	r3, r0
 8009aec:	0035      	movs	r5, r6
 8009aee:	2101      	movs	r1, #1
 8009af0:	189b      	adds	r3, r3, r2
 8009af2:	e7a6      	b.n	8009a42 <_svfiprintf_r+0xd2>
 8009af4:	2301      	movs	r3, #1
 8009af6:	425b      	negs	r3, r3
 8009af8:	e7d0      	b.n	8009a9c <_svfiprintf_r+0x12c>
 8009afa:	2300      	movs	r3, #0
 8009afc:	200a      	movs	r0, #10
 8009afe:	001a      	movs	r2, r3
 8009b00:	3501      	adds	r5, #1
 8009b02:	6063      	str	r3, [r4, #4]
 8009b04:	7829      	ldrb	r1, [r5, #0]
 8009b06:	1c6e      	adds	r6, r5, #1
 8009b08:	3930      	subs	r1, #48	; 0x30
 8009b0a:	2909      	cmp	r1, #9
 8009b0c:	d903      	bls.n	8009b16 <_svfiprintf_r+0x1a6>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0c5      	beq.n	8009a9e <_svfiprintf_r+0x12e>
 8009b12:	9209      	str	r2, [sp, #36]	; 0x24
 8009b14:	e7c3      	b.n	8009a9e <_svfiprintf_r+0x12e>
 8009b16:	4342      	muls	r2, r0
 8009b18:	0035      	movs	r5, r6
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	1852      	adds	r2, r2, r1
 8009b1e:	e7f1      	b.n	8009b04 <_svfiprintf_r+0x194>
 8009b20:	ab07      	add	r3, sp, #28
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	003a      	movs	r2, r7
 8009b26:	0021      	movs	r1, r4
 8009b28:	4b10      	ldr	r3, [pc, #64]	; (8009b6c <_svfiprintf_r+0x1fc>)
 8009b2a:	9803      	ldr	r0, [sp, #12]
 8009b2c:	f7fd ff68 	bl	8007a00 <_printf_float>
 8009b30:	9004      	str	r0, [sp, #16]
 8009b32:	9b04      	ldr	r3, [sp, #16]
 8009b34:	3301      	adds	r3, #1
 8009b36:	d1d3      	bne.n	8009ae0 <_svfiprintf_r+0x170>
 8009b38:	89bb      	ldrh	r3, [r7, #12]
 8009b3a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009b3c:	065b      	lsls	r3, r3, #25
 8009b3e:	d400      	bmi.n	8009b42 <_svfiprintf_r+0x1d2>
 8009b40:	e72d      	b.n	800999e <_svfiprintf_r+0x2e>
 8009b42:	2001      	movs	r0, #1
 8009b44:	4240      	negs	r0, r0
 8009b46:	e72a      	b.n	800999e <_svfiprintf_r+0x2e>
 8009b48:	ab07      	add	r3, sp, #28
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	003a      	movs	r2, r7
 8009b4e:	0021      	movs	r1, r4
 8009b50:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <_svfiprintf_r+0x1fc>)
 8009b52:	9803      	ldr	r0, [sp, #12]
 8009b54:	f7fe fa06 	bl	8007f64 <_printf_i>
 8009b58:	e7ea      	b.n	8009b30 <_svfiprintf_r+0x1c0>
 8009b5a:	46c0      	nop			; (mov r8, r8)
 8009b5c:	0800ac44 	.word	0x0800ac44
 8009b60:	0800ac4a 	.word	0x0800ac4a
 8009b64:	0800ac4e 	.word	0x0800ac4e
 8009b68:	08007a01 	.word	0x08007a01
 8009b6c:	080098ad 	.word	0x080098ad

08009b70 <_sbrk_r>:
 8009b70:	2300      	movs	r3, #0
 8009b72:	b570      	push	{r4, r5, r6, lr}
 8009b74:	4d06      	ldr	r5, [pc, #24]	; (8009b90 <_sbrk_r+0x20>)
 8009b76:	0004      	movs	r4, r0
 8009b78:	0008      	movs	r0, r1
 8009b7a:	602b      	str	r3, [r5, #0]
 8009b7c:	f7f9 fa50 	bl	8003020 <_sbrk>
 8009b80:	1c43      	adds	r3, r0, #1
 8009b82:	d103      	bne.n	8009b8c <_sbrk_r+0x1c>
 8009b84:	682b      	ldr	r3, [r5, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d000      	beq.n	8009b8c <_sbrk_r+0x1c>
 8009b8a:	6023      	str	r3, [r4, #0]
 8009b8c:	bd70      	pop	{r4, r5, r6, pc}
 8009b8e:	46c0      	nop			; (mov r8, r8)
 8009b90:	2000044c 	.word	0x2000044c

08009b94 <__assert_func>:
 8009b94:	b530      	push	{r4, r5, lr}
 8009b96:	0014      	movs	r4, r2
 8009b98:	001a      	movs	r2, r3
 8009b9a:	4b09      	ldr	r3, [pc, #36]	; (8009bc0 <__assert_func+0x2c>)
 8009b9c:	0005      	movs	r5, r0
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	b085      	sub	sp, #20
 8009ba2:	68d8      	ldr	r0, [r3, #12]
 8009ba4:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <__assert_func+0x30>)
 8009ba6:	2c00      	cmp	r4, #0
 8009ba8:	d101      	bne.n	8009bae <__assert_func+0x1a>
 8009baa:	4b07      	ldr	r3, [pc, #28]	; (8009bc8 <__assert_func+0x34>)
 8009bac:	001c      	movs	r4, r3
 8009bae:	9301      	str	r3, [sp, #4]
 8009bb0:	9100      	str	r1, [sp, #0]
 8009bb2:	002b      	movs	r3, r5
 8009bb4:	4905      	ldr	r1, [pc, #20]	; (8009bcc <__assert_func+0x38>)
 8009bb6:	9402      	str	r4, [sp, #8]
 8009bb8:	f000 f80a 	bl	8009bd0 <fiprintf>
 8009bbc:	f000 faba 	bl	800a134 <abort>
 8009bc0:	20000010 	.word	0x20000010
 8009bc4:	0800ac55 	.word	0x0800ac55
 8009bc8:	0800ac90 	.word	0x0800ac90
 8009bcc:	0800ac62 	.word	0x0800ac62

08009bd0 <fiprintf>:
 8009bd0:	b40e      	push	{r1, r2, r3}
 8009bd2:	b503      	push	{r0, r1, lr}
 8009bd4:	0001      	movs	r1, r0
 8009bd6:	ab03      	add	r3, sp, #12
 8009bd8:	4804      	ldr	r0, [pc, #16]	; (8009bec <fiprintf+0x1c>)
 8009bda:	cb04      	ldmia	r3!, {r2}
 8009bdc:	6800      	ldr	r0, [r0, #0]
 8009bde:	9301      	str	r3, [sp, #4]
 8009be0:	f000 f892 	bl	8009d08 <_vfiprintf_r>
 8009be4:	b002      	add	sp, #8
 8009be6:	bc08      	pop	{r3}
 8009be8:	b003      	add	sp, #12
 8009bea:	4718      	bx	r3
 8009bec:	20000010 	.word	0x20000010

08009bf0 <__ascii_mbtowc>:
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	2900      	cmp	r1, #0
 8009bf4:	d100      	bne.n	8009bf8 <__ascii_mbtowc+0x8>
 8009bf6:	a901      	add	r1, sp, #4
 8009bf8:	1e10      	subs	r0, r2, #0
 8009bfa:	d006      	beq.n	8009c0a <__ascii_mbtowc+0x1a>
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d006      	beq.n	8009c0e <__ascii_mbtowc+0x1e>
 8009c00:	7813      	ldrb	r3, [r2, #0]
 8009c02:	600b      	str	r3, [r1, #0]
 8009c04:	7810      	ldrb	r0, [r2, #0]
 8009c06:	1e43      	subs	r3, r0, #1
 8009c08:	4198      	sbcs	r0, r3
 8009c0a:	b002      	add	sp, #8
 8009c0c:	4770      	bx	lr
 8009c0e:	2002      	movs	r0, #2
 8009c10:	4240      	negs	r0, r0
 8009c12:	e7fa      	b.n	8009c0a <__ascii_mbtowc+0x1a>

08009c14 <memmove>:
 8009c14:	b510      	push	{r4, lr}
 8009c16:	4288      	cmp	r0, r1
 8009c18:	d902      	bls.n	8009c20 <memmove+0xc>
 8009c1a:	188b      	adds	r3, r1, r2
 8009c1c:	4298      	cmp	r0, r3
 8009c1e:	d303      	bcc.n	8009c28 <memmove+0x14>
 8009c20:	2300      	movs	r3, #0
 8009c22:	e007      	b.n	8009c34 <memmove+0x20>
 8009c24:	5c8b      	ldrb	r3, [r1, r2]
 8009c26:	5483      	strb	r3, [r0, r2]
 8009c28:	3a01      	subs	r2, #1
 8009c2a:	d2fb      	bcs.n	8009c24 <memmove+0x10>
 8009c2c:	bd10      	pop	{r4, pc}
 8009c2e:	5ccc      	ldrb	r4, [r1, r3]
 8009c30:	54c4      	strb	r4, [r0, r3]
 8009c32:	3301      	adds	r3, #1
 8009c34:	429a      	cmp	r2, r3
 8009c36:	d1fa      	bne.n	8009c2e <memmove+0x1a>
 8009c38:	e7f8      	b.n	8009c2c <memmove+0x18>
	...

08009c3c <__malloc_lock>:
 8009c3c:	b510      	push	{r4, lr}
 8009c3e:	4802      	ldr	r0, [pc, #8]	; (8009c48 <__malloc_lock+0xc>)
 8009c40:	f000 fc4f 	bl	800a4e2 <__retarget_lock_acquire_recursive>
 8009c44:	bd10      	pop	{r4, pc}
 8009c46:	46c0      	nop			; (mov r8, r8)
 8009c48:	20000450 	.word	0x20000450

08009c4c <__malloc_unlock>:
 8009c4c:	b510      	push	{r4, lr}
 8009c4e:	4802      	ldr	r0, [pc, #8]	; (8009c58 <__malloc_unlock+0xc>)
 8009c50:	f000 fc48 	bl	800a4e4 <__retarget_lock_release_recursive>
 8009c54:	bd10      	pop	{r4, pc}
 8009c56:	46c0      	nop			; (mov r8, r8)
 8009c58:	20000450 	.word	0x20000450

08009c5c <_realloc_r>:
 8009c5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c5e:	0007      	movs	r7, r0
 8009c60:	000e      	movs	r6, r1
 8009c62:	0014      	movs	r4, r2
 8009c64:	2900      	cmp	r1, #0
 8009c66:	d105      	bne.n	8009c74 <_realloc_r+0x18>
 8009c68:	0011      	movs	r1, r2
 8009c6a:	f7ff fda9 	bl	80097c0 <_malloc_r>
 8009c6e:	0005      	movs	r5, r0
 8009c70:	0028      	movs	r0, r5
 8009c72:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c74:	2a00      	cmp	r2, #0
 8009c76:	d103      	bne.n	8009c80 <_realloc_r+0x24>
 8009c78:	f7ff fd36 	bl	80096e8 <_free_r>
 8009c7c:	0025      	movs	r5, r4
 8009c7e:	e7f7      	b.n	8009c70 <_realloc_r+0x14>
 8009c80:	f000 fc9e 	bl	800a5c0 <_malloc_usable_size_r>
 8009c84:	9001      	str	r0, [sp, #4]
 8009c86:	4284      	cmp	r4, r0
 8009c88:	d803      	bhi.n	8009c92 <_realloc_r+0x36>
 8009c8a:	0035      	movs	r5, r6
 8009c8c:	0843      	lsrs	r3, r0, #1
 8009c8e:	42a3      	cmp	r3, r4
 8009c90:	d3ee      	bcc.n	8009c70 <_realloc_r+0x14>
 8009c92:	0021      	movs	r1, r4
 8009c94:	0038      	movs	r0, r7
 8009c96:	f7ff fd93 	bl	80097c0 <_malloc_r>
 8009c9a:	1e05      	subs	r5, r0, #0
 8009c9c:	d0e8      	beq.n	8009c70 <_realloc_r+0x14>
 8009c9e:	9b01      	ldr	r3, [sp, #4]
 8009ca0:	0022      	movs	r2, r4
 8009ca2:	429c      	cmp	r4, r3
 8009ca4:	d900      	bls.n	8009ca8 <_realloc_r+0x4c>
 8009ca6:	001a      	movs	r2, r3
 8009ca8:	0031      	movs	r1, r6
 8009caa:	0028      	movs	r0, r5
 8009cac:	f7ff f94b 	bl	8008f46 <memcpy>
 8009cb0:	0031      	movs	r1, r6
 8009cb2:	0038      	movs	r0, r7
 8009cb4:	f7ff fd18 	bl	80096e8 <_free_r>
 8009cb8:	e7da      	b.n	8009c70 <_realloc_r+0x14>

08009cba <__sfputc_r>:
 8009cba:	6893      	ldr	r3, [r2, #8]
 8009cbc:	b510      	push	{r4, lr}
 8009cbe:	3b01      	subs	r3, #1
 8009cc0:	6093      	str	r3, [r2, #8]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	da04      	bge.n	8009cd0 <__sfputc_r+0x16>
 8009cc6:	6994      	ldr	r4, [r2, #24]
 8009cc8:	42a3      	cmp	r3, r4
 8009cca:	db07      	blt.n	8009cdc <__sfputc_r+0x22>
 8009ccc:	290a      	cmp	r1, #10
 8009cce:	d005      	beq.n	8009cdc <__sfputc_r+0x22>
 8009cd0:	6813      	ldr	r3, [r2, #0]
 8009cd2:	1c58      	adds	r0, r3, #1
 8009cd4:	6010      	str	r0, [r2, #0]
 8009cd6:	7019      	strb	r1, [r3, #0]
 8009cd8:	0008      	movs	r0, r1
 8009cda:	bd10      	pop	{r4, pc}
 8009cdc:	f000 f94e 	bl	8009f7c <__swbuf_r>
 8009ce0:	0001      	movs	r1, r0
 8009ce2:	e7f9      	b.n	8009cd8 <__sfputc_r+0x1e>

08009ce4 <__sfputs_r>:
 8009ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce6:	0006      	movs	r6, r0
 8009ce8:	000f      	movs	r7, r1
 8009cea:	0014      	movs	r4, r2
 8009cec:	18d5      	adds	r5, r2, r3
 8009cee:	42ac      	cmp	r4, r5
 8009cf0:	d101      	bne.n	8009cf6 <__sfputs_r+0x12>
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	e007      	b.n	8009d06 <__sfputs_r+0x22>
 8009cf6:	7821      	ldrb	r1, [r4, #0]
 8009cf8:	003a      	movs	r2, r7
 8009cfa:	0030      	movs	r0, r6
 8009cfc:	f7ff ffdd 	bl	8009cba <__sfputc_r>
 8009d00:	3401      	adds	r4, #1
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	d1f3      	bne.n	8009cee <__sfputs_r+0xa>
 8009d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d08 <_vfiprintf_r>:
 8009d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d0a:	b0a1      	sub	sp, #132	; 0x84
 8009d0c:	0006      	movs	r6, r0
 8009d0e:	000c      	movs	r4, r1
 8009d10:	001f      	movs	r7, r3
 8009d12:	9203      	str	r2, [sp, #12]
 8009d14:	2800      	cmp	r0, #0
 8009d16:	d004      	beq.n	8009d22 <_vfiprintf_r+0x1a>
 8009d18:	6983      	ldr	r3, [r0, #24]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d101      	bne.n	8009d22 <_vfiprintf_r+0x1a>
 8009d1e:	f000 fb3f 	bl	800a3a0 <__sinit>
 8009d22:	4b8e      	ldr	r3, [pc, #568]	; (8009f5c <_vfiprintf_r+0x254>)
 8009d24:	429c      	cmp	r4, r3
 8009d26:	d11c      	bne.n	8009d62 <_vfiprintf_r+0x5a>
 8009d28:	6874      	ldr	r4, [r6, #4]
 8009d2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d2c:	07db      	lsls	r3, r3, #31
 8009d2e:	d405      	bmi.n	8009d3c <_vfiprintf_r+0x34>
 8009d30:	89a3      	ldrh	r3, [r4, #12]
 8009d32:	059b      	lsls	r3, r3, #22
 8009d34:	d402      	bmi.n	8009d3c <_vfiprintf_r+0x34>
 8009d36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d38:	f000 fbd3 	bl	800a4e2 <__retarget_lock_acquire_recursive>
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	071b      	lsls	r3, r3, #28
 8009d40:	d502      	bpl.n	8009d48 <_vfiprintf_r+0x40>
 8009d42:	6923      	ldr	r3, [r4, #16]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d11d      	bne.n	8009d84 <_vfiprintf_r+0x7c>
 8009d48:	0021      	movs	r1, r4
 8009d4a:	0030      	movs	r0, r6
 8009d4c:	f000 f97a 	bl	800a044 <__swsetup_r>
 8009d50:	2800      	cmp	r0, #0
 8009d52:	d017      	beq.n	8009d84 <_vfiprintf_r+0x7c>
 8009d54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d56:	07db      	lsls	r3, r3, #31
 8009d58:	d50d      	bpl.n	8009d76 <_vfiprintf_r+0x6e>
 8009d5a:	2001      	movs	r0, #1
 8009d5c:	4240      	negs	r0, r0
 8009d5e:	b021      	add	sp, #132	; 0x84
 8009d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d62:	4b7f      	ldr	r3, [pc, #508]	; (8009f60 <_vfiprintf_r+0x258>)
 8009d64:	429c      	cmp	r4, r3
 8009d66:	d101      	bne.n	8009d6c <_vfiprintf_r+0x64>
 8009d68:	68b4      	ldr	r4, [r6, #8]
 8009d6a:	e7de      	b.n	8009d2a <_vfiprintf_r+0x22>
 8009d6c:	4b7d      	ldr	r3, [pc, #500]	; (8009f64 <_vfiprintf_r+0x25c>)
 8009d6e:	429c      	cmp	r4, r3
 8009d70:	d1db      	bne.n	8009d2a <_vfiprintf_r+0x22>
 8009d72:	68f4      	ldr	r4, [r6, #12]
 8009d74:	e7d9      	b.n	8009d2a <_vfiprintf_r+0x22>
 8009d76:	89a3      	ldrh	r3, [r4, #12]
 8009d78:	059b      	lsls	r3, r3, #22
 8009d7a:	d4ee      	bmi.n	8009d5a <_vfiprintf_r+0x52>
 8009d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d7e:	f000 fbb1 	bl	800a4e4 <__retarget_lock_release_recursive>
 8009d82:	e7ea      	b.n	8009d5a <_vfiprintf_r+0x52>
 8009d84:	2300      	movs	r3, #0
 8009d86:	ad08      	add	r5, sp, #32
 8009d88:	616b      	str	r3, [r5, #20]
 8009d8a:	3320      	adds	r3, #32
 8009d8c:	766b      	strb	r3, [r5, #25]
 8009d8e:	3310      	adds	r3, #16
 8009d90:	76ab      	strb	r3, [r5, #26]
 8009d92:	9707      	str	r7, [sp, #28]
 8009d94:	9f03      	ldr	r7, [sp, #12]
 8009d96:	783b      	ldrb	r3, [r7, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d001      	beq.n	8009da0 <_vfiprintf_r+0x98>
 8009d9c:	2b25      	cmp	r3, #37	; 0x25
 8009d9e:	d14e      	bne.n	8009e3e <_vfiprintf_r+0x136>
 8009da0:	9b03      	ldr	r3, [sp, #12]
 8009da2:	1afb      	subs	r3, r7, r3
 8009da4:	9305      	str	r3, [sp, #20]
 8009da6:	9b03      	ldr	r3, [sp, #12]
 8009da8:	429f      	cmp	r7, r3
 8009daa:	d00d      	beq.n	8009dc8 <_vfiprintf_r+0xc0>
 8009dac:	9b05      	ldr	r3, [sp, #20]
 8009dae:	0021      	movs	r1, r4
 8009db0:	0030      	movs	r0, r6
 8009db2:	9a03      	ldr	r2, [sp, #12]
 8009db4:	f7ff ff96 	bl	8009ce4 <__sfputs_r>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d100      	bne.n	8009dbe <_vfiprintf_r+0xb6>
 8009dbc:	e0b5      	b.n	8009f2a <_vfiprintf_r+0x222>
 8009dbe:	696a      	ldr	r2, [r5, #20]
 8009dc0:	9b05      	ldr	r3, [sp, #20]
 8009dc2:	4694      	mov	ip, r2
 8009dc4:	4463      	add	r3, ip
 8009dc6:	616b      	str	r3, [r5, #20]
 8009dc8:	783b      	ldrb	r3, [r7, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d100      	bne.n	8009dd0 <_vfiprintf_r+0xc8>
 8009dce:	e0ac      	b.n	8009f2a <_vfiprintf_r+0x222>
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	1c7b      	adds	r3, r7, #1
 8009dd4:	9303      	str	r3, [sp, #12]
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	4252      	negs	r2, r2
 8009dda:	606a      	str	r2, [r5, #4]
 8009ddc:	a904      	add	r1, sp, #16
 8009dde:	3254      	adds	r2, #84	; 0x54
 8009de0:	1852      	adds	r2, r2, r1
 8009de2:	602b      	str	r3, [r5, #0]
 8009de4:	60eb      	str	r3, [r5, #12]
 8009de6:	60ab      	str	r3, [r5, #8]
 8009de8:	7013      	strb	r3, [r2, #0]
 8009dea:	65ab      	str	r3, [r5, #88]	; 0x58
 8009dec:	9b03      	ldr	r3, [sp, #12]
 8009dee:	2205      	movs	r2, #5
 8009df0:	7819      	ldrb	r1, [r3, #0]
 8009df2:	485d      	ldr	r0, [pc, #372]	; (8009f68 <_vfiprintf_r+0x260>)
 8009df4:	f7ff f89c 	bl	8008f30 <memchr>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	1c5f      	adds	r7, r3, #1
 8009dfc:	2800      	cmp	r0, #0
 8009dfe:	d120      	bne.n	8009e42 <_vfiprintf_r+0x13a>
 8009e00:	682a      	ldr	r2, [r5, #0]
 8009e02:	06d3      	lsls	r3, r2, #27
 8009e04:	d504      	bpl.n	8009e10 <_vfiprintf_r+0x108>
 8009e06:	2353      	movs	r3, #83	; 0x53
 8009e08:	a904      	add	r1, sp, #16
 8009e0a:	185b      	adds	r3, r3, r1
 8009e0c:	2120      	movs	r1, #32
 8009e0e:	7019      	strb	r1, [r3, #0]
 8009e10:	0713      	lsls	r3, r2, #28
 8009e12:	d504      	bpl.n	8009e1e <_vfiprintf_r+0x116>
 8009e14:	2353      	movs	r3, #83	; 0x53
 8009e16:	a904      	add	r1, sp, #16
 8009e18:	185b      	adds	r3, r3, r1
 8009e1a:	212b      	movs	r1, #43	; 0x2b
 8009e1c:	7019      	strb	r1, [r3, #0]
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b2a      	cmp	r3, #42	; 0x2a
 8009e24:	d016      	beq.n	8009e54 <_vfiprintf_r+0x14c>
 8009e26:	2100      	movs	r1, #0
 8009e28:	68eb      	ldr	r3, [r5, #12]
 8009e2a:	9f03      	ldr	r7, [sp, #12]
 8009e2c:	783a      	ldrb	r2, [r7, #0]
 8009e2e:	1c78      	adds	r0, r7, #1
 8009e30:	3a30      	subs	r2, #48	; 0x30
 8009e32:	4684      	mov	ip, r0
 8009e34:	2a09      	cmp	r2, #9
 8009e36:	d94f      	bls.n	8009ed8 <_vfiprintf_r+0x1d0>
 8009e38:	2900      	cmp	r1, #0
 8009e3a:	d111      	bne.n	8009e60 <_vfiprintf_r+0x158>
 8009e3c:	e017      	b.n	8009e6e <_vfiprintf_r+0x166>
 8009e3e:	3701      	adds	r7, #1
 8009e40:	e7a9      	b.n	8009d96 <_vfiprintf_r+0x8e>
 8009e42:	4b49      	ldr	r3, [pc, #292]	; (8009f68 <_vfiprintf_r+0x260>)
 8009e44:	682a      	ldr	r2, [r5, #0]
 8009e46:	1ac0      	subs	r0, r0, r3
 8009e48:	2301      	movs	r3, #1
 8009e4a:	4083      	lsls	r3, r0
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	602b      	str	r3, [r5, #0]
 8009e50:	9703      	str	r7, [sp, #12]
 8009e52:	e7cb      	b.n	8009dec <_vfiprintf_r+0xe4>
 8009e54:	9b07      	ldr	r3, [sp, #28]
 8009e56:	1d19      	adds	r1, r3, #4
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	9107      	str	r1, [sp, #28]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	db01      	blt.n	8009e64 <_vfiprintf_r+0x15c>
 8009e60:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e62:	e004      	b.n	8009e6e <_vfiprintf_r+0x166>
 8009e64:	425b      	negs	r3, r3
 8009e66:	60eb      	str	r3, [r5, #12]
 8009e68:	2302      	movs	r3, #2
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	602b      	str	r3, [r5, #0]
 8009e6e:	783b      	ldrb	r3, [r7, #0]
 8009e70:	2b2e      	cmp	r3, #46	; 0x2e
 8009e72:	d10a      	bne.n	8009e8a <_vfiprintf_r+0x182>
 8009e74:	787b      	ldrb	r3, [r7, #1]
 8009e76:	2b2a      	cmp	r3, #42	; 0x2a
 8009e78:	d137      	bne.n	8009eea <_vfiprintf_r+0x1e2>
 8009e7a:	9b07      	ldr	r3, [sp, #28]
 8009e7c:	3702      	adds	r7, #2
 8009e7e:	1d1a      	adds	r2, r3, #4
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	9207      	str	r2, [sp, #28]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	db2d      	blt.n	8009ee4 <_vfiprintf_r+0x1dc>
 8009e88:	9309      	str	r3, [sp, #36]	; 0x24
 8009e8a:	2203      	movs	r2, #3
 8009e8c:	7839      	ldrb	r1, [r7, #0]
 8009e8e:	4837      	ldr	r0, [pc, #220]	; (8009f6c <_vfiprintf_r+0x264>)
 8009e90:	f7ff f84e 	bl	8008f30 <memchr>
 8009e94:	2800      	cmp	r0, #0
 8009e96:	d007      	beq.n	8009ea8 <_vfiprintf_r+0x1a0>
 8009e98:	4b34      	ldr	r3, [pc, #208]	; (8009f6c <_vfiprintf_r+0x264>)
 8009e9a:	682a      	ldr	r2, [r5, #0]
 8009e9c:	1ac0      	subs	r0, r0, r3
 8009e9e:	2340      	movs	r3, #64	; 0x40
 8009ea0:	4083      	lsls	r3, r0
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	3701      	adds	r7, #1
 8009ea6:	602b      	str	r3, [r5, #0]
 8009ea8:	7839      	ldrb	r1, [r7, #0]
 8009eaa:	1c7b      	adds	r3, r7, #1
 8009eac:	2206      	movs	r2, #6
 8009eae:	4830      	ldr	r0, [pc, #192]	; (8009f70 <_vfiprintf_r+0x268>)
 8009eb0:	9303      	str	r3, [sp, #12]
 8009eb2:	7629      	strb	r1, [r5, #24]
 8009eb4:	f7ff f83c 	bl	8008f30 <memchr>
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d045      	beq.n	8009f48 <_vfiprintf_r+0x240>
 8009ebc:	4b2d      	ldr	r3, [pc, #180]	; (8009f74 <_vfiprintf_r+0x26c>)
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d127      	bne.n	8009f12 <_vfiprintf_r+0x20a>
 8009ec2:	2207      	movs	r2, #7
 8009ec4:	9b07      	ldr	r3, [sp, #28]
 8009ec6:	3307      	adds	r3, #7
 8009ec8:	4393      	bics	r3, r2
 8009eca:	3308      	adds	r3, #8
 8009ecc:	9307      	str	r3, [sp, #28]
 8009ece:	696b      	ldr	r3, [r5, #20]
 8009ed0:	9a04      	ldr	r2, [sp, #16]
 8009ed2:	189b      	adds	r3, r3, r2
 8009ed4:	616b      	str	r3, [r5, #20]
 8009ed6:	e75d      	b.n	8009d94 <_vfiprintf_r+0x8c>
 8009ed8:	210a      	movs	r1, #10
 8009eda:	434b      	muls	r3, r1
 8009edc:	4667      	mov	r7, ip
 8009ede:	189b      	adds	r3, r3, r2
 8009ee0:	3909      	subs	r1, #9
 8009ee2:	e7a3      	b.n	8009e2c <_vfiprintf_r+0x124>
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	425b      	negs	r3, r3
 8009ee8:	e7ce      	b.n	8009e88 <_vfiprintf_r+0x180>
 8009eea:	2300      	movs	r3, #0
 8009eec:	001a      	movs	r2, r3
 8009eee:	3701      	adds	r7, #1
 8009ef0:	606b      	str	r3, [r5, #4]
 8009ef2:	7839      	ldrb	r1, [r7, #0]
 8009ef4:	1c78      	adds	r0, r7, #1
 8009ef6:	3930      	subs	r1, #48	; 0x30
 8009ef8:	4684      	mov	ip, r0
 8009efa:	2909      	cmp	r1, #9
 8009efc:	d903      	bls.n	8009f06 <_vfiprintf_r+0x1fe>
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d0c3      	beq.n	8009e8a <_vfiprintf_r+0x182>
 8009f02:	9209      	str	r2, [sp, #36]	; 0x24
 8009f04:	e7c1      	b.n	8009e8a <_vfiprintf_r+0x182>
 8009f06:	230a      	movs	r3, #10
 8009f08:	435a      	muls	r2, r3
 8009f0a:	4667      	mov	r7, ip
 8009f0c:	1852      	adds	r2, r2, r1
 8009f0e:	3b09      	subs	r3, #9
 8009f10:	e7ef      	b.n	8009ef2 <_vfiprintf_r+0x1ea>
 8009f12:	ab07      	add	r3, sp, #28
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	0022      	movs	r2, r4
 8009f18:	0029      	movs	r1, r5
 8009f1a:	0030      	movs	r0, r6
 8009f1c:	4b16      	ldr	r3, [pc, #88]	; (8009f78 <_vfiprintf_r+0x270>)
 8009f1e:	f7fd fd6f 	bl	8007a00 <_printf_float>
 8009f22:	9004      	str	r0, [sp, #16]
 8009f24:	9b04      	ldr	r3, [sp, #16]
 8009f26:	3301      	adds	r3, #1
 8009f28:	d1d1      	bne.n	8009ece <_vfiprintf_r+0x1c6>
 8009f2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f2c:	07db      	lsls	r3, r3, #31
 8009f2e:	d405      	bmi.n	8009f3c <_vfiprintf_r+0x234>
 8009f30:	89a3      	ldrh	r3, [r4, #12]
 8009f32:	059b      	lsls	r3, r3, #22
 8009f34:	d402      	bmi.n	8009f3c <_vfiprintf_r+0x234>
 8009f36:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f38:	f000 fad4 	bl	800a4e4 <__retarget_lock_release_recursive>
 8009f3c:	89a3      	ldrh	r3, [r4, #12]
 8009f3e:	065b      	lsls	r3, r3, #25
 8009f40:	d500      	bpl.n	8009f44 <_vfiprintf_r+0x23c>
 8009f42:	e70a      	b.n	8009d5a <_vfiprintf_r+0x52>
 8009f44:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009f46:	e70a      	b.n	8009d5e <_vfiprintf_r+0x56>
 8009f48:	ab07      	add	r3, sp, #28
 8009f4a:	9300      	str	r3, [sp, #0]
 8009f4c:	0022      	movs	r2, r4
 8009f4e:	0029      	movs	r1, r5
 8009f50:	0030      	movs	r0, r6
 8009f52:	4b09      	ldr	r3, [pc, #36]	; (8009f78 <_vfiprintf_r+0x270>)
 8009f54:	f7fe f806 	bl	8007f64 <_printf_i>
 8009f58:	e7e3      	b.n	8009f22 <_vfiprintf_r+0x21a>
 8009f5a:	46c0      	nop			; (mov r8, r8)
 8009f5c:	0800adbc 	.word	0x0800adbc
 8009f60:	0800addc 	.word	0x0800addc
 8009f64:	0800ad9c 	.word	0x0800ad9c
 8009f68:	0800ac44 	.word	0x0800ac44
 8009f6c:	0800ac4a 	.word	0x0800ac4a
 8009f70:	0800ac4e 	.word	0x0800ac4e
 8009f74:	08007a01 	.word	0x08007a01
 8009f78:	08009ce5 	.word	0x08009ce5

08009f7c <__swbuf_r>:
 8009f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7e:	0005      	movs	r5, r0
 8009f80:	000e      	movs	r6, r1
 8009f82:	0014      	movs	r4, r2
 8009f84:	2800      	cmp	r0, #0
 8009f86:	d004      	beq.n	8009f92 <__swbuf_r+0x16>
 8009f88:	6983      	ldr	r3, [r0, #24]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d101      	bne.n	8009f92 <__swbuf_r+0x16>
 8009f8e:	f000 fa07 	bl	800a3a0 <__sinit>
 8009f92:	4b22      	ldr	r3, [pc, #136]	; (800a01c <__swbuf_r+0xa0>)
 8009f94:	429c      	cmp	r4, r3
 8009f96:	d12e      	bne.n	8009ff6 <__swbuf_r+0x7a>
 8009f98:	686c      	ldr	r4, [r5, #4]
 8009f9a:	69a3      	ldr	r3, [r4, #24]
 8009f9c:	60a3      	str	r3, [r4, #8]
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	071b      	lsls	r3, r3, #28
 8009fa2:	d532      	bpl.n	800a00a <__swbuf_r+0x8e>
 8009fa4:	6923      	ldr	r3, [r4, #16]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d02f      	beq.n	800a00a <__swbuf_r+0x8e>
 8009faa:	6823      	ldr	r3, [r4, #0]
 8009fac:	6922      	ldr	r2, [r4, #16]
 8009fae:	b2f7      	uxtb	r7, r6
 8009fb0:	1a98      	subs	r0, r3, r2
 8009fb2:	6963      	ldr	r3, [r4, #20]
 8009fb4:	b2f6      	uxtb	r6, r6
 8009fb6:	4283      	cmp	r3, r0
 8009fb8:	dc05      	bgt.n	8009fc6 <__swbuf_r+0x4a>
 8009fba:	0021      	movs	r1, r4
 8009fbc:	0028      	movs	r0, r5
 8009fbe:	f000 f94d 	bl	800a25c <_fflush_r>
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	d127      	bne.n	800a016 <__swbuf_r+0x9a>
 8009fc6:	68a3      	ldr	r3, [r4, #8]
 8009fc8:	3001      	adds	r0, #1
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	60a3      	str	r3, [r4, #8]
 8009fce:	6823      	ldr	r3, [r4, #0]
 8009fd0:	1c5a      	adds	r2, r3, #1
 8009fd2:	6022      	str	r2, [r4, #0]
 8009fd4:	701f      	strb	r7, [r3, #0]
 8009fd6:	6963      	ldr	r3, [r4, #20]
 8009fd8:	4283      	cmp	r3, r0
 8009fda:	d004      	beq.n	8009fe6 <__swbuf_r+0x6a>
 8009fdc:	89a3      	ldrh	r3, [r4, #12]
 8009fde:	07db      	lsls	r3, r3, #31
 8009fe0:	d507      	bpl.n	8009ff2 <__swbuf_r+0x76>
 8009fe2:	2e0a      	cmp	r6, #10
 8009fe4:	d105      	bne.n	8009ff2 <__swbuf_r+0x76>
 8009fe6:	0021      	movs	r1, r4
 8009fe8:	0028      	movs	r0, r5
 8009fea:	f000 f937 	bl	800a25c <_fflush_r>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	d111      	bne.n	800a016 <__swbuf_r+0x9a>
 8009ff2:	0030      	movs	r0, r6
 8009ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ff6:	4b0a      	ldr	r3, [pc, #40]	; (800a020 <__swbuf_r+0xa4>)
 8009ff8:	429c      	cmp	r4, r3
 8009ffa:	d101      	bne.n	800a000 <__swbuf_r+0x84>
 8009ffc:	68ac      	ldr	r4, [r5, #8]
 8009ffe:	e7cc      	b.n	8009f9a <__swbuf_r+0x1e>
 800a000:	4b08      	ldr	r3, [pc, #32]	; (800a024 <__swbuf_r+0xa8>)
 800a002:	429c      	cmp	r4, r3
 800a004:	d1c9      	bne.n	8009f9a <__swbuf_r+0x1e>
 800a006:	68ec      	ldr	r4, [r5, #12]
 800a008:	e7c7      	b.n	8009f9a <__swbuf_r+0x1e>
 800a00a:	0021      	movs	r1, r4
 800a00c:	0028      	movs	r0, r5
 800a00e:	f000 f819 	bl	800a044 <__swsetup_r>
 800a012:	2800      	cmp	r0, #0
 800a014:	d0c9      	beq.n	8009faa <__swbuf_r+0x2e>
 800a016:	2601      	movs	r6, #1
 800a018:	4276      	negs	r6, r6
 800a01a:	e7ea      	b.n	8009ff2 <__swbuf_r+0x76>
 800a01c:	0800adbc 	.word	0x0800adbc
 800a020:	0800addc 	.word	0x0800addc
 800a024:	0800ad9c 	.word	0x0800ad9c

0800a028 <__ascii_wctomb>:
 800a028:	0003      	movs	r3, r0
 800a02a:	1e08      	subs	r0, r1, #0
 800a02c:	d005      	beq.n	800a03a <__ascii_wctomb+0x12>
 800a02e:	2aff      	cmp	r2, #255	; 0xff
 800a030:	d904      	bls.n	800a03c <__ascii_wctomb+0x14>
 800a032:	228a      	movs	r2, #138	; 0x8a
 800a034:	2001      	movs	r0, #1
 800a036:	601a      	str	r2, [r3, #0]
 800a038:	4240      	negs	r0, r0
 800a03a:	4770      	bx	lr
 800a03c:	2001      	movs	r0, #1
 800a03e:	700a      	strb	r2, [r1, #0]
 800a040:	e7fb      	b.n	800a03a <__ascii_wctomb+0x12>
	...

0800a044 <__swsetup_r>:
 800a044:	4b37      	ldr	r3, [pc, #220]	; (800a124 <__swsetup_r+0xe0>)
 800a046:	b570      	push	{r4, r5, r6, lr}
 800a048:	681d      	ldr	r5, [r3, #0]
 800a04a:	0006      	movs	r6, r0
 800a04c:	000c      	movs	r4, r1
 800a04e:	2d00      	cmp	r5, #0
 800a050:	d005      	beq.n	800a05e <__swsetup_r+0x1a>
 800a052:	69ab      	ldr	r3, [r5, #24]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d102      	bne.n	800a05e <__swsetup_r+0x1a>
 800a058:	0028      	movs	r0, r5
 800a05a:	f000 f9a1 	bl	800a3a0 <__sinit>
 800a05e:	4b32      	ldr	r3, [pc, #200]	; (800a128 <__swsetup_r+0xe4>)
 800a060:	429c      	cmp	r4, r3
 800a062:	d10f      	bne.n	800a084 <__swsetup_r+0x40>
 800a064:	686c      	ldr	r4, [r5, #4]
 800a066:	230c      	movs	r3, #12
 800a068:	5ee2      	ldrsh	r2, [r4, r3]
 800a06a:	b293      	uxth	r3, r2
 800a06c:	0711      	lsls	r1, r2, #28
 800a06e:	d42d      	bmi.n	800a0cc <__swsetup_r+0x88>
 800a070:	06d9      	lsls	r1, r3, #27
 800a072:	d411      	bmi.n	800a098 <__swsetup_r+0x54>
 800a074:	2309      	movs	r3, #9
 800a076:	2001      	movs	r0, #1
 800a078:	6033      	str	r3, [r6, #0]
 800a07a:	3337      	adds	r3, #55	; 0x37
 800a07c:	4313      	orrs	r3, r2
 800a07e:	81a3      	strh	r3, [r4, #12]
 800a080:	4240      	negs	r0, r0
 800a082:	bd70      	pop	{r4, r5, r6, pc}
 800a084:	4b29      	ldr	r3, [pc, #164]	; (800a12c <__swsetup_r+0xe8>)
 800a086:	429c      	cmp	r4, r3
 800a088:	d101      	bne.n	800a08e <__swsetup_r+0x4a>
 800a08a:	68ac      	ldr	r4, [r5, #8]
 800a08c:	e7eb      	b.n	800a066 <__swsetup_r+0x22>
 800a08e:	4b28      	ldr	r3, [pc, #160]	; (800a130 <__swsetup_r+0xec>)
 800a090:	429c      	cmp	r4, r3
 800a092:	d1e8      	bne.n	800a066 <__swsetup_r+0x22>
 800a094:	68ec      	ldr	r4, [r5, #12]
 800a096:	e7e6      	b.n	800a066 <__swsetup_r+0x22>
 800a098:	075b      	lsls	r3, r3, #29
 800a09a:	d513      	bpl.n	800a0c4 <__swsetup_r+0x80>
 800a09c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a09e:	2900      	cmp	r1, #0
 800a0a0:	d008      	beq.n	800a0b4 <__swsetup_r+0x70>
 800a0a2:	0023      	movs	r3, r4
 800a0a4:	3344      	adds	r3, #68	; 0x44
 800a0a6:	4299      	cmp	r1, r3
 800a0a8:	d002      	beq.n	800a0b0 <__swsetup_r+0x6c>
 800a0aa:	0030      	movs	r0, r6
 800a0ac:	f7ff fb1c 	bl	80096e8 <_free_r>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	6363      	str	r3, [r4, #52]	; 0x34
 800a0b4:	2224      	movs	r2, #36	; 0x24
 800a0b6:	89a3      	ldrh	r3, [r4, #12]
 800a0b8:	4393      	bics	r3, r2
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	6063      	str	r3, [r4, #4]
 800a0c0:	6923      	ldr	r3, [r4, #16]
 800a0c2:	6023      	str	r3, [r4, #0]
 800a0c4:	2308      	movs	r3, #8
 800a0c6:	89a2      	ldrh	r2, [r4, #12]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	81a3      	strh	r3, [r4, #12]
 800a0cc:	6923      	ldr	r3, [r4, #16]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10b      	bne.n	800a0ea <__swsetup_r+0xa6>
 800a0d2:	21a0      	movs	r1, #160	; 0xa0
 800a0d4:	2280      	movs	r2, #128	; 0x80
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	0089      	lsls	r1, r1, #2
 800a0da:	0092      	lsls	r2, r2, #2
 800a0dc:	400b      	ands	r3, r1
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d003      	beq.n	800a0ea <__swsetup_r+0xa6>
 800a0e2:	0021      	movs	r1, r4
 800a0e4:	0030      	movs	r0, r6
 800a0e6:	f000 fa27 	bl	800a538 <__smakebuf_r>
 800a0ea:	220c      	movs	r2, #12
 800a0ec:	5ea3      	ldrsh	r3, [r4, r2]
 800a0ee:	2001      	movs	r0, #1
 800a0f0:	001a      	movs	r2, r3
 800a0f2:	b299      	uxth	r1, r3
 800a0f4:	4002      	ands	r2, r0
 800a0f6:	4203      	tst	r3, r0
 800a0f8:	d00f      	beq.n	800a11a <__swsetup_r+0xd6>
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	60a2      	str	r2, [r4, #8]
 800a0fe:	6962      	ldr	r2, [r4, #20]
 800a100:	4252      	negs	r2, r2
 800a102:	61a2      	str	r2, [r4, #24]
 800a104:	2000      	movs	r0, #0
 800a106:	6922      	ldr	r2, [r4, #16]
 800a108:	4282      	cmp	r2, r0
 800a10a:	d1ba      	bne.n	800a082 <__swsetup_r+0x3e>
 800a10c:	060a      	lsls	r2, r1, #24
 800a10e:	d5b8      	bpl.n	800a082 <__swsetup_r+0x3e>
 800a110:	2240      	movs	r2, #64	; 0x40
 800a112:	4313      	orrs	r3, r2
 800a114:	81a3      	strh	r3, [r4, #12]
 800a116:	3801      	subs	r0, #1
 800a118:	e7b3      	b.n	800a082 <__swsetup_r+0x3e>
 800a11a:	0788      	lsls	r0, r1, #30
 800a11c:	d400      	bmi.n	800a120 <__swsetup_r+0xdc>
 800a11e:	6962      	ldr	r2, [r4, #20]
 800a120:	60a2      	str	r2, [r4, #8]
 800a122:	e7ef      	b.n	800a104 <__swsetup_r+0xc0>
 800a124:	20000010 	.word	0x20000010
 800a128:	0800adbc 	.word	0x0800adbc
 800a12c:	0800addc 	.word	0x0800addc
 800a130:	0800ad9c 	.word	0x0800ad9c

0800a134 <abort>:
 800a134:	2006      	movs	r0, #6
 800a136:	b510      	push	{r4, lr}
 800a138:	f000 fa74 	bl	800a624 <raise>
 800a13c:	2001      	movs	r0, #1
 800a13e:	f7f8 fefd 	bl	8002f3c <_exit>
	...

0800a144 <__sflush_r>:
 800a144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a146:	898b      	ldrh	r3, [r1, #12]
 800a148:	0005      	movs	r5, r0
 800a14a:	000c      	movs	r4, r1
 800a14c:	071a      	lsls	r2, r3, #28
 800a14e:	d45f      	bmi.n	800a210 <__sflush_r+0xcc>
 800a150:	684a      	ldr	r2, [r1, #4]
 800a152:	2a00      	cmp	r2, #0
 800a154:	dc04      	bgt.n	800a160 <__sflush_r+0x1c>
 800a156:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800a158:	2a00      	cmp	r2, #0
 800a15a:	dc01      	bgt.n	800a160 <__sflush_r+0x1c>
 800a15c:	2000      	movs	r0, #0
 800a15e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a160:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a162:	2f00      	cmp	r7, #0
 800a164:	d0fa      	beq.n	800a15c <__sflush_r+0x18>
 800a166:	2200      	movs	r2, #0
 800a168:	2180      	movs	r1, #128	; 0x80
 800a16a:	682e      	ldr	r6, [r5, #0]
 800a16c:	602a      	str	r2, [r5, #0]
 800a16e:	001a      	movs	r2, r3
 800a170:	0149      	lsls	r1, r1, #5
 800a172:	400a      	ands	r2, r1
 800a174:	420b      	tst	r3, r1
 800a176:	d034      	beq.n	800a1e2 <__sflush_r+0x9e>
 800a178:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a17a:	89a3      	ldrh	r3, [r4, #12]
 800a17c:	075b      	lsls	r3, r3, #29
 800a17e:	d506      	bpl.n	800a18e <__sflush_r+0x4a>
 800a180:	6863      	ldr	r3, [r4, #4]
 800a182:	1ac0      	subs	r0, r0, r3
 800a184:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a186:	2b00      	cmp	r3, #0
 800a188:	d001      	beq.n	800a18e <__sflush_r+0x4a>
 800a18a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a18c:	1ac0      	subs	r0, r0, r3
 800a18e:	0002      	movs	r2, r0
 800a190:	6a21      	ldr	r1, [r4, #32]
 800a192:	2300      	movs	r3, #0
 800a194:	0028      	movs	r0, r5
 800a196:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800a198:	47b8      	blx	r7
 800a19a:	89a1      	ldrh	r1, [r4, #12]
 800a19c:	1c43      	adds	r3, r0, #1
 800a19e:	d106      	bne.n	800a1ae <__sflush_r+0x6a>
 800a1a0:	682b      	ldr	r3, [r5, #0]
 800a1a2:	2b1d      	cmp	r3, #29
 800a1a4:	d831      	bhi.n	800a20a <__sflush_r+0xc6>
 800a1a6:	4a2c      	ldr	r2, [pc, #176]	; (800a258 <__sflush_r+0x114>)
 800a1a8:	40da      	lsrs	r2, r3
 800a1aa:	07d3      	lsls	r3, r2, #31
 800a1ac:	d52d      	bpl.n	800a20a <__sflush_r+0xc6>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	6063      	str	r3, [r4, #4]
 800a1b2:	6923      	ldr	r3, [r4, #16]
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	04cb      	lsls	r3, r1, #19
 800a1b8:	d505      	bpl.n	800a1c6 <__sflush_r+0x82>
 800a1ba:	1c43      	adds	r3, r0, #1
 800a1bc:	d102      	bne.n	800a1c4 <__sflush_r+0x80>
 800a1be:	682b      	ldr	r3, [r5, #0]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d100      	bne.n	800a1c6 <__sflush_r+0x82>
 800a1c4:	6560      	str	r0, [r4, #84]	; 0x54
 800a1c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1c8:	602e      	str	r6, [r5, #0]
 800a1ca:	2900      	cmp	r1, #0
 800a1cc:	d0c6      	beq.n	800a15c <__sflush_r+0x18>
 800a1ce:	0023      	movs	r3, r4
 800a1d0:	3344      	adds	r3, #68	; 0x44
 800a1d2:	4299      	cmp	r1, r3
 800a1d4:	d002      	beq.n	800a1dc <__sflush_r+0x98>
 800a1d6:	0028      	movs	r0, r5
 800a1d8:	f7ff fa86 	bl	80096e8 <_free_r>
 800a1dc:	2000      	movs	r0, #0
 800a1de:	6360      	str	r0, [r4, #52]	; 0x34
 800a1e0:	e7bd      	b.n	800a15e <__sflush_r+0x1a>
 800a1e2:	2301      	movs	r3, #1
 800a1e4:	0028      	movs	r0, r5
 800a1e6:	6a21      	ldr	r1, [r4, #32]
 800a1e8:	47b8      	blx	r7
 800a1ea:	1c43      	adds	r3, r0, #1
 800a1ec:	d1c5      	bne.n	800a17a <__sflush_r+0x36>
 800a1ee:	682b      	ldr	r3, [r5, #0]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d0c2      	beq.n	800a17a <__sflush_r+0x36>
 800a1f4:	2b1d      	cmp	r3, #29
 800a1f6:	d001      	beq.n	800a1fc <__sflush_r+0xb8>
 800a1f8:	2b16      	cmp	r3, #22
 800a1fa:	d101      	bne.n	800a200 <__sflush_r+0xbc>
 800a1fc:	602e      	str	r6, [r5, #0]
 800a1fe:	e7ad      	b.n	800a15c <__sflush_r+0x18>
 800a200:	2340      	movs	r3, #64	; 0x40
 800a202:	89a2      	ldrh	r2, [r4, #12]
 800a204:	4313      	orrs	r3, r2
 800a206:	81a3      	strh	r3, [r4, #12]
 800a208:	e7a9      	b.n	800a15e <__sflush_r+0x1a>
 800a20a:	2340      	movs	r3, #64	; 0x40
 800a20c:	430b      	orrs	r3, r1
 800a20e:	e7fa      	b.n	800a206 <__sflush_r+0xc2>
 800a210:	690f      	ldr	r7, [r1, #16]
 800a212:	2f00      	cmp	r7, #0
 800a214:	d0a2      	beq.n	800a15c <__sflush_r+0x18>
 800a216:	680a      	ldr	r2, [r1, #0]
 800a218:	600f      	str	r7, [r1, #0]
 800a21a:	1bd2      	subs	r2, r2, r7
 800a21c:	9201      	str	r2, [sp, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	079b      	lsls	r3, r3, #30
 800a222:	d100      	bne.n	800a226 <__sflush_r+0xe2>
 800a224:	694a      	ldr	r2, [r1, #20]
 800a226:	60a2      	str	r2, [r4, #8]
 800a228:	9b01      	ldr	r3, [sp, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	dc00      	bgt.n	800a230 <__sflush_r+0xec>
 800a22e:	e795      	b.n	800a15c <__sflush_r+0x18>
 800a230:	003a      	movs	r2, r7
 800a232:	0028      	movs	r0, r5
 800a234:	9b01      	ldr	r3, [sp, #4]
 800a236:	6a21      	ldr	r1, [r4, #32]
 800a238:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a23a:	47b0      	blx	r6
 800a23c:	2800      	cmp	r0, #0
 800a23e:	dc06      	bgt.n	800a24e <__sflush_r+0x10a>
 800a240:	2340      	movs	r3, #64	; 0x40
 800a242:	2001      	movs	r0, #1
 800a244:	89a2      	ldrh	r2, [r4, #12]
 800a246:	4240      	negs	r0, r0
 800a248:	4313      	orrs	r3, r2
 800a24a:	81a3      	strh	r3, [r4, #12]
 800a24c:	e787      	b.n	800a15e <__sflush_r+0x1a>
 800a24e:	9b01      	ldr	r3, [sp, #4]
 800a250:	183f      	adds	r7, r7, r0
 800a252:	1a1b      	subs	r3, r3, r0
 800a254:	9301      	str	r3, [sp, #4]
 800a256:	e7e7      	b.n	800a228 <__sflush_r+0xe4>
 800a258:	20400001 	.word	0x20400001

0800a25c <_fflush_r>:
 800a25c:	690b      	ldr	r3, [r1, #16]
 800a25e:	b570      	push	{r4, r5, r6, lr}
 800a260:	0005      	movs	r5, r0
 800a262:	000c      	movs	r4, r1
 800a264:	2b00      	cmp	r3, #0
 800a266:	d102      	bne.n	800a26e <_fflush_r+0x12>
 800a268:	2500      	movs	r5, #0
 800a26a:	0028      	movs	r0, r5
 800a26c:	bd70      	pop	{r4, r5, r6, pc}
 800a26e:	2800      	cmp	r0, #0
 800a270:	d004      	beq.n	800a27c <_fflush_r+0x20>
 800a272:	6983      	ldr	r3, [r0, #24]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d101      	bne.n	800a27c <_fflush_r+0x20>
 800a278:	f000 f892 	bl	800a3a0 <__sinit>
 800a27c:	4b14      	ldr	r3, [pc, #80]	; (800a2d0 <_fflush_r+0x74>)
 800a27e:	429c      	cmp	r4, r3
 800a280:	d11b      	bne.n	800a2ba <_fflush_r+0x5e>
 800a282:	686c      	ldr	r4, [r5, #4]
 800a284:	220c      	movs	r2, #12
 800a286:	5ea3      	ldrsh	r3, [r4, r2]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d0ed      	beq.n	800a268 <_fflush_r+0xc>
 800a28c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a28e:	07d2      	lsls	r2, r2, #31
 800a290:	d404      	bmi.n	800a29c <_fflush_r+0x40>
 800a292:	059b      	lsls	r3, r3, #22
 800a294:	d402      	bmi.n	800a29c <_fflush_r+0x40>
 800a296:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a298:	f000 f923 	bl	800a4e2 <__retarget_lock_acquire_recursive>
 800a29c:	0028      	movs	r0, r5
 800a29e:	0021      	movs	r1, r4
 800a2a0:	f7ff ff50 	bl	800a144 <__sflush_r>
 800a2a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2a6:	0005      	movs	r5, r0
 800a2a8:	07db      	lsls	r3, r3, #31
 800a2aa:	d4de      	bmi.n	800a26a <_fflush_r+0xe>
 800a2ac:	89a3      	ldrh	r3, [r4, #12]
 800a2ae:	059b      	lsls	r3, r3, #22
 800a2b0:	d4db      	bmi.n	800a26a <_fflush_r+0xe>
 800a2b2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2b4:	f000 f916 	bl	800a4e4 <__retarget_lock_release_recursive>
 800a2b8:	e7d7      	b.n	800a26a <_fflush_r+0xe>
 800a2ba:	4b06      	ldr	r3, [pc, #24]	; (800a2d4 <_fflush_r+0x78>)
 800a2bc:	429c      	cmp	r4, r3
 800a2be:	d101      	bne.n	800a2c4 <_fflush_r+0x68>
 800a2c0:	68ac      	ldr	r4, [r5, #8]
 800a2c2:	e7df      	b.n	800a284 <_fflush_r+0x28>
 800a2c4:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <_fflush_r+0x7c>)
 800a2c6:	429c      	cmp	r4, r3
 800a2c8:	d1dc      	bne.n	800a284 <_fflush_r+0x28>
 800a2ca:	68ec      	ldr	r4, [r5, #12]
 800a2cc:	e7da      	b.n	800a284 <_fflush_r+0x28>
 800a2ce:	46c0      	nop			; (mov r8, r8)
 800a2d0:	0800adbc 	.word	0x0800adbc
 800a2d4:	0800addc 	.word	0x0800addc
 800a2d8:	0800ad9c 	.word	0x0800ad9c

0800a2dc <std>:
 800a2dc:	2300      	movs	r3, #0
 800a2de:	b510      	push	{r4, lr}
 800a2e0:	0004      	movs	r4, r0
 800a2e2:	6003      	str	r3, [r0, #0]
 800a2e4:	6043      	str	r3, [r0, #4]
 800a2e6:	6083      	str	r3, [r0, #8]
 800a2e8:	8181      	strh	r1, [r0, #12]
 800a2ea:	6643      	str	r3, [r0, #100]	; 0x64
 800a2ec:	0019      	movs	r1, r3
 800a2ee:	81c2      	strh	r2, [r0, #14]
 800a2f0:	6103      	str	r3, [r0, #16]
 800a2f2:	6143      	str	r3, [r0, #20]
 800a2f4:	6183      	str	r3, [r0, #24]
 800a2f6:	2208      	movs	r2, #8
 800a2f8:	305c      	adds	r0, #92	; 0x5c
 800a2fa:	f7fd facf 	bl	800789c <memset>
 800a2fe:	4b05      	ldr	r3, [pc, #20]	; (800a314 <std+0x38>)
 800a300:	6224      	str	r4, [r4, #32]
 800a302:	6263      	str	r3, [r4, #36]	; 0x24
 800a304:	4b04      	ldr	r3, [pc, #16]	; (800a318 <std+0x3c>)
 800a306:	62a3      	str	r3, [r4, #40]	; 0x28
 800a308:	4b04      	ldr	r3, [pc, #16]	; (800a31c <std+0x40>)
 800a30a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a30c:	4b04      	ldr	r3, [pc, #16]	; (800a320 <std+0x44>)
 800a30e:	6323      	str	r3, [r4, #48]	; 0x30
 800a310:	bd10      	pop	{r4, pc}
 800a312:	46c0      	nop			; (mov r8, r8)
 800a314:	0800a665 	.word	0x0800a665
 800a318:	0800a68d 	.word	0x0800a68d
 800a31c:	0800a6c5 	.word	0x0800a6c5
 800a320:	0800a6f1 	.word	0x0800a6f1

0800a324 <_cleanup_r>:
 800a324:	b510      	push	{r4, lr}
 800a326:	4902      	ldr	r1, [pc, #8]	; (800a330 <_cleanup_r+0xc>)
 800a328:	f000 f8ba 	bl	800a4a0 <_fwalk_reent>
 800a32c:	bd10      	pop	{r4, pc}
 800a32e:	46c0      	nop			; (mov r8, r8)
 800a330:	0800a25d 	.word	0x0800a25d

0800a334 <__sfmoreglue>:
 800a334:	b570      	push	{r4, r5, r6, lr}
 800a336:	2568      	movs	r5, #104	; 0x68
 800a338:	1e4a      	subs	r2, r1, #1
 800a33a:	4355      	muls	r5, r2
 800a33c:	000e      	movs	r6, r1
 800a33e:	0029      	movs	r1, r5
 800a340:	3174      	adds	r1, #116	; 0x74
 800a342:	f7ff fa3d 	bl	80097c0 <_malloc_r>
 800a346:	1e04      	subs	r4, r0, #0
 800a348:	d008      	beq.n	800a35c <__sfmoreglue+0x28>
 800a34a:	2100      	movs	r1, #0
 800a34c:	002a      	movs	r2, r5
 800a34e:	6001      	str	r1, [r0, #0]
 800a350:	6046      	str	r6, [r0, #4]
 800a352:	300c      	adds	r0, #12
 800a354:	60a0      	str	r0, [r4, #8]
 800a356:	3268      	adds	r2, #104	; 0x68
 800a358:	f7fd faa0 	bl	800789c <memset>
 800a35c:	0020      	movs	r0, r4
 800a35e:	bd70      	pop	{r4, r5, r6, pc}

0800a360 <__sfp_lock_acquire>:
 800a360:	b510      	push	{r4, lr}
 800a362:	4802      	ldr	r0, [pc, #8]	; (800a36c <__sfp_lock_acquire+0xc>)
 800a364:	f000 f8bd 	bl	800a4e2 <__retarget_lock_acquire_recursive>
 800a368:	bd10      	pop	{r4, pc}
 800a36a:	46c0      	nop			; (mov r8, r8)
 800a36c:	20000451 	.word	0x20000451

0800a370 <__sfp_lock_release>:
 800a370:	b510      	push	{r4, lr}
 800a372:	4802      	ldr	r0, [pc, #8]	; (800a37c <__sfp_lock_release+0xc>)
 800a374:	f000 f8b6 	bl	800a4e4 <__retarget_lock_release_recursive>
 800a378:	bd10      	pop	{r4, pc}
 800a37a:	46c0      	nop			; (mov r8, r8)
 800a37c:	20000451 	.word	0x20000451

0800a380 <__sinit_lock_acquire>:
 800a380:	b510      	push	{r4, lr}
 800a382:	4802      	ldr	r0, [pc, #8]	; (800a38c <__sinit_lock_acquire+0xc>)
 800a384:	f000 f8ad 	bl	800a4e2 <__retarget_lock_acquire_recursive>
 800a388:	bd10      	pop	{r4, pc}
 800a38a:	46c0      	nop			; (mov r8, r8)
 800a38c:	20000452 	.word	0x20000452

0800a390 <__sinit_lock_release>:
 800a390:	b510      	push	{r4, lr}
 800a392:	4802      	ldr	r0, [pc, #8]	; (800a39c <__sinit_lock_release+0xc>)
 800a394:	f000 f8a6 	bl	800a4e4 <__retarget_lock_release_recursive>
 800a398:	bd10      	pop	{r4, pc}
 800a39a:	46c0      	nop			; (mov r8, r8)
 800a39c:	20000452 	.word	0x20000452

0800a3a0 <__sinit>:
 800a3a0:	b513      	push	{r0, r1, r4, lr}
 800a3a2:	0004      	movs	r4, r0
 800a3a4:	f7ff ffec 	bl	800a380 <__sinit_lock_acquire>
 800a3a8:	69a3      	ldr	r3, [r4, #24]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <__sinit+0x14>
 800a3ae:	f7ff ffef 	bl	800a390 <__sinit_lock_release>
 800a3b2:	bd13      	pop	{r0, r1, r4, pc}
 800a3b4:	64a3      	str	r3, [r4, #72]	; 0x48
 800a3b6:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a3b8:	6523      	str	r3, [r4, #80]	; 0x50
 800a3ba:	4b13      	ldr	r3, [pc, #76]	; (800a408 <__sinit+0x68>)
 800a3bc:	4a13      	ldr	r2, [pc, #76]	; (800a40c <__sinit+0x6c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a3c2:	9301      	str	r3, [sp, #4]
 800a3c4:	42a3      	cmp	r3, r4
 800a3c6:	d101      	bne.n	800a3cc <__sinit+0x2c>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	61a3      	str	r3, [r4, #24]
 800a3cc:	0020      	movs	r0, r4
 800a3ce:	f000 f81f 	bl	800a410 <__sfp>
 800a3d2:	6060      	str	r0, [r4, #4]
 800a3d4:	0020      	movs	r0, r4
 800a3d6:	f000 f81b 	bl	800a410 <__sfp>
 800a3da:	60a0      	str	r0, [r4, #8]
 800a3dc:	0020      	movs	r0, r4
 800a3de:	f000 f817 	bl	800a410 <__sfp>
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	2104      	movs	r1, #4
 800a3e6:	60e0      	str	r0, [r4, #12]
 800a3e8:	6860      	ldr	r0, [r4, #4]
 800a3ea:	f7ff ff77 	bl	800a2dc <std>
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	2109      	movs	r1, #9
 800a3f2:	68a0      	ldr	r0, [r4, #8]
 800a3f4:	f7ff ff72 	bl	800a2dc <std>
 800a3f8:	2202      	movs	r2, #2
 800a3fa:	2112      	movs	r1, #18
 800a3fc:	68e0      	ldr	r0, [r4, #12]
 800a3fe:	f7ff ff6d 	bl	800a2dc <std>
 800a402:	2301      	movs	r3, #1
 800a404:	61a3      	str	r3, [r4, #24]
 800a406:	e7d2      	b.n	800a3ae <__sinit+0xe>
 800a408:	0800aa24 	.word	0x0800aa24
 800a40c:	0800a325 	.word	0x0800a325

0800a410 <__sfp>:
 800a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a412:	0007      	movs	r7, r0
 800a414:	f7ff ffa4 	bl	800a360 <__sfp_lock_acquire>
 800a418:	4b1f      	ldr	r3, [pc, #124]	; (800a498 <__sfp+0x88>)
 800a41a:	681e      	ldr	r6, [r3, #0]
 800a41c:	69b3      	ldr	r3, [r6, #24]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d102      	bne.n	800a428 <__sfp+0x18>
 800a422:	0030      	movs	r0, r6
 800a424:	f7ff ffbc 	bl	800a3a0 <__sinit>
 800a428:	3648      	adds	r6, #72	; 0x48
 800a42a:	68b4      	ldr	r4, [r6, #8]
 800a42c:	6873      	ldr	r3, [r6, #4]
 800a42e:	3b01      	subs	r3, #1
 800a430:	d504      	bpl.n	800a43c <__sfp+0x2c>
 800a432:	6833      	ldr	r3, [r6, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d022      	beq.n	800a47e <__sfp+0x6e>
 800a438:	6836      	ldr	r6, [r6, #0]
 800a43a:	e7f6      	b.n	800a42a <__sfp+0x1a>
 800a43c:	220c      	movs	r2, #12
 800a43e:	5ea5      	ldrsh	r5, [r4, r2]
 800a440:	2d00      	cmp	r5, #0
 800a442:	d11a      	bne.n	800a47a <__sfp+0x6a>
 800a444:	0020      	movs	r0, r4
 800a446:	4b15      	ldr	r3, [pc, #84]	; (800a49c <__sfp+0x8c>)
 800a448:	3058      	adds	r0, #88	; 0x58
 800a44a:	60e3      	str	r3, [r4, #12]
 800a44c:	6665      	str	r5, [r4, #100]	; 0x64
 800a44e:	f000 f847 	bl	800a4e0 <__retarget_lock_init_recursive>
 800a452:	f7ff ff8d 	bl	800a370 <__sfp_lock_release>
 800a456:	0020      	movs	r0, r4
 800a458:	2208      	movs	r2, #8
 800a45a:	0029      	movs	r1, r5
 800a45c:	6025      	str	r5, [r4, #0]
 800a45e:	60a5      	str	r5, [r4, #8]
 800a460:	6065      	str	r5, [r4, #4]
 800a462:	6125      	str	r5, [r4, #16]
 800a464:	6165      	str	r5, [r4, #20]
 800a466:	61a5      	str	r5, [r4, #24]
 800a468:	305c      	adds	r0, #92	; 0x5c
 800a46a:	f7fd fa17 	bl	800789c <memset>
 800a46e:	6365      	str	r5, [r4, #52]	; 0x34
 800a470:	63a5      	str	r5, [r4, #56]	; 0x38
 800a472:	64a5      	str	r5, [r4, #72]	; 0x48
 800a474:	64e5      	str	r5, [r4, #76]	; 0x4c
 800a476:	0020      	movs	r0, r4
 800a478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a47a:	3468      	adds	r4, #104	; 0x68
 800a47c:	e7d7      	b.n	800a42e <__sfp+0x1e>
 800a47e:	2104      	movs	r1, #4
 800a480:	0038      	movs	r0, r7
 800a482:	f7ff ff57 	bl	800a334 <__sfmoreglue>
 800a486:	1e04      	subs	r4, r0, #0
 800a488:	6030      	str	r0, [r6, #0]
 800a48a:	d1d5      	bne.n	800a438 <__sfp+0x28>
 800a48c:	f7ff ff70 	bl	800a370 <__sfp_lock_release>
 800a490:	230c      	movs	r3, #12
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	e7ef      	b.n	800a476 <__sfp+0x66>
 800a496:	46c0      	nop			; (mov r8, r8)
 800a498:	0800aa24 	.word	0x0800aa24
 800a49c:	ffff0001 	.word	0xffff0001

0800a4a0 <_fwalk_reent>:
 800a4a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4a2:	0004      	movs	r4, r0
 800a4a4:	0006      	movs	r6, r0
 800a4a6:	2700      	movs	r7, #0
 800a4a8:	9101      	str	r1, [sp, #4]
 800a4aa:	3448      	adds	r4, #72	; 0x48
 800a4ac:	6863      	ldr	r3, [r4, #4]
 800a4ae:	68a5      	ldr	r5, [r4, #8]
 800a4b0:	9300      	str	r3, [sp, #0]
 800a4b2:	9b00      	ldr	r3, [sp, #0]
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	9300      	str	r3, [sp, #0]
 800a4b8:	d504      	bpl.n	800a4c4 <_fwalk_reent+0x24>
 800a4ba:	6824      	ldr	r4, [r4, #0]
 800a4bc:	2c00      	cmp	r4, #0
 800a4be:	d1f5      	bne.n	800a4ac <_fwalk_reent+0xc>
 800a4c0:	0038      	movs	r0, r7
 800a4c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4c4:	89ab      	ldrh	r3, [r5, #12]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d908      	bls.n	800a4dc <_fwalk_reent+0x3c>
 800a4ca:	220e      	movs	r2, #14
 800a4cc:	5eab      	ldrsh	r3, [r5, r2]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	d004      	beq.n	800a4dc <_fwalk_reent+0x3c>
 800a4d2:	0029      	movs	r1, r5
 800a4d4:	0030      	movs	r0, r6
 800a4d6:	9b01      	ldr	r3, [sp, #4]
 800a4d8:	4798      	blx	r3
 800a4da:	4307      	orrs	r7, r0
 800a4dc:	3568      	adds	r5, #104	; 0x68
 800a4de:	e7e8      	b.n	800a4b2 <_fwalk_reent+0x12>

0800a4e0 <__retarget_lock_init_recursive>:
 800a4e0:	4770      	bx	lr

0800a4e2 <__retarget_lock_acquire_recursive>:
 800a4e2:	4770      	bx	lr

0800a4e4 <__retarget_lock_release_recursive>:
 800a4e4:	4770      	bx	lr
	...

0800a4e8 <__swhatbuf_r>:
 800a4e8:	b570      	push	{r4, r5, r6, lr}
 800a4ea:	000e      	movs	r6, r1
 800a4ec:	001d      	movs	r5, r3
 800a4ee:	230e      	movs	r3, #14
 800a4f0:	5ec9      	ldrsh	r1, [r1, r3]
 800a4f2:	0014      	movs	r4, r2
 800a4f4:	b096      	sub	sp, #88	; 0x58
 800a4f6:	2900      	cmp	r1, #0
 800a4f8:	da08      	bge.n	800a50c <__swhatbuf_r+0x24>
 800a4fa:	220c      	movs	r2, #12
 800a4fc:	5eb3      	ldrsh	r3, [r6, r2]
 800a4fe:	2200      	movs	r2, #0
 800a500:	602a      	str	r2, [r5, #0]
 800a502:	061b      	lsls	r3, r3, #24
 800a504:	d411      	bmi.n	800a52a <__swhatbuf_r+0x42>
 800a506:	2380      	movs	r3, #128	; 0x80
 800a508:	00db      	lsls	r3, r3, #3
 800a50a:	e00f      	b.n	800a52c <__swhatbuf_r+0x44>
 800a50c:	466a      	mov	r2, sp
 800a50e:	f000 f91b 	bl	800a748 <_fstat_r>
 800a512:	2800      	cmp	r0, #0
 800a514:	dbf1      	blt.n	800a4fa <__swhatbuf_r+0x12>
 800a516:	23f0      	movs	r3, #240	; 0xf0
 800a518:	9901      	ldr	r1, [sp, #4]
 800a51a:	021b      	lsls	r3, r3, #8
 800a51c:	4019      	ands	r1, r3
 800a51e:	4b05      	ldr	r3, [pc, #20]	; (800a534 <__swhatbuf_r+0x4c>)
 800a520:	18c9      	adds	r1, r1, r3
 800a522:	424b      	negs	r3, r1
 800a524:	4159      	adcs	r1, r3
 800a526:	6029      	str	r1, [r5, #0]
 800a528:	e7ed      	b.n	800a506 <__swhatbuf_r+0x1e>
 800a52a:	2340      	movs	r3, #64	; 0x40
 800a52c:	2000      	movs	r0, #0
 800a52e:	6023      	str	r3, [r4, #0]
 800a530:	b016      	add	sp, #88	; 0x58
 800a532:	bd70      	pop	{r4, r5, r6, pc}
 800a534:	ffffe000 	.word	0xffffe000

0800a538 <__smakebuf_r>:
 800a538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a53a:	2602      	movs	r6, #2
 800a53c:	898b      	ldrh	r3, [r1, #12]
 800a53e:	0005      	movs	r5, r0
 800a540:	000c      	movs	r4, r1
 800a542:	4233      	tst	r3, r6
 800a544:	d006      	beq.n	800a554 <__smakebuf_r+0x1c>
 800a546:	0023      	movs	r3, r4
 800a548:	3347      	adds	r3, #71	; 0x47
 800a54a:	6023      	str	r3, [r4, #0]
 800a54c:	6123      	str	r3, [r4, #16]
 800a54e:	2301      	movs	r3, #1
 800a550:	6163      	str	r3, [r4, #20]
 800a552:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800a554:	466a      	mov	r2, sp
 800a556:	ab01      	add	r3, sp, #4
 800a558:	f7ff ffc6 	bl	800a4e8 <__swhatbuf_r>
 800a55c:	9900      	ldr	r1, [sp, #0]
 800a55e:	0007      	movs	r7, r0
 800a560:	0028      	movs	r0, r5
 800a562:	f7ff f92d 	bl	80097c0 <_malloc_r>
 800a566:	2800      	cmp	r0, #0
 800a568:	d108      	bne.n	800a57c <__smakebuf_r+0x44>
 800a56a:	220c      	movs	r2, #12
 800a56c:	5ea3      	ldrsh	r3, [r4, r2]
 800a56e:	059a      	lsls	r2, r3, #22
 800a570:	d4ef      	bmi.n	800a552 <__smakebuf_r+0x1a>
 800a572:	2203      	movs	r2, #3
 800a574:	4393      	bics	r3, r2
 800a576:	431e      	orrs	r6, r3
 800a578:	81a6      	strh	r6, [r4, #12]
 800a57a:	e7e4      	b.n	800a546 <__smakebuf_r+0xe>
 800a57c:	4b0f      	ldr	r3, [pc, #60]	; (800a5bc <__smakebuf_r+0x84>)
 800a57e:	62ab      	str	r3, [r5, #40]	; 0x28
 800a580:	2380      	movs	r3, #128	; 0x80
 800a582:	89a2      	ldrh	r2, [r4, #12]
 800a584:	6020      	str	r0, [r4, #0]
 800a586:	4313      	orrs	r3, r2
 800a588:	81a3      	strh	r3, [r4, #12]
 800a58a:	9b00      	ldr	r3, [sp, #0]
 800a58c:	6120      	str	r0, [r4, #16]
 800a58e:	6163      	str	r3, [r4, #20]
 800a590:	9b01      	ldr	r3, [sp, #4]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d00d      	beq.n	800a5b2 <__smakebuf_r+0x7a>
 800a596:	0028      	movs	r0, r5
 800a598:	230e      	movs	r3, #14
 800a59a:	5ee1      	ldrsh	r1, [r4, r3]
 800a59c:	f000 f8e6 	bl	800a76c <_isatty_r>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d006      	beq.n	800a5b2 <__smakebuf_r+0x7a>
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	4393      	bics	r3, r2
 800a5aa:	001a      	movs	r2, r3
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	81a3      	strh	r3, [r4, #12]
 800a5b2:	89a0      	ldrh	r0, [r4, #12]
 800a5b4:	4307      	orrs	r7, r0
 800a5b6:	81a7      	strh	r7, [r4, #12]
 800a5b8:	e7cb      	b.n	800a552 <__smakebuf_r+0x1a>
 800a5ba:	46c0      	nop			; (mov r8, r8)
 800a5bc:	0800a325 	.word	0x0800a325

0800a5c0 <_malloc_usable_size_r>:
 800a5c0:	1f0b      	subs	r3, r1, #4
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	1f18      	subs	r0, r3, #4
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	da01      	bge.n	800a5ce <_malloc_usable_size_r+0xe>
 800a5ca:	580b      	ldr	r3, [r1, r0]
 800a5cc:	18c0      	adds	r0, r0, r3
 800a5ce:	4770      	bx	lr

0800a5d0 <_raise_r>:
 800a5d0:	b570      	push	{r4, r5, r6, lr}
 800a5d2:	0004      	movs	r4, r0
 800a5d4:	000d      	movs	r5, r1
 800a5d6:	291f      	cmp	r1, #31
 800a5d8:	d904      	bls.n	800a5e4 <_raise_r+0x14>
 800a5da:	2316      	movs	r3, #22
 800a5dc:	6003      	str	r3, [r0, #0]
 800a5de:	2001      	movs	r0, #1
 800a5e0:	4240      	negs	r0, r0
 800a5e2:	bd70      	pop	{r4, r5, r6, pc}
 800a5e4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d004      	beq.n	800a5f4 <_raise_r+0x24>
 800a5ea:	008a      	lsls	r2, r1, #2
 800a5ec:	189b      	adds	r3, r3, r2
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	2a00      	cmp	r2, #0
 800a5f2:	d108      	bne.n	800a606 <_raise_r+0x36>
 800a5f4:	0020      	movs	r0, r4
 800a5f6:	f000 f831 	bl	800a65c <_getpid_r>
 800a5fa:	002a      	movs	r2, r5
 800a5fc:	0001      	movs	r1, r0
 800a5fe:	0020      	movs	r0, r4
 800a600:	f000 f81a 	bl	800a638 <_kill_r>
 800a604:	e7ed      	b.n	800a5e2 <_raise_r+0x12>
 800a606:	2000      	movs	r0, #0
 800a608:	2a01      	cmp	r2, #1
 800a60a:	d0ea      	beq.n	800a5e2 <_raise_r+0x12>
 800a60c:	1c51      	adds	r1, r2, #1
 800a60e:	d103      	bne.n	800a618 <_raise_r+0x48>
 800a610:	2316      	movs	r3, #22
 800a612:	3001      	adds	r0, #1
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	e7e4      	b.n	800a5e2 <_raise_r+0x12>
 800a618:	2400      	movs	r4, #0
 800a61a:	0028      	movs	r0, r5
 800a61c:	601c      	str	r4, [r3, #0]
 800a61e:	4790      	blx	r2
 800a620:	0020      	movs	r0, r4
 800a622:	e7de      	b.n	800a5e2 <_raise_r+0x12>

0800a624 <raise>:
 800a624:	b510      	push	{r4, lr}
 800a626:	4b03      	ldr	r3, [pc, #12]	; (800a634 <raise+0x10>)
 800a628:	0001      	movs	r1, r0
 800a62a:	6818      	ldr	r0, [r3, #0]
 800a62c:	f7ff ffd0 	bl	800a5d0 <_raise_r>
 800a630:	bd10      	pop	{r4, pc}
 800a632:	46c0      	nop			; (mov r8, r8)
 800a634:	20000010 	.word	0x20000010

0800a638 <_kill_r>:
 800a638:	2300      	movs	r3, #0
 800a63a:	b570      	push	{r4, r5, r6, lr}
 800a63c:	4d06      	ldr	r5, [pc, #24]	; (800a658 <_kill_r+0x20>)
 800a63e:	0004      	movs	r4, r0
 800a640:	0008      	movs	r0, r1
 800a642:	0011      	movs	r1, r2
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	f7f8 fc69 	bl	8002f1c <_kill>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	d103      	bne.n	800a656 <_kill_r+0x1e>
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d000      	beq.n	800a656 <_kill_r+0x1e>
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	bd70      	pop	{r4, r5, r6, pc}
 800a658:	2000044c 	.word	0x2000044c

0800a65c <_getpid_r>:
 800a65c:	b510      	push	{r4, lr}
 800a65e:	f7f8 fc57 	bl	8002f10 <_getpid>
 800a662:	bd10      	pop	{r4, pc}

0800a664 <__sread>:
 800a664:	b570      	push	{r4, r5, r6, lr}
 800a666:	000c      	movs	r4, r1
 800a668:	250e      	movs	r5, #14
 800a66a:	5f49      	ldrsh	r1, [r1, r5]
 800a66c:	f000 f8a4 	bl	800a7b8 <_read_r>
 800a670:	2800      	cmp	r0, #0
 800a672:	db03      	blt.n	800a67c <__sread+0x18>
 800a674:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a676:	181b      	adds	r3, r3, r0
 800a678:	6563      	str	r3, [r4, #84]	; 0x54
 800a67a:	bd70      	pop	{r4, r5, r6, pc}
 800a67c:	89a3      	ldrh	r3, [r4, #12]
 800a67e:	4a02      	ldr	r2, [pc, #8]	; (800a688 <__sread+0x24>)
 800a680:	4013      	ands	r3, r2
 800a682:	81a3      	strh	r3, [r4, #12]
 800a684:	e7f9      	b.n	800a67a <__sread+0x16>
 800a686:	46c0      	nop			; (mov r8, r8)
 800a688:	ffffefff 	.word	0xffffefff

0800a68c <__swrite>:
 800a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a68e:	001f      	movs	r7, r3
 800a690:	898b      	ldrh	r3, [r1, #12]
 800a692:	0005      	movs	r5, r0
 800a694:	000c      	movs	r4, r1
 800a696:	0016      	movs	r6, r2
 800a698:	05db      	lsls	r3, r3, #23
 800a69a:	d505      	bpl.n	800a6a8 <__swrite+0x1c>
 800a69c:	230e      	movs	r3, #14
 800a69e:	5ec9      	ldrsh	r1, [r1, r3]
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2302      	movs	r3, #2
 800a6a4:	f000 f874 	bl	800a790 <_lseek_r>
 800a6a8:	89a3      	ldrh	r3, [r4, #12]
 800a6aa:	4a05      	ldr	r2, [pc, #20]	; (800a6c0 <__swrite+0x34>)
 800a6ac:	0028      	movs	r0, r5
 800a6ae:	4013      	ands	r3, r2
 800a6b0:	81a3      	strh	r3, [r4, #12]
 800a6b2:	0032      	movs	r2, r6
 800a6b4:	230e      	movs	r3, #14
 800a6b6:	5ee1      	ldrsh	r1, [r4, r3]
 800a6b8:	003b      	movs	r3, r7
 800a6ba:	f000 f81f 	bl	800a6fc <_write_r>
 800a6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6c0:	ffffefff 	.word	0xffffefff

0800a6c4 <__sseek>:
 800a6c4:	b570      	push	{r4, r5, r6, lr}
 800a6c6:	000c      	movs	r4, r1
 800a6c8:	250e      	movs	r5, #14
 800a6ca:	5f49      	ldrsh	r1, [r1, r5]
 800a6cc:	f000 f860 	bl	800a790 <_lseek_r>
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	1c42      	adds	r2, r0, #1
 800a6d4:	d103      	bne.n	800a6de <__sseek+0x1a>
 800a6d6:	4a05      	ldr	r2, [pc, #20]	; (800a6ec <__sseek+0x28>)
 800a6d8:	4013      	ands	r3, r2
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	bd70      	pop	{r4, r5, r6, pc}
 800a6de:	2280      	movs	r2, #128	; 0x80
 800a6e0:	0152      	lsls	r2, r2, #5
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	81a3      	strh	r3, [r4, #12]
 800a6e6:	6560      	str	r0, [r4, #84]	; 0x54
 800a6e8:	e7f8      	b.n	800a6dc <__sseek+0x18>
 800a6ea:	46c0      	nop			; (mov r8, r8)
 800a6ec:	ffffefff 	.word	0xffffefff

0800a6f0 <__sclose>:
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	230e      	movs	r3, #14
 800a6f4:	5ec9      	ldrsh	r1, [r1, r3]
 800a6f6:	f000 f815 	bl	800a724 <_close_r>
 800a6fa:	bd10      	pop	{r4, pc}

0800a6fc <_write_r>:
 800a6fc:	b570      	push	{r4, r5, r6, lr}
 800a6fe:	0004      	movs	r4, r0
 800a700:	0008      	movs	r0, r1
 800a702:	0011      	movs	r1, r2
 800a704:	001a      	movs	r2, r3
 800a706:	2300      	movs	r3, #0
 800a708:	4d05      	ldr	r5, [pc, #20]	; (800a720 <_write_r+0x24>)
 800a70a:	602b      	str	r3, [r5, #0]
 800a70c:	f7f8 fc3f 	bl	8002f8e <_write>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d103      	bne.n	800a71c <_write_r+0x20>
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d000      	beq.n	800a71c <_write_r+0x20>
 800a71a:	6023      	str	r3, [r4, #0]
 800a71c:	bd70      	pop	{r4, r5, r6, pc}
 800a71e:	46c0      	nop			; (mov r8, r8)
 800a720:	2000044c 	.word	0x2000044c

0800a724 <_close_r>:
 800a724:	2300      	movs	r3, #0
 800a726:	b570      	push	{r4, r5, r6, lr}
 800a728:	4d06      	ldr	r5, [pc, #24]	; (800a744 <_close_r+0x20>)
 800a72a:	0004      	movs	r4, r0
 800a72c:	0008      	movs	r0, r1
 800a72e:	602b      	str	r3, [r5, #0]
 800a730:	f7f8 fc49 	bl	8002fc6 <_close>
 800a734:	1c43      	adds	r3, r0, #1
 800a736:	d103      	bne.n	800a740 <_close_r+0x1c>
 800a738:	682b      	ldr	r3, [r5, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d000      	beq.n	800a740 <_close_r+0x1c>
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	bd70      	pop	{r4, r5, r6, pc}
 800a742:	46c0      	nop			; (mov r8, r8)
 800a744:	2000044c 	.word	0x2000044c

0800a748 <_fstat_r>:
 800a748:	2300      	movs	r3, #0
 800a74a:	b570      	push	{r4, r5, r6, lr}
 800a74c:	4d06      	ldr	r5, [pc, #24]	; (800a768 <_fstat_r+0x20>)
 800a74e:	0004      	movs	r4, r0
 800a750:	0008      	movs	r0, r1
 800a752:	0011      	movs	r1, r2
 800a754:	602b      	str	r3, [r5, #0]
 800a756:	f7f8 fc40 	bl	8002fda <_fstat>
 800a75a:	1c43      	adds	r3, r0, #1
 800a75c:	d103      	bne.n	800a766 <_fstat_r+0x1e>
 800a75e:	682b      	ldr	r3, [r5, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d000      	beq.n	800a766 <_fstat_r+0x1e>
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	bd70      	pop	{r4, r5, r6, pc}
 800a768:	2000044c 	.word	0x2000044c

0800a76c <_isatty_r>:
 800a76c:	2300      	movs	r3, #0
 800a76e:	b570      	push	{r4, r5, r6, lr}
 800a770:	4d06      	ldr	r5, [pc, #24]	; (800a78c <_isatty_r+0x20>)
 800a772:	0004      	movs	r4, r0
 800a774:	0008      	movs	r0, r1
 800a776:	602b      	str	r3, [r5, #0]
 800a778:	f7f8 fc3d 	bl	8002ff6 <_isatty>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d103      	bne.n	800a788 <_isatty_r+0x1c>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d000      	beq.n	800a788 <_isatty_r+0x1c>
 800a786:	6023      	str	r3, [r4, #0]
 800a788:	bd70      	pop	{r4, r5, r6, pc}
 800a78a:	46c0      	nop			; (mov r8, r8)
 800a78c:	2000044c 	.word	0x2000044c

0800a790 <_lseek_r>:
 800a790:	b570      	push	{r4, r5, r6, lr}
 800a792:	0004      	movs	r4, r0
 800a794:	0008      	movs	r0, r1
 800a796:	0011      	movs	r1, r2
 800a798:	001a      	movs	r2, r3
 800a79a:	2300      	movs	r3, #0
 800a79c:	4d05      	ldr	r5, [pc, #20]	; (800a7b4 <_lseek_r+0x24>)
 800a79e:	602b      	str	r3, [r5, #0]
 800a7a0:	f7f8 fc32 	bl	8003008 <_lseek>
 800a7a4:	1c43      	adds	r3, r0, #1
 800a7a6:	d103      	bne.n	800a7b0 <_lseek_r+0x20>
 800a7a8:	682b      	ldr	r3, [r5, #0]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d000      	beq.n	800a7b0 <_lseek_r+0x20>
 800a7ae:	6023      	str	r3, [r4, #0]
 800a7b0:	bd70      	pop	{r4, r5, r6, pc}
 800a7b2:	46c0      	nop			; (mov r8, r8)
 800a7b4:	2000044c 	.word	0x2000044c

0800a7b8 <_read_r>:
 800a7b8:	b570      	push	{r4, r5, r6, lr}
 800a7ba:	0004      	movs	r4, r0
 800a7bc:	0008      	movs	r0, r1
 800a7be:	0011      	movs	r1, r2
 800a7c0:	001a      	movs	r2, r3
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	4d05      	ldr	r5, [pc, #20]	; (800a7dc <_read_r+0x24>)
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7f8 fbc4 	bl	8002f54 <_read>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d103      	bne.n	800a7d8 <_read_r+0x20>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d000      	beq.n	800a7d8 <_read_r+0x20>
 800a7d6:	6023      	str	r3, [r4, #0]
 800a7d8:	bd70      	pop	{r4, r5, r6, pc}
 800a7da:	46c0      	nop			; (mov r8, r8)
 800a7dc:	2000044c 	.word	0x2000044c

0800a7e0 <_init>:
 800a7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e2:	46c0      	nop			; (mov r8, r8)
 800a7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7e6:	bc08      	pop	{r3}
 800a7e8:	469e      	mov	lr, r3
 800a7ea:	4770      	bx	lr

0800a7ec <_fini>:
 800a7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ee:	46c0      	nop			; (mov r8, r8)
 800a7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7f2:	bc08      	pop	{r3}
 800a7f4:	469e      	mov	lr, r3
 800a7f6:	4770      	bx	lr
